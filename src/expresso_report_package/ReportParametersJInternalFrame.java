/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package expresso_report_package;


import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.poi.POIXMLException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


/**
 *
 * @author User01
 */
public class ReportParametersJInternalFrame extends javax.swing.JInternalFrame {
    private static String rep_code;
    private static String sheetname;
    private static Integer row;
    private static Integer col;
    private static String refdate;
    /**
     * Creates new form ReportParametersJInternalFrame
     * @throws java.sql.SQLException
     */
    
    public ReportParametersJInternalFrame(String repcode) throws SQLException, IOException {
        initComponents();
        rep_code = repcode;
        this.setTitle(repcode);
        if(rep_code == "REPORT_PREPARATION"){
            //code for report_preparation
          
            System.out.println(rep_code);
            
           
           
        }else{
            //this is the old code
            Connection conn = ConnectionManager.getConnection();
            Statement st = conn.createStatement();      
            String sql;
            sql = "select distinct cast(ref_date as date) ref_date from gl_daily_file order by cast(ref_date as date) desc;";

            ResultSet rs = st.executeQuery(sql);
            while (rs.next())
            {
                //System.out.println(rs.getString(1));
                this.cmbCutOffDate.addItem(rs.getString("ref_date"));
            }

            rs.close();

            sql = "select name from branch order by id;";

            rs = st.executeQuery(sql);
            while (rs.next())
            {
                //System.out.println(rs.getString(1));
                this.cmbBranch.addItem(rs.getString("name"));
            }
           
            rs.close();
        }
        
    }
    
    //ReportPreparationForm
    

    ReportParametersJInternalFrame() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        chkConsolidateFlag = new javax.swing.JCheckBox();
        cmbBranch = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        cmbCutOffDate = new javax.swing.JComboBox();
        btnGenerate = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setClosable(true);
        setTitle("Report Parameters");
        setName("reportparameterframe"); // NOI18N

        jLabel1.setText("Report Cut-Off Date:");

        chkConsolidateFlag.setSelected(true);
        chkConsolidateFlag.setText("Consolidate Report");
        chkConsolidateFlag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkConsolidateFlagActionPerformed(evt);
            }
        });

        cmbBranch.setEnabled(false);
        cmbBranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbBranchActionPerformed(evt);
            }
        });

        jLabel2.setText("Branch");

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        cmbCutOffDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCutOffDateActionPerformed(evt);
            }
        });

        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGenerate))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel2))
                            .addComponent(chkConsolidateFlag)
                            .addComponent(jLabel1))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(cmbBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(cmbCutOffDate, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCancel, btnGenerate});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbCutOffDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkConsolidateFlag)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbBranch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnGenerate))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cmbCutOffDate.getAccessibleContext().setAccessibleName("cmbDate");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        //reportparameterframe.setDefaultCloseOperation(JInternalFrame.DISPOSE_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void chkConsolidateFlagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkConsolidateFlagActionPerformed
        if (chkConsolidateFlag.isSelected())
            cmbBranch.setEnabled(false);
        else 
            cmbBranch.setEnabled(true);
    }//GEN-LAST:event_chkConsolidateFlagActionPerformed

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        // TODO add your handling code here:
        
        System.out.println("Generating");
        if(rep_code == "REPORT_PREPARATION"){
         //THIS IS FOR REPORT PREPARATION
              this.cmbCutOffDate.setVisible(false);
        }else{
        //OLD CODE INSERT HERE
            this.cmbCutOffDate.setEnabled(true);
        refdate = this.cmbCutOffDate.getSelectedItem().toString();
        String sql;
        String sql2;
        String sql3;
        Integer rep_loop =0;  
        Integer repCounter = 0;
        String branchId="";
        
        try{
            String excelTemplate = CreateReport.getReportTemplate(rep_code);
            System.out.println("back to btnGenerateAction");
            System.out.println(rep_code);
            System.out.println(refdate);
            System.out.println(excelTemplate);

            String current = new java.io.File( "." ).getCanonicalPath();
            System.out.println("Current dir:"+current);
            System.out.println(current+excelTemplate);
            //HSSFWorkbook report_excel_template;
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            // convert it into a POI object
            //Read Excel document first
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            // convert it into a POI object
            report_excel_template = new XSSFWorkbook(input_document);
            //report_excel_template = new HSSFWorkbook(input_document); 
            //openExcelTemplate(excelTemplate,rep_code,refdate);
            
            System.out.println("Report Excell template" +  report_excel_template);
            
            String input_date=refdate;
            SimpleDateFormat format1=new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date dt1=format1.parse(input_date);
            DateFormat format2=new SimpleDateFormat("EEEE"); 
            String dayOfDate=format2.format(dt1);
            System.out.println("mydate: " + dayOfDate);

            if ((rep_code.equals("WRRAR")) && (!dayOfDate.equals("Fridayx"))){
                JOptionPane.showMessageDialog(this, "WRRAR reference date must fall on a Friday");
                return;
            }
            if (rep_code.equals("WRRAR")){
                rep_loop = 6;
            }
            else if (rep_code.equals("PBS") || rep_code.equals("PBSCP") ){
                rep_loop = 1;
            }
            else {
                rep_loop = 0;
            } 
            
            System.out.println("Report Loop: " + rep_loop.toString());
            
            Connection conn = ConnectionManager.getConnection();
            Statement st = conn.createStatement();
            
            repCounter = 0;
            while (repCounter <= rep_loop){
                //build glbalances for the cut-off date
                
                if (chkConsolidateFlag.isSelected()){
                    branchId = "null";
                    }
                else { 
                    branchId = String.valueOf(this.cmbBranch.getSelectedIndex()+1);
                    }
                    System.out.println("rep date , ref code " + refdate + " " + repCounter);
                    sql3 = "select "
                                + "code, "
                                + "gl_description, "
                                + "branch_id, "
                                + "currency_id, "
                                + "round(cast(prev_balance as double precision) + (cast(total_debit_txn_of_period as double precision) + cast(total_credit_txn_of_period as double precision)),2)"
                            + " from fn_get_gl_balances_as_of_cutoff(cast('" + refdate +"' as date),(select array_agg(id) from branch),"+ repCounter + ");";
                           // +"select code, gl_description, branch_id, currecy_id, balance  from gl_balances;";
                   
                
                System.out.println(sql3);
                //st.executeUpdate(sql3);
                ResultSet rs = st.executeQuery(sql3);
                
                sql = "select rep_code , sheet , row , col  from report_dataform  where rep_code = '" + rep_code +"';";
                //System.out.println(sql);
                rs = st.executeQuery(sql);
                System.out.println("result of sql query " + rs);
                //this is the insert script insert into 
                //excell
                while (rs.next()){
                    System.out.println("Report Data Formulation Details");    
                    System.out.println(rs.getString(1));
                    System.out.println(rs.getString(2));
                    System.out.println(rs.getString(3));
                    System.out.println(rs.getString(4));
                    System.out.println("Current Row "+rs.getRow());

                    sheetname = rs.getString(2);
                    row = Integer.parseInt(rs.getString(3));
                    col = Integer.parseInt(rs.getString(4));
                    
                    XSSFSheet report_worksheet;
                    report_worksheet = report_excel_template.getSheet(sheetname);
                    System.out.println("worksheet" + report_worksheet);
                    //HSSFSheet report_worksheet = report_excel_template.getSheetAt(0);
                    // declare a Cell object
                    Cell cell = null;

                    System.out.println("Report Counter Pass:");
                    System.out.println( repCounter);
                    
                    if ((rep_code.equals("PBS") || rep_code.equals("PBSCP") ) && repCounter == 1) {

                        String sql_refdate = "(select cast(date_trunc('quarter', TIMESTAMP '"+refdate+"' + time '00:00') as date) - 1)::date";
                        System.out.println(sql_refdate);
                        sql2 = "select fn_getcellvalue('"+rep_code+"', '"+sheetname+"', "+ row.toString()+", "+col.toString()+", "
                            + sql_refdate +","+branchId+") as cell_value; ";
                    }
                    else if (rep_code.equals("WRRAR")) {

                        String sql_refdate = "(select cast(date_trunc('day', TIMESTAMP '"+refdate+"' + time '00:00') as date) + "+ repCounter +")::date";
                        System.out.println(sql_refdate);
                        sql2 = "select fn_getcellvalue('"+rep_code+"', '"+sheetname+"', "+ row.toString()+", "+col.toString()+", "
                            + sql_refdate +","+branchId+") as cell_value; ";
                    }
                    else{
                       System.out.println("DEBUG AS 2 13 2018");
                        //report_worksheet.getRow(row).createCell(col+repCounter).setCellValue(0.0); // forces to create the cell
                        sql2 = "select fn_getcellvalue('"+rep_code+"', '"+sheetname+"', "+ row.toString()+", "+col.toString()+", date '"
                                + refdate +"' + " + repCounter +","+branchId+") as cell_value; ";
                    }

                    System.out.println(sql2);
                    Statement st2 = conn.createStatement();
                    ResultSet rs2 = st2.executeQuery(sql2);

                    while (rs2.next()){

                        System.out.println("fn_getcellvalue result: " + rs2.getString(1));
                        
                        cell = report_worksheet.getRow(row).getCell(col+repCounter);
                        System.out.println(cell);
                      
                        Double cell_value = Double.parseDouble(rs2.getString(1));
                        try{
                            cell.setCellValue(cell_value);
                        }catch(POIXMLException ex){
                            JOptionPane.showMessageDialog(this, ex.getMessage());
                            JOptionPane.showMessageDialog(this, ex.getMessage() +rep_code+"', '"+sheetname+"', "+ row.toString()+", "+col.toString());
                        }catch(NullPointerException ex){
                            JOptionPane.showMessageDialog(this, ex.getMessage());
                            JOptionPane.showMessageDialog(this, "Error on Data formulation: "+rep_code+"', '"+sheetname+"', "+ row.toString()+", "+col.toString());
                        }
                    }
                    
                }
                repCounter++;
            }
                 
            //important to close InputStream
            //Open FileOutputStream to write updates
            String str;
            str = "";
            if (!chkConsolidateFlag.isSelected()){
                str="_"+this.cmbBranch.getSelectedItem().toString();
                System.out.println("STR" + str);
            }
            FileOutputStream output_file =new FileOutputStream(new File(current+"\\output\\"+rep_code+str+"_"+refdate+".xlsm"));
            //write changes
            report_excel_template.write(output_file);
            //close the stream
            output_file.close(); 
            JOptionPane.showMessageDialog(this, "Report Complete.");
            this.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage()+""
                    + "\n Report Code: "+rep_code+", Sheet: "+sheetname+", Row: "+ row.toString()+", Column: "+col.toString());
        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (ParseException ex) {
            Logger.getLogger(ReportParametersJInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        
        
    }//GEN-LAST:event_btnGenerateActionPerformed

    private void cmbCutOffDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCutOffDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCutOffDateActionPerformed

    private void cmbBranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbBranchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbBranchActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JCheckBox chkConsolidateFlag;
    private javax.swing.JComboBox cmbBranch;
    private javax.swing.JComboBox cmbCutOffDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
