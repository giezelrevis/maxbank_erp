/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


package expresso_report_package;

import com.sun.media.sound.InvalidFormatException;
import java.awt.Cursor;
import java.io.*;
import java.util.*;
import java.util.Calendar;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.POIXMLException;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellValue;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.FormulaEvaluator;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFFormulaEvaluator;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


/**
 *
 * @author Cyrus Magsino
 */
public class FSReportJInternalFrame extends javax.swing.JInternalFrame {
     private static final SimpleDateFormat SDF = new SimpleDateFormat( "yyyy-MM-dd" );
    /**
     * Creates new form FSReportJInternalFrame
     */
      public FSReportJInternalFrame(String repcode) throws SQLException, IOException {
        initComponents();
        
        
        //this is the old code
            Connection conn = ConnectionManager.getConnection();
            Statement st = conn.createStatement();      
            String sql;
            
            sql = "select name from branch order by id;";
            ResultSet rs = st.executeQuery(sql);
            rs = st.executeQuery(sql);
            while (rs.next())
            {
                //System.out.println(rs.getString(1));
                this.cmbBranch.addItem(rs.getString("name"));
            }
           
            rs.close();
    }    
    FSReportJInternalFrame() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGenerate = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jCalReportCutOff = new org.freixas.jcalendar.JCalendarCombo();
        chkConsolidateFlag = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        cmbBranch = new javax.swing.JComboBox();
        J = new javax.swing.JProgressBar();

        setClosable(true);
        setTitle("Financial Report");
        setMinimumSize(new java.awt.Dimension(91, 34));
        setName("reportparameterframe"); // NOI18N
        setNormalBounds(new java.awt.Rectangle(0, 0, 91, 0));
        setPreferredSize(new java.awt.Dimension(410, 157));
        setVisible(true);

        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel1.setText("Report Cut-Off Date:");

        jCalReportCutOff.setName("fsDateString"); // NOI18N
        jCalReportCutOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCalReportCutOffActionPerformed(evt);
            }
        });

        chkConsolidateFlag.setSelected(true);
        chkConsolidateFlag.setText("Consolidate Report");
        chkConsolidateFlag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkConsolidateFlagActionPerformed(evt);
            }
        });

        jLabel2.setText("Branch");

        cmbBranch.setEnabled(false);
        cmbBranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbBranchActionPerformed(evt);
            }
        });

        J.setMaximum(23);
        J.setStringPainted(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkConsolidateFlag)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jCalReportCutOff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(75, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGenerate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(J, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(34, 34, 34)
                    .addComponent(jLabel2)
                    .addGap(70, 70, 70)
                    .addComponent(cmbBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(13, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jCalReportCutOff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkConsolidateFlag)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnGenerate)
                    .addComponent(J, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(63, 63, 63)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(cmbBranch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(53, Short.MAX_VALUE)))
        );

        jCalReportCutOff.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    int selectedIndex,count=0;
    String selectedBranch;
    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        
        
        selectedIndex = cmbBranch.getSelectedIndex();
        selectedBranch = cmbBranch.getSelectedItem().toString();
         
        System.out.println("======================= GENERATE FINANCIAL STATEMENT ==========================");
        
        System.out.println("chkConsolidateFlag.isSelected(): "+chkConsolidateFlag.isSelected());
        
        System.out.println("START");
        Thread thread;
        thread = new Thread(new Runnable(){
             @Override
             public void run(){
                 String dateString = SDF.format( jCalReportCutOff.getDate() );
                 String rep_code = "FRPWORKFILEFS";
                 String branchId="";
                 btnGenerate.setEnabled(false);
                 String xstarter = "START";
                 setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                try {
                     
                    //if (chkConsolidateFlag.isSelected() == true){
                    if(xstarter.equalsIgnoreCase("START")){
                    // ============= MAY IF DATI ======================     
                        //start
                        
                        String sqlstr = "";
                        Connection conn = ConnectionManager.getConnection();
                        Statement st = conn.createStatement();
                        String excelTemplate = CreateReport.getReportTemplate("FRPWORKFILEFS");
                        Integer xrow = 1;
                        Integer xcol = 1;
                        String current = new java.io.File( "." ).getCanonicalPath();
                        XSSFWorkbook report_excel_template; // for xlsx/xlsm
                        // convert it into a POI object
                        //Read Excel document first

                        FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
                        // convert it into a POI object
                        report_excel_template = new XSSFWorkbook(input_document);
//      

                        ResultSet rs = null;  
                        if (chkConsolidateFlag.isSelected() == true){
                            System.out.println("==== > CONSOLIDATED FINANCIAL STATEMENT GENERATION");
                            sqlstr = "with X as ( ";
                            sqlstr +="select ";
                            sqlstr +="A.sort_code as sort_code, round(sum(B.debit_balance - B.credit_balance),2) as bal_amt ";
                            sqlstr +="from gl_sort_code A ";
                            sqlstr +="left outer join gl_daily_file B on A.sort_code = substring(B.code from 1 for char_length(A.sort_code)) ";
                            sqlstr +="and B.ref_date = '"+dateString+"' and B.currency_id = 1 ";
                            sqlstr +="group by A.sort_code,A.sort_name ";
                            sqlstr +="order by A.sort_code,A.sort_name ), ";
                            sqlstr +="Y as ( ";
                            sqlstr +="select ";
                            sqlstr +="A.sort_code as sort_code, case when round(sum(B.debit_amt - B.credit_amt),2) is null then 0 else round(sum(B.debit_amt - B.credit_amt),2) end as bal_amt ";
                            sqlstr +="from gl_sort_code A ";
                            sqlstr +="left outer join gl_txn_file B on A.sort_code = substring(B.gl_account_code from 1 for char_length(A.sort_code)) ";
                            sqlstr +="inner join gl_account C on B.gl_account_id = C.id ";
                            sqlstr +="and B.txn_value_date <= '"+dateString+"' and b.txn_date > '"+dateString+"' and C.currency_id = 1 ";
                            sqlstr +="group by A.sort_code,A.sort_name ";
                            sqlstr +="order by A.sort_code,A.sort_name ";
                            sqlstr +=") ";
                            sqlstr +="select ";
                            sqlstr +="'A-' || A.sort_code as gl, ";
                            sqlstr +="A.sort_name, ";
                            sqlstr +="case when X.bal_amt + case when Y.bal_amt is null then 0 else Y.bal_amt end >= 0 ";
                            sqlstr +="then X.bal_amt + case when Y.bal_amt is null then 0 else Y.bal_amt end else (X.bal_amt + case when Y.bal_amt is null then 0 else Y.bal_amt end) * -1 end as adj_bal, ";
                            sqlstr +="case when X.bal_amt > 0 then X.bal_amt end as debit, ";
                            sqlstr +="case when X.bal_amt < 0 then X.bal_amt * -1 else 0 end as credit, ";
                            sqlstr +="case when Y.bal_amt > 0 then Y.bal_amt end as debit_txn, ";
                            sqlstr +="case when Y.bal_amt < 0 then Y.bal_amt * -1 else 0 end as credit_txn ";
                            sqlstr +="from gl_sort_code A ";
                            sqlstr +="inner join X on A.sort_code = X.sort_code ";
                            sqlstr +="left outer join Y on A.sort_code = Y.sort_code ";
                            sqlstr +="order by gl ";
                            rs = st.executeQuery(sqlstr);
                        
                        }else{
                            System.out.println("==== > BRANCH FINANCIAL STATEMENT GENERATION");
                            System.out.println("selectedBranch: "+selectedBranch);
                            System.out.println("BRANCH ID: "+selectedIndex+1);
                            
                            branchId = String.valueOf(selectedIndex+1);
                            sqlstr = "with X as ( ";
                            sqlstr +="select ";
                            sqlstr +="A.sort_code as sort_code, round(sum(B.debit_balance - B.credit_balance),2) as bal_amt ";
                            sqlstr +="from gl_sort_code A ";
                            sqlstr +="left outer join gl_daily_file B on A.sort_code = substring(B.code from 1 for char_length(A.sort_code)) ";
                            sqlstr +="and B.ref_date = '"+dateString+"' and B.currency_id = 1 and B.branch_id = "+branchId+"";
                            sqlstr +="group by A.sort_code,A.sort_name ";
                            sqlstr +="order by A.sort_code,A.sort_name ), ";
                            sqlstr +="Y as ( ";
                            sqlstr +="select ";
                            sqlstr +="A.sort_code as sort_code, case when round(sum(B.debit_amt - B.credit_amt),2) is null then 0 else round(sum(B.debit_amt - B.credit_amt),2) end as bal_amt ";
                            sqlstr +="from gl_sort_code A ";
                            sqlstr +="left outer join gl_txn_file B on A.sort_code = substring(B.gl_account_code from 1 for char_length(A.sort_code)) and B.branch_id = "+branchId+" ";
                            sqlstr +="inner join gl_account C on B.gl_account_id = C.id ";
                            sqlstr +="and B.txn_value_date <= '"+dateString+"' and b.txn_date > '"+dateString+"' and C.currency_id = 1 and C.branch_id = "+branchId+"";
                            sqlstr +="group by A.sort_code,A.sort_name ";
                            sqlstr +="order by A.sort_code,A.sort_name ";
                            sqlstr +=") ";
                            sqlstr +="select ";
                            sqlstr +="'A-' || A.sort_code as gl, ";
                            sqlstr +="A.sort_name, ";
                            sqlstr +="case when X.bal_amt + case when Y.bal_amt is null then 0 else Y.bal_amt end >= 0 ";
                            sqlstr +="then X.bal_amt + case when Y.bal_amt is null then 0 else Y.bal_amt end else (X.bal_amt + case when Y.bal_amt is null then 0 else Y.bal_amt end) * -1 end as adj_bal, ";
                            sqlstr +="case when X.bal_amt > 0 then X.bal_amt end as debit, ";
                            sqlstr +="case when X.bal_amt < 0 then X.bal_amt * -1 else 0 end as credit, ";
                            sqlstr +="case when Y.bal_amt > 0 then Y.bal_amt end as debit_txn, ";
                            sqlstr +="case when Y.bal_amt < 0 then Y.bal_amt * -1 else 0 end as credit_txn ";
                            sqlstr +="from gl_sort_code A ";
                            sqlstr +="inner join X on A.sort_code = X.sort_code ";
                            sqlstr +="left outer join Y on A.sort_code = Y.sort_code ";
                            sqlstr +="order by gl ";
                            rs = st.executeQuery(sqlstr);
                        }
                        if(!rs.isBeforeFirst()){
                            System.out.println("NO VALUE");
                            XSSFSheet report_worksheet;
                            report_worksheet = report_excel_template.getSheet("ICBS-TB-SC");
                            System.out.println("row value" + report_worksheet.getLastRowNum());


                            for (int x =1; x <=  report_worksheet.getLastRowNum(); x++){
                                Row row = report_worksheet.getRow(x);
                                for(int y=1;y<4;y++){
                                    System.out.println("row : " + x + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                    Cell cell = row.getCell(y);
                                    if (cell == null){
                                        cell = row.createCell(y);
                                    }
                                    cell.setCellValue(" ");

                                }

                            }
                        }else{
                            System.out.println("WITH DATA VALUE");
                            while (rs.next()){
                                System.out.println( "GL" + rs.getString(1));
                                System.out.println( "Sort Name" + rs.getString(2));
                                System.out.println( "Adj Balance" + rs.getString(3));
                                System.out.println( "Debit" + rs.getString(4));
                                System.out.println( "Credit" + rs.getString(5));
                                System.out.println( "Debit txn" + rs.getString(6));
                                System.out.println( "Credit txn" + rs.getString(7));

                                XSSFSheet report_worksheet;
                                report_worksheet = report_excel_template.getSheet("ICBS-TB-SC");

                                //HSSFSheet report_worksheet = report_excel_template.getSheetAt(0);
                                // declare a Cell object
                                System.out.println("Report Counter Pass:" + report_worksheet);
                                System.out.println("xrow " + xrow);
                                System.out.println(xrow);
                                //START

                                Row row = report_worksheet.getRow(xrow);
                                if (row == null) {
                                    // No entries in this row
                                    // Handle empty
                                    // continue;
                                    row = report_worksheet.createRow(xrow);
                                }
                                for(int y=1;y<=7;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING SC" + row.getCell(y));

                                    Cell cell = row.getCell(y);
                                    if (cell == null){
                                        cell = row.createCell(y);
                                    }
                                    try{
                                        if(y < 3){
                                            cell.setCellValue(String.valueOf(rs.getString(y)));
                                        }else{
                                            //null

                                            System.out.println("i > 3 :" + rs.getString(y));
                                            if(rs.getString(y) == null || Double.parseDouble(rs.getString(y)) == 0){

                                                cell.setCellValue(0.00D);
                                            }else{
                                                System.out.println("rs.is not null");

                                                cell.setCellValue(Double.parseDouble(rs.getString(y)));
                                            }

                                        }
                                    }catch(POIXMLException ex){
                                        //  JOptionPane.showMessageDialog(this, ex.getMessage());

                                    }catch(NullPointerException ex){
                                        //  JOptionPane.showMessageDialog(this, ex.getMessage());

                                    }

                                }
                                xrow += 1;
                                //END
                            }
                        }
                        
                        count++;
                        J.setValue(count);
                        Thread.sleep(500);
                        System.out.println("FIRST REPORT END");

                        st.close();
                        xrow = 1;
                        String sqlstr2 = "";
                        Statement st2 = conn.createStatement();
                        
                        ResultSet rs2 = null;  
                        if (chkConsolidateFlag.isSelected() == true){
                            sqlstr2 = "with Y as ( ";
                            sqlstr2 += "select B.gl_account_code as gl_account_code, ";
                            sqlstr2 += "case when round(sum(B.debit_amt - B.credit_amt),2) is null then 0 ";
                            sqlstr2 += "else round(sum(B.debit_amt - B.credit_amt),2) end as bal_amt ";
                            sqlstr2 += "from gl_txn_file B ";
                            sqlstr2 += "inner join gl_account C on B.gl_account_id = C.id ";
                            sqlstr2 += "and B.txn_value_date <= '"+dateString+"' and b.txn_date > '"+dateString+"' and C.currency_id = 1 ";
                            sqlstr2 += "group by B.gl_account_code ";
                            sqlstr2 += "order by B.gl_account_code ";
                            sqlstr2 += ") ";
                            sqlstr2 += "select A.code, A.name, abs(sum(A.debit_balance - A.credit_balance) +  ";
                            sqlstr2 += "case when Y.bal_amt is null then 0 else Y.bal_amt end) ";
                            sqlstr2 += "from gl_daily_file A ";
                            sqlstr2 += "left outer join Y on A.code = Y.gl_account_code ";
                            sqlstr2 += "where A.ref_date = '"+dateString+"' ";
                            sqlstr2 += "group by A.code, A.name, Y.bal_amt ";
                            sqlstr2 += "order by A.code ";
                            System.out.println(sqlstr2);

                            rs2 = st2.executeQuery(sqlstr2);
                        }else{
                            branchId = String.valueOf(selectedIndex+1);
                            sqlstr2 = "with Y as ( ";
                            sqlstr2 += "select B.gl_account_code as gl_account_code, ";
                            sqlstr2 += "case when round(sum(B.debit_amt - B.credit_amt),2) is null then 0 ";
                            sqlstr2 += "else round(sum(B.debit_amt - B.credit_amt),2) end as bal_amt ";
                            sqlstr2 += "from gl_txn_file B ";
                            sqlstr2 += "inner join gl_account C on B.gl_account_id = C.id and C.branch_id = "+branchId+" ";
                            sqlstr2 += "and B.txn_value_date <= '"+dateString+"' and b.txn_date > '"+dateString+"' and C.currency_id = 1 ";
                            sqlstr2 += "group by B.gl_account_code ";
                            sqlstr2 += "order by B.gl_account_code ";
                            sqlstr2 += ") ";
                            sqlstr2 += "select A.code, A.name, abs(sum(A.debit_balance - A.credit_balance) +  ";
                            sqlstr2 += "case when Y.bal_amt is null then 0 else Y.bal_amt end) ";
                            sqlstr2 += "from gl_daily_file A ";
                            sqlstr2 += "left outer join Y on A.code = Y.gl_account_code ";
                            sqlstr2 += "where A.ref_date = '"+dateString+"' and A.branch_id = "+branchId+" ";
                            sqlstr2 += "group by A.code, A.name, Y.bal_amt ";
                            sqlstr2 += "order by A.code ";
                            System.out.println("THIS IS THE QUERY" +  sqlstr2);
                            rs2 = st2.executeQuery(sqlstr2);
                        }
                        if(!rs2.isBeforeFirst()){
                            System.out.println("NO VALUE");
                            XSSFSheet report_worksheet;
                            report_worksheet = report_excel_template.getSheet("ICBS-TB-GL" );
                            System.out.println("row value" + report_worksheet.getLastRowNum());


                            for (int x =1; x <=  report_worksheet.getLastRowNum(); x++){
                                Row row = report_worksheet.getRow(x);
                                for(int y=1;y<4;y++){
                                    System.out.println("row : " + x + "col :" + y);
                                    System.out.println("CELL CLEANING TB GL");
                                    Cell cell = row.getCell(y);
                                    if (cell == null){
                                        cell = row.createCell(y);
                                    }
                                    cell.setCellValue(" ");

                                }

                            }
                        }else{
                            System.out.println("WITH DATA VALUE");
                            while (rs2.next()){
                                System.out.println("ROW GL" + xrow);
                                System.out.println("Column 1 " + rs2.getString(1));
                                System.out.println("Column 2 " + rs2.getString(2));
                                System.out.println("Column 3 " + rs2.getString(3));

                                XSSFSheet report_worksheet;
                                report_worksheet = report_excel_template.getSheet("ICBS-TB-GL");
                                // System.out.println("row value" + report_worksheet.getLastRowNum());


                                Row row = report_worksheet.getRow(xrow);
                       
                                //create new row if row is null
                                if (row == null) {
                                    // No entries in this row
                                    // Handle empty
                                    // continue;
                                    row = report_worksheet.createRow(xrow);
                                }

                                for(int y=1;y<4;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                    String getValue;

                                    Cell cell = row.getCell(y);
                                    if (cell == null){
                                        cell = row.createCell(y);
                                    }
                                    if(y < 3){
                                        if(isNullOrBlank(rs2.getString(y))){
                                            cell.setCellValue(" ");
                                        }else{
                                            cell.setCellValue(rs2.getString(y));
                                        }

                                    }else{
                                        if(isNullOrBlank(rs2.getString(y))){
                                            cell.setCellValue(0.00D);
                                        }else{
                                            cell.setCellValue(Double.parseDouble(rs2.getString(y)));
                                        }
                                        System.out.println("LAST VALUE" + y);
                                    }
                                } //for loop end



                                xrow += 1;

                            } // while loop end
                        } // else end
                        
                        count++;
                        J.setValue(count);
                        Thread.sleep(500);
                        //Overwrite excell
                        XSSFFormulaEvaluator.evaluateAllFormulaCells(report_excel_template);
                        FormulaEvaluator xevaluator = report_excel_template.getCreationHelper().createFormulaEvaluator();
                        xevaluator.setIgnoreMissingWorkbooks(true);
                        System.out.println("FORMULA" + xevaluator);
                        for (Sheet sheet : report_excel_template){
                            System.out.println("Sheet" + sheet);
                            for(Row r : sheet){
                                for(Cell c: r ){

                                    if(c.getCellType() == Cell.CELL_TYPE_FORMULA){
                                        xevaluator.evaluateFormulaCell(c);

                                    }
                                }
                            }
                        }


                        System.out.println ("current+excelTemplate " + current+excelTemplate);
                        FileOutputStream output_file =new FileOutputStream(new File(current+excelTemplate));
                        count++;
                        J.setValue(count);

                        //write changes
                        report_excel_template.write(output_file);
                        //close the stream
                        output_file.close();
                        //START
                        //end
                        J.setMaximum(2);
                        excelTemplate = CreateReport.getReportTemplate(rep_code);
                        current = new java.io.File( "." ).getCanonicalPath();
                        //HSSFWorkbook report_excel_template;
                        XSSFWorkbook report_excel_template_conso; // for xlsx/xlsm
                        // convert it into a POI object
                        //Read Excel document first

                        FileInputStream input_document_conso = new FileInputStream(new File(current+excelTemplate));
                        // convert it into a POI object
                        report_excel_template_conso = new XSSFWorkbook(input_document_conso);

                        String FS_controlprof = CreateReport.getReportTemplate("FS");

                        //HSSFWorkbook report_excel_template;
                        XSSFWorkbook bsp_fs_excel_template; // for xlsx/xlsm

                        //  Workbook bsp_cp_excel_template = WorkbookFactory.create(new File(current+BSP_controlprof));
                        // convert it into a POI object
                        //Read Excel document first

                        FileInputStream bsp_fs_input_document = new FileInputStream(new File(current+FS_controlprof));
                        // convert it into a POI object
                        bsp_fs_excel_template = new XSSFWorkbook(bsp_fs_input_document);

                        System.out.println("Report Excell template" +  report_excel_template_conso);


                        //START
                        XSSFSheet report_worksheet;
                        // Sheet bsp_cp_report_worksheet;
                        XSSFSheet bsp_cp_report_worksheet;
                        report_worksheet = report_excel_template_conso.getSheet("FS-TABLE");
                        DataFormatter formatter = new DataFormatter();
                        DecimalFormat df = new DecimalFormat("#,##0.00;(-#,##0.00)");
                        FormulaEvaluator evaluator = report_excel_template_conso.getCreationHelper().createFormulaEvaluator();
                        
                        for(int x = 1;x<=report_worksheet.getLastRowNum();x++){

                            Row row = report_worksheet.getRow(x);
                            if (row == null) {
                                x = report_worksheet.getLastRowNum();
                                //  continue;
                                //row = report_worksheet.createRow(xrow);
                            }
                            //NOTE:
                            if(row.getCell(2) == null){
                                System.out.println("ROW " + row.getCell(2));
                                break;
                            }
                            //getCell(3) = row ; getCell(4) = column ; getCell(5) = value;
                            System.out.println("FRP CONTROL " + report_worksheet.getLastRowNum());
                            System.out.println("Sheet Name : " + row.getCell(2).toString());
                            System.out.println("Row : " + formatter.formatCellValue(row.getCell(3), evaluator));
                            System.out.println("Column : " + formatter.formatCellValue(row.getCell(4), evaluator));
                            System.out.println("Value : " + formatter.formatCellValue(row.getCell(5)));


                            Cell valueCell = row.getCell(5);
                            if (valueCell == null){
                                valueCell = row.createCell(5);
                            }

                            bsp_cp_report_worksheet = bsp_fs_excel_template.getSheet(row.getCell(2).toString());
                            String bsp_cp_row =  formatter.formatCellValue(row.getCell(3), evaluator);
                            String bsp_cp_col =  formatter.formatCellValue(row.getCell(4), evaluator);
                            String bsp_val_col =  formatter.formatCellValue(valueCell);

                            //insert value on bsp control_proflist
                            if(bsp_cp_row != ""){
                                Row bspcp_row = bsp_cp_report_worksheet.getRow(Integer.parseInt(bsp_cp_row));
                                if (bspcp_row == null) {
                                    continue;
                                    //row = report_worksheet.createRow(xrow);
                                }
                                Cell bsp_cell = bspcp_row.getCell(Integer.parseInt(bsp_cp_col));

                                if (bsp_cell == null){
                                    bsp_cell = bspcp_row.createCell(Integer.parseInt(bsp_cp_col));
                                }
                                if(bsp_val_col.isEmpty()){
                                    bsp_cell.setCellValue(0.00D);
                                }else{
                                    //bsp_cell.setCellValue(Double.parseDouble(formatter.formatCellValue(valueCell,evaluator)));
                                    bsp_cell.setCellValue(Double.parseDouble(formatter.formatCellValue(valueCell,evaluator)));
                                }
                            }else{ x = report_worksheet.getLastRowNum();}
                        } // for loop end

                        //XSSFFormulaEvaluator.evaluateAllFormulaCells(report_excel_template);
                        FormulaEvaluator xxevaluator = report_excel_template_conso.getCreationHelper().createFormulaEvaluator();
                        xxevaluator.setIgnoreMissingWorkbooks(true);
                        System.out.println("FORMULA" + xevaluator);
                        for (Sheet sheet : report_excel_template_conso){
                            System.out.println("Sheet" + sheet);
                            for(Row r : sheet){
                                for(Cell c: r ){

                                    if(c.getCellType() == Cell.CELL_TYPE_FORMULA){
                                        xxevaluator.evaluateFormulaCell(c);
                                    }
                                }
                            }
                        }
                        bsp_fs_input_document.close();
                        FileOutputStream bsp_cp_output_file = null;
                        if (chkConsolidateFlag.isSelected() == true){
                            System.out.println("CREATING OUTFILE FOR CONSOLE FS PLUS DATE.....");
                            bsp_cp_output_file =new FileOutputStream(new File(current+"\\output\\FS"+dateString+".xlsx"));

                        }else{
                            System.out.println("CREATING OUTFILE FOR CONSOLE FS PLUS BRANCH NAME PLUS DATE.....");
                            System.out.println("selectedBranch: "+selectedBranch);
                            bsp_cp_output_file =new FileOutputStream(new File(current+"\\output\\FS-"+selectedBranch+"-"+dateString+".xlsx"));

                        }
                        
                        //write changes
                        bsp_fs_excel_template.write(bsp_cp_output_file);
                        //close the stream
                        bsp_cp_output_file.close();
                        count++;
                        J.setValue(count);
                    }  
                    count++;
                    J.setValue(count);
                    btnGenerate.setEnabled(true);
                    setCursor(null);
                    JOptionPane.showMessageDialog(rootPane, "Report Complete!");
                    jCalReportCutOff.setDate(new Date());
                    jCalReportCutOff.setNullAllowed(true);
                    J.setValue(0);
//            //END FS
                 } catch (SQLException ex) {
                     Logger.getLogger(FSReportJInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
                 } catch (IOException ex) {
                     Logger.getLogger(FSReportJInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
                 } catch (InterruptedException e)
                 {
                     
                 }
             }
         });
          thread.start();
    }//GEN-LAST:event_btnGenerateActionPerformed

    private static boolean isNullOrBlank(String s){
        return (s==null || s.trim().equals(""));
    }
    
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        //reportparameterframe.setDefaultCloseOperation(JInternalFrame.DISPOSE_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void jCalReportCutOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCalReportCutOffActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCalReportCutOffActionPerformed

    private void chkConsolidateFlagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkConsolidateFlagActionPerformed
        if (chkConsolidateFlag.isSelected())
        cmbBranch.setEnabled(false);
        else
        cmbBranch.setEnabled(true);
    }//GEN-LAST:event_chkConsolidateFlagActionPerformed

    private void cmbBranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbBranchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbBranchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JProgressBar J;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JCheckBox chkConsolidateFlag;
    private javax.swing.JComboBox cmbBranch;
    private org.freixas.jcalendar.JCalendarCombo jCalReportCutOff;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
