/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package expresso_report_package;

/**
 *
 * @author JM Marquez
 */

import com.sun.media.sound.InvalidFormatException;
import java.awt.Cursor;
import java.io.*;
import java.util.*;
import java.util.Calendar;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.POIXMLException;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellValue;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.FormulaEvaluator;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFFormulaEvaluator;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class LiquidityRatioReportJInternalFrame extends javax.swing.JInternalFrame {
    private static final SimpleDateFormat SDF = new SimpleDateFormat( "yyyy-MM-dd" );
    /**
     * Creates new form LiquidityRatioReportJInternalFrame
     */
    public LiquidityRatioReportJInternalFrame(String repcode) throws SQLException, IOException {
        initComponents();
        //this is the old code
        Connection conn = ConnectionManager.getConnection();
        Statement st = conn.createStatement();      
        String sql;

        // for branch selection purposes
        sql = "select name from branch order by id;";
        ResultSet rs = st.executeQuery(sql);
        rs = st.executeQuery(sql);
        while (rs.next())
        {

        }

        rs.close();
    }
    LiquidityRatioReportJInternalFrame() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCalReportCutOff = new org.freixas.jcalendar.JCalendarCombo();
        jLabel1 = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        btnGenerate = new javax.swing.JButton();
        J = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setClosable(true);
        setTitle("ERP-LIQUIDITY RATIO");
        getContentPane().setLayout(null);

        jCalReportCutOff.setName("fsDateString"); // NOI18N
        jCalReportCutOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCalReportCutOffActionPerformed(evt);
            }
        });
        getContentPane().add(jCalReportCutOff);
        jCalReportCutOff.setBounds(170, 50, 240, 50);

        jLabel1.setFont(new java.awt.Font("DialogInput", 1, 12)); // NOI18N
        jLabel1.setText("Report Cut-Off Date:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 50, 140, 50);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        getContentPane().add(btnCancel);
        btnCancel.setBounds(170, 150, 90, 40);

        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });
        getContentPane().add(btnGenerate);
        btnGenerate.setBounds(260, 150, 150, 40);

        J.setMaximum(23);
        J.setStringPainted(true);
        getContentPane().add(J);
        J.setBounds(170, 110, 240, 20);

        jLabel2.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        jLabel2.setText("LIQUIDITY RATIO REPORT");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(90, 10, 380, 40);

        jLabel3.setFont(new java.awt.Font("DialogInput", 1, 12)); // NOI18N
        jLabel3.setText("Progress");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 100, 70, 30);

        setBounds(0, 0, 431, 274);
    }// </editor-fold>//GEN-END:initComponents

    private void jCalReportCutOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCalReportCutOffActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCalReportCutOffActionPerformed
    
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        //reportparameterframe.setDefaultCloseOperation(JInternalFrame.DISPOSE_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed
    int selectedIndex,count=0;
    String selectedBranch;
    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed

        System.out.println("======================= GENERATE FINANCIAL STATEMENT ==========================");

        System.out.println("START");
        Thread thread;
        thread = new Thread(new Runnable(){
            @Override
            public void run(){
                String dateString = SDF.format( jCalReportCutOff.getDate() );
                
                System.out.println("year: "+dateString);
                
                //get year
                String userSelectedDate = dateString;
                
                String[] parts = userSelectedDate.split("-");
                Integer theSplittedYear = Integer.parseInt(parts[0]); // 
                theSplittedYear = theSplittedYear - 1;
                String prevYearParam = theSplittedYear+"-12-31";
                System.out.println("prevYearParam: "+prevYearParam);
                
                String rep_code = "LIQUIDITY-RATIO";
                String branchId="";
                btnGenerate.setEnabled(false);
                String xstarter = "START";
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                String xmenuAction = "LIQUIDITY-RATIO-CONSO";
                try {

                    //if (chkConsolidateFlag.isSelected() == true){
                        if(xstarter.equalsIgnoreCase("START")){
                            // ============= MAY IF DATI ======================
                            //start

                            String sqlstr = "";
                            Connection conn = ConnectionManager.getConnection();
                            Statement st = conn.createStatement();
                            String excelTemplate = CreateReport.getReportTemplate("LIQUIDITY-RATIO");
                            Integer xrow = 1;
                            Integer xcol = 1;
                            String current = new java.io.File( "." ).getCanonicalPath();
                            XSSFWorkbook report_excel_template; // for xlsx/xlsm
                            // convert it into a POI object
                            //Read Excel document first

                            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
                            // convert it into a POI object
                            report_excel_template = new XSSFWorkbook(input_document);
                            //

                            ResultSet rs = null;
                            if (xmenuAction.equalsIgnoreCase("LIQUIDITY-RATIO-CONSO")){
                                System.out.println("==== > LIQUIDITY RATIO CONSOLIDATED GENERATION CUT OFF");
                                sqlstr = "with X as ( ";
                                sqlstr +="select ";
                                sqlstr +="A.sort_code as sort_code, round(sum(B.debit_balance - B.credit_balance),2) as bal_amt ";
                                sqlstr +="from gl_sort_code A ";
                                sqlstr +="left outer join gl_daily_file B on A.sort_code = substring(B.code from 1 for char_length(A.sort_code)) ";
                                sqlstr +="and B.ref_date = '"+dateString+"' and B.currency_id = 1 ";
                                sqlstr +="group by A.sort_code,A.sort_name ";
                                sqlstr +="order by A.sort_code,A.sort_name ), ";
                                sqlstr +="Y as ( ";
                                sqlstr +="select ";
                                sqlstr +="A.sort_code as sort_code, case when round(sum(B.debit_amt - B.credit_amt),2) is null then 0 else round(sum(B.debit_amt - B.credit_amt),2) end as bal_amt ";
                                sqlstr +="from gl_sort_code A ";
                                sqlstr +="left outer join gl_txn_file B on A.sort_code = substring(B.gl_account_code from 1 for char_length(A.sort_code)) ";
                                sqlstr +="inner join gl_account C on B.gl_account_id = C.id ";
                                sqlstr +="and B.txn_value_date <= '"+dateString+"' and b.txn_date > '"+dateString+"' and C.currency_id = 1 ";
                                sqlstr +="group by A.sort_code,A.sort_name ";
                                sqlstr +="order by A.sort_code,A.sort_name ";
                                sqlstr +=") ";
                                sqlstr +="select ";
                                sqlstr +="'A-' || A.sort_code as gl, ";
                                sqlstr +="A.sort_name, ";
                                sqlstr +="case when X.bal_amt + case when Y.bal_amt is null then 0 else Y.bal_amt end >= 0 ";
                                sqlstr +="then X.bal_amt + case when Y.bal_amt is null then 0 else Y.bal_amt end else (X.bal_amt + case when Y.bal_amt is null then 0 else Y.bal_amt end) * -1 end as adj_bal, ";
                                sqlstr +="case when X.bal_amt > 0 then X.bal_amt end as debit, ";
                                sqlstr +="case when X.bal_amt < 0 then X.bal_amt * -1 else 0 end as credit, ";
                                sqlstr +="case when Y.bal_amt > 0 then Y.bal_amt end as debit_txn, ";
                                sqlstr +="case when Y.bal_amt < 0 then Y.bal_amt * -1 else 0 end as credit_txn ";
                                sqlstr +="from gl_sort_code A ";
                                sqlstr +="inner join X on A.sort_code = X.sort_code ";
                                sqlstr +="left outer join Y on A.sort_code = Y.sort_code ";
                                sqlstr +="order by gl ";
                                rs = st.executeQuery(sqlstr);

                            }
                            if(!rs.isBeforeFirst()){
                                System.out.println("NO VALUE");
                                XSSFSheet report_worksheet;
                                report_worksheet = report_excel_template.getSheet("ICBS-TB-SC");
                                System.out.println("row value" + report_worksheet.getLastRowNum());

                                for (int x =1; x <=  report_worksheet.getLastRowNum(); x++){
                                    Row row = report_worksheet.getRow(x);
                                    for(int y=1;y<4;y++){
                                        System.out.println("row : " + x + "col :" + y);
                                        System.out.println("CELL CLEANING");
                                        Cell cell = row.getCell(y);
                                        if (cell == null){
                                            cell = row.createCell(y);
                                        }
                                        cell.setCellValue(" ");

                                    }

                                }
                            }else{
                                System.out.println("WITH DATA VALUE");
                                while (rs.next()){
                                    System.out.println( "GL" + rs.getString(1));
                                    System.out.println( "Sort Name" + rs.getString(2));
                                    System.out.println( "Adj Balance" + rs.getString(3));
                                    System.out.println( "Debit" + rs.getString(4));
                                    System.out.println( "Credit" + rs.getString(5));
                                    System.out.println( "Debit txn" + rs.getString(6));
                                    System.out.println( "Credit txn" + rs.getString(7));

                                    XSSFSheet report_worksheet;
                                    report_worksheet = report_excel_template.getSheet("ICBS-TB-SC");

                                    //HSSFSheet report_worksheet = report_excel_template.getSheetAt(0);
                                    // declare a Cell object
                                    System.out.println("Report Counter Pass:" + report_worksheet);
                                    System.out.println("xrow " + xrow);
                                    System.out.println(xrow);
                                    //START

                                    Row row = report_worksheet.getRow(xrow);
                                    if (row == null) {
                                        // No entries in this row
                                        // Handle empty
                                        // continue;
                                        row = report_worksheet.createRow(xrow);
                                    }
                                    for(int y=1;y<=7;y++){
                                        System.out.println("row : " + xrow + "col :" + y);
                                        System.out.println("CELL CLEANING SC" + row.getCell(y));

                                        Cell cell = row.getCell(y);
                                        if (cell == null){
                                            cell = row.createCell(y);
                                        }
                                        try{
                                            if(y < 3){
                                                cell.setCellValue(String.valueOf(rs.getString(y)));
                                            }else{
                                                //null

                                                System.out.println("i > 3 :" + rs.getString(y));
                                                if(rs.getString(y) == null || Double.parseDouble(rs.getString(y)) == 0){

                                                    cell.setCellValue(0.00D);
                                                }else{
                                                    System.out.println("rs.is not null");

                                                    cell.setCellValue(Double.parseDouble(rs.getString(y)));
                                                }

                                            }
                                        }catch(POIXMLException ex){
                                            //  JOptionPane.showMessageDialog(this, ex.getMessage());

                                        }catch(NullPointerException ex){
                                            //  JOptionPane.showMessageDialog(this, ex.getMessage());

                                        }

                                    }
                                    xrow += 1;
                                    //END
                                }
                            }

                            count++;
                            J.setValue(count);
                            Thread.sleep(500);
                            System.out.println("FIRST REPORT END");

                            st.close();
                            xrow = 1;

                            String sqlstr2 = "";
                            Statement st2 = conn.createStatement();

                            // ICBS-TB-SC-PREV
                            ResultSet rs2 = null;
                            if (xmenuAction.equalsIgnoreCase("LIQUIDITY-RATIO-CONSO")){
                                System.out.println("==== > LIQUIDITY RATIO PREV END OF YEAR CONSOLIDATED GENERATION");
                                sqlstr = "with X as ( ";
                                sqlstr +="select ";
                                sqlstr +="A.sort_code as sort_code, round(sum(B.debit_balance - B.credit_balance),2) as bal_amt ";
                                sqlstr +="from gl_sort_code A ";
                                sqlstr +="left outer join gl_daily_file B on A.sort_code = substring(B.code from 1 for char_length(A.sort_code)) ";
                                sqlstr +="and B.ref_date = '"+prevYearParam+"' and B.currency_id = 1 ";
                                sqlstr +="group by A.sort_code,A.sort_name ";
                                sqlstr +="order by A.sort_code,A.sort_name ), ";
                                sqlstr +="Y as ( ";
                                sqlstr +="select ";
                                sqlstr +="A.sort_code as sort_code, case when round(sum(B.debit_amt - B.credit_amt),2) is null then 0 else round(sum(B.debit_amt - B.credit_amt),2) end as bal_amt ";
                                sqlstr +="from gl_sort_code A ";
                                sqlstr +="left outer join gl_txn_file B on A.sort_code = substring(B.gl_account_code from 1 for char_length(A.sort_code)) ";
                                sqlstr +="inner join gl_account C on B.gl_account_id = C.id ";
                                sqlstr +="and B.txn_value_date <= '"+prevYearParam+"' and b.txn_date > '"+prevYearParam+"' and C.currency_id = 1 ";
                                sqlstr +="group by A.sort_code,A.sort_name ";
                                sqlstr +="order by A.sort_code,A.sort_name ";
                                sqlstr +=") ";
                                sqlstr +="select ";
                                sqlstr +="'A-' || A.sort_code as gl, ";
                                sqlstr +="A.sort_name, ";
                                sqlstr +="case when X.bal_amt + case when Y.bal_amt is null then 0 else Y.bal_amt end >= 0 ";
                                sqlstr +="then X.bal_amt + case when Y.bal_amt is null then 0 else Y.bal_amt end else (X.bal_amt + case when Y.bal_amt is null then 0 else Y.bal_amt end) * -1 end as adj_bal, ";
                                sqlstr +="case when X.bal_amt > 0 then X.bal_amt end as debit, ";
                                sqlstr +="case when X.bal_amt < 0 then X.bal_amt * -1 else 0 end as credit, ";
                                sqlstr +="case when Y.bal_amt > 0 then Y.bal_amt end as debit_txn, ";
                                sqlstr +="case when Y.bal_amt < 0 then Y.bal_amt * -1 else 0 end as credit_txn ";
                                sqlstr +="from gl_sort_code A ";
                                sqlstr +="inner join X on A.sort_code = X.sort_code ";
                                sqlstr +="left outer join Y on A.sort_code = Y.sort_code ";
                                sqlstr +="order by gl ";
                                rs2 = st2.executeQuery(sqlstr);

                            }
                            if(!rs2.isBeforeFirst()){
                                System.out.println("NO VALUE");
                                XSSFSheet report_worksheet;
                                report_worksheet = report_excel_template.getSheet("ICBS-TB-SC-PrevYear");
                                System.out.println("row value" + report_worksheet.getLastRowNum());

                                for (int x =1; x <=  report_worksheet.getLastRowNum(); x++){
                                    Row row = report_worksheet.getRow(x);
                                    for(int y=1;y<4;y++){
                                        System.out.println("row : " + x + "col :" + y);
                                        System.out.println("CELL CLEANING");
                                        Cell cell = row.getCell(y);
                                        if (cell == null){
                                            cell = row.createCell(y);
                                        }
                                        cell.setCellValue(" ");

                                    }

                                }
                            }else{
                                System.out.println("WITH DATA VALUE");
                                while (rs2.next()){
                                    System.out.println( "GL" + rs2.getString(1));
                                    System.out.println( "Sort Name" + rs2.getString(2));
                                    System.out.println( "Adj Balance" + rs2.getString(3));
                                    System.out.println( "Debit" + rs2.getString(4));
                                    System.out.println( "Credit" + rs2.getString(5));
                                    System.out.println( "Debit txn" + rs2.getString(6));
                                    System.out.println( "Credit txn" + rs2.getString(7));

                                    XSSFSheet report_worksheet;
                                    report_worksheet = report_excel_template.getSheet("ICBS-TB-SC-PrevYear");

                                    //HSSFSheet report_worksheet = report_excel_template.getSheetAt(0);
                                    // declare a Cell object
                                    System.out.println("Report Counter Pass:" + report_worksheet);
                                    System.out.println("xrow " + xrow);
                                    System.out.println(xrow);
                                    //START

                                    Row row = report_worksheet.getRow(xrow);
                                    if (row == null) {
                                        // No entries in this row
                                        // Handle empty
                                        // continue;
                                        row = report_worksheet.createRow(xrow);
                                    }
                                    for(int y=1;y<=7;y++){
                                        System.out.println("row : " + xrow + "col :" + y);
                                        System.out.println("CELL CLEANING SC" + row.getCell(y));

                                        Cell cell = row.getCell(y);
                                        if (cell == null){
                                            cell = row.createCell(y);
                                        }
                                        try{
                                            if(y < 3){
                                                cell.setCellValue(String.valueOf(rs2.getString(y)));
                                            }else{
                                                //null

                                                System.out.println("i > 3 :" + rs2.getString(y));
                                                if(rs2.getString(y) == null || Double.parseDouble(rs2.getString(y)) == 0){

                                                    cell.setCellValue(0.00D);
                                                }else{
                                                    System.out.println("rs2.is not null");

                                                    cell.setCellValue(Double.parseDouble(rs2.getString(y)));
                                                }

                                            }
                                        }catch(POIXMLException ex){
                                            //  JOptionPane.showMessageDialog(this, ex.getMessage());

                                        }catch(NullPointerException ex){
                                            //  JOptionPane.showMessageDialog(this, ex.getMessage());

                                        }

                                    }
                                    xrow += 1;
                                    //END
                                }
                            }

                            count++;
                            J.setValue(count);
                            Thread.sleep(500);
                            System.out.println("SECOND REPORT END");

                            st2.close();

                            //Overwrite excell
                            XSSFFormulaEvaluator.evaluateAllFormulaCells(report_excel_template);
                            FormulaEvaluator xevaluator = report_excel_template.getCreationHelper().createFormulaEvaluator();
                            xevaluator.setIgnoreMissingWorkbooks(true);
                            System.out.println("FORMULA" + xevaluator);
                            for (Sheet sheet : report_excel_template){
                                System.out.println("Sheet" + sheet);
                                for(Row r : sheet){
                                    for(Cell c: r ){

                                        if(c.getCellType() == Cell.CELL_TYPE_FORMULA){
                                            xevaluator.evaluateFormulaCell(c);

                                        }
                                    }
                                }
                            }

                            System.out.println ("current+excelTemplate " + current+excelTemplate);
                            FileOutputStream output_file =new FileOutputStream(new File(current+excelTemplate));
                            count++;
                            J.setValue(count);

                            //write changes
                            report_excel_template.write(output_file);
                            //close the stream
                            output_file.close();
                            //START
                            //end
                            J.setMaximum(2);
                            excelTemplate = CreateReport.getReportTemplate(rep_code);
                            current = new java.io.File( "." ).getCanonicalPath();
                            //HSSFWorkbook report_excel_template;
                            XSSFWorkbook report_excel_template_conso; // for xlsx/xlsm
                            // convert it into a POI object
                            //Read Excel document first

                            FileInputStream input_document_conso = new FileInputStream(new File(current+excelTemplate));
                            // convert it into a POI object
                            report_excel_template_conso = new XSSFWorkbook(input_document_conso);

                            String FS_controlprof = CreateReport.getReportTemplate("FS");

                            //HSSFWorkbook report_excel_template;
                            XSSFWorkbook bsp_fs_excel_template; // for xlsx/xlsm

                            //  Workbook bsp_cp_excel_template = WorkbookFactory.create(new File(current+BSP_controlprof));
                            // convert it into a POI object
                            //Read Excel document first

                            FileInputStream bsp_fs_input_document = new FileInputStream(new File(current+FS_controlprof));
                            // convert it into a POI object
                            bsp_fs_excel_template = new XSSFWorkbook(bsp_fs_input_document);

                            System.out.println("Report Excell template" +  report_excel_template_conso);

                            count++;
                            J.setValue(count);
                        }
                        count++;
                        J.setValue(count);
                        btnGenerate.setEnabled(true);
                        setCursor(null);
                        JOptionPane.showMessageDialog(rootPane, "Report Complete!");
                        jCalReportCutOff.setDate(new Date());
                        jCalReportCutOff.setNullAllowed(true);
                        J.setValue(0);
                        //            //END FS
                    } catch (SQLException ex) {
                        Logger.getLogger(FSReportJInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(FSReportJInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InterruptedException e)
                    {

                    }
                }

            });
            thread.start();
    }//GEN-LAST:event_btnGenerateActionPerformed
    private static boolean isNullOrBlank(String s){
        return (s==null || s.trim().equals(""));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JProgressBar J;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnGenerate;
    private org.freixas.jcalendar.JCalendarCombo jCalReportCutOff;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
