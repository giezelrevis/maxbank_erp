/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package expresso_report_package;


import com.sun.media.sound.InvalidFormatException;
import java.awt.Cursor;
import java.io.*;
import java.util.*;
import java.util.Calendar;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.POIXMLException;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellValue;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.FormulaEvaluator;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFFormulaEvaluator;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.util.concurrent.*;





/**
 *
 * @author User01
 */
public class PrepReportParameterJInternalFrame1 extends javax.swing.JInternalFrame {
    private static String rep_code;
    private static String sheetname;
    private static Integer row;
    private static Integer col;
    private static String refdate;
    private static final SimpleDateFormat SDF = new SimpleDateFormat( "yyyy-MM-dd" );
    int xrow=1;

    /**
     * Creates new form ReportParametersJInternalFrame
     * @throws java.sql.SQLException
     */
    
    public PrepReportParameterJInternalFrame1(String repcode) throws SQLException, IOException {
        initComponents();
    }
    
    //ReportPreparationForm
    

    PrepReportParameterJInternalFrame1() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        btnGenerate = new javax.swing.JButton();
        jCalReportCutOff = new org.freixas.jcalendar.JCalendarCombo();
        J = new javax.swing.JProgressBar();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setClosable(true);
        setTitle("Report Parameters");
        setName("reportparameterframe"); // NOI18N

        jLabel1.setText("Report Cut-Off Date:");

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        jCalReportCutOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCalReportCutOffActionPerformed(evt);
            }
        });

        J.setMaximum(23);
        J.setStringPainted(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jCalReportCutOff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(84, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGenerate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(J, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCancel, btnGenerate});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jCalReportCutOff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGenerate)
                    .addComponent(btnCancel)
                    .addComponent(J, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jCalReportCutOff.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents
int count =0;
Boolean done=false;
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        //reportparameterframe.setDefaultCloseOperation(JInternalFrame.DISPOSE_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        rep_code = "FRPWORKFILE01";
        sheetname = "ICBS_TBAL_SC";
        
        
        Thread thread = new Thread(new Runnable(){
            @Override
            public void run()  
            {           
                    btnGenerate.setEnabled(false);
                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    try
                    {
                        Thread.sleep(400);
                    }catch(Exception e){}
                    fnIcbsTbSc(); //first report
                            count++;
                            J.setValue(count);    
                    fnIcbsTBGl(); //second report
                            count++;
                            J.setValue(count);

                    fnIcbsBPLISTING();        //3rd report
                            count++;
                            J.setValue(count);

                    fnIcbsBpSummary ();    //4th report
                            count++;
                            J.setValue(count);

                    fnIcbsCNTINGNTListing(); // 5th report
                            count++;
                            J.setValue(count);

                    fnIcbsCNTINGSummary(); //6th report
                            count++;
                            J.setValue(count);

                    fnIcbsOtherAsset25(); //7th report
                            count++;
                            J.setValue(count);

                    fnIcbsOtherLiab(); //8th report
                            count++;
                            J.setValue(count);

                    fnOtherExp25(); // 9th report
                            count++;
                            J.setValue(count);

                    fnIcbsSieAcctResident(); // 10th report
                            count++;
                            J.setValue(count);

                    fnControlProofList(); //11th report
                            count++;
                            J.setValue(count);

                    fnRBSOLOSOCSIE(); //12th report
                            count++;
                            J.setValue(count);   

                    fnRBSoloOtherLiabTable(); //13th report
                            count++;
                            J.setValue(count);

                    fnRBSOLOFINLIAB(); //14th report
                            count++;
                            J.setValue(count);

                    fnRbSoloNonFin(); //15th report
                            count++;
                            J.setValue(count);
                    fnRbSoloOtherAst(); //16th

                            count++;
                            J.setValue(count);
                    fnRBSoloCoce(); //17th

                            count++;
                            J.setValue(count);
                    fnRBSoloBorrow(); //18th

                            count++;
                            J.setValue(count);
                    fnRBSoloCNTingNT(); //19th

                            count++;
                            J.setValue(count);
                    fnRBSoloFinAsset(); //20th

                            count++;
                            J.setValue(count);
                    fnRbSoloSieAcct(); //21st

                            count++;
                            J.setValue(count);  
                    fnPhase3(); //22nd

                            count++;
                            J.setValue(count);
                   fnRBSoloLoans(); //23rd

                            count++;
                            J.setValue(count);      
                    btnGenerate.setEnabled(true);
                    JOptionPane.showMessageDialog(rootPane, "Report Complete!");
                    jCalReportCutOff.setDate(new Date());
                    jCalReportCutOff.setNullAllowed(true);
                    setCursor(null);                    
                    J.setValue(0);
                }
         
        }); 
        thread.start();
    }//GEN-LAST:event_btnGenerateActionPerformed

    private void jCalReportCutOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCalReportCutOffActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCalReportCutOffActionPerformed
    
    private static boolean isNullOrBlank(String s){
        return (s==null || s.trim().equals(""));
    }
    
    private static String depsizeQuery(String dateString){
            
    String sqlstr ="select '01. 5,000.00 - below' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and A.closing_bal > 0 and A.closing_bal <= 5000.00 and A.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal > 0 and a.closing_bal <= 5000.00 and a.account_status<>7 and a.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and A.closing_bal > 0 and A.closing_bal <= 5000.00 and A.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal > 0 and a.closing_bal <= 5000.00 and a.account_status<>7 and a.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal > 0 and a.closing_bal <= 5000.00 and a.account_status<>7 and A.ref_date='"+dateString+"')  as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal > 0 and a.closing_bal <= 5000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '02. 5,000.01 - 10,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 5000.01 and a.closing_bal <= 10000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 5000.01 and a.closing_bal <= 10000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 5000.01 and a.closing_bal <= 10000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 5000.01 and a.closing_bal <= 10000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 5000.01 and a.closing_bal <= 10000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 5000.01 and a.closing_bal <= 10000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '03. 10,000.01 - 15,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 10000.01 and a.closing_bal <= 15000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 10000.01 and a.closing_bal <= 15000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 10000.01 and a.closing_bal <= 15000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 10000.01 and a.closing_bal <= 15000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 10000.01 and a.closing_bal <= 15000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 10000.01 and a.closing_bal <= 15000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '04. 15,000.01 - 20,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 15000.01 and a.closing_bal <= 20000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 15000.01 and a.closing_bal <= 20000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 15000.01 and a.closing_bal <= 20000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 15000.01 and a.closing_bal <= 20000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 15000.01 and a.closing_bal <= 20000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 15000.01 and a.closing_bal <= 20000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '05. 20,000.01 - 30,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 20000.01 and a.closing_bal <= 30000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 20000.01 and a.closing_bal <= 30000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 20000.01 and a.closing_bal <= 30000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 20000.01 and a.closing_bal <= 30000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 20000.01 and a.closing_bal <= 30000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 20000.01 and a.closing_bal <= 30000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '06. 30,000.01 - 40,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 30000.01 and a.closing_bal <= 40000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 30000.01 and a.closing_bal <= 40000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 30000.01 and a.closing_bal <= 40000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 30000.01 and a.closing_bal <= 40000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 30000.01 and a.closing_bal <= 40000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 30000.01 and a.closing_bal <= 40000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '07. 40,000.01 - 50,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 40000.01 and a.closing_bal <= 50000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 40000.01 and a.closing_bal <= 50000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 40000.01 and a.closing_bal <= 50000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 40000.01 and a.closing_bal <= 50000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 40000.01 and a.closing_bal <= 50000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 40000.01 and a.closing_bal <= 50000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '08. 50,000.01 - 60,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 50000.01 and a.closing_bal <= 60000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 50000.01 and a.closing_bal <= 60000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 50000.01 and a.closing_bal <= 60000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 50000.01 and a.closing_bal <= 60000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 50000.01 and a.closing_bal <= 60000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 50000.01 and a.closing_bal <= 60000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '09. 60,000.01 - 80,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 60000.01 and a.closing_bal <= 80000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 60000.01 and a.closing_bal <= 80000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 60000.01 and a.closing_bal <= 80000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 60000.01 and a.closing_bal <= 80000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 60000.01 and a.closing_bal <= 80000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 60000.01 and a.closing_bal <= 80000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '10. 80,000.01 - 100,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 80000.01 and a.closing_bal <= 100000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 80000.01 and a.closing_bal <= 100000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 80000.01 and a.closing_bal <= 100000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 80000.01 and a.closing_bal <= 100000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 80000.01 and a.closing_bal <= 100000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 80000.01 and a.closing_bal <= 100000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '11. 100,000.01 - 150,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 100000.01 and a.closing_bal <= 150000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 100000.01 and a.closing_bal <= 150000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 100000.01 and a.closing_bal <= 150000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 100000.01 and a.closing_bal <= 150000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 100000.01 and a.closing_bal <= 150000.00 and a.account_status<>7 and A.ref_date='"+dateString+"' ) as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 100000.01 and a.closing_bal <= 150000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '12. 150,000.01 - 200,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 150000.01 and a.closing_bal <= 200000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 150000.01 and a.closing_bal <= 200000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 150000.01 and a.closing_bal <= 200000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 150000.01 and a.closing_bal <= 200000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 150000.01 and a.closing_bal <= 200000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 150000.01 and a.closing_bal <= 200000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '13. 200,000.01 - 250,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 200000.01 and a.closing_bal <= 250000.00 and A.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 200000.01 and a.closing_bal <= 250000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 200000.01 and a.closing_bal <= 250000.00 and A.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 200000.01 and a.closing_bal <= 250000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 200000.01 and a.closing_bal <= 250000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 200000.01 and a.closing_bal <= 250000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '14. 250,000.01 - 300,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 250000.01 and a.closing_bal <= 300000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 250000.01 and a.closing_bal <= 300000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 250000.01 and a.closing_bal <= 300000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 250000.01 and a.closing_bal <= 300000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 250000.01 and a.closing_bal <= 300000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 250000.01 and a.closing_bal <= 300000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";   
     sqlstr +="union ";  
     sqlstr +="select '15. 300,000.01 - 400,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 300000.01 and a.closing_bal <= 400000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 300000.01 and a.closing_bal <= 400000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 300000.01 and a.closing_bal <= 400000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 300000.01 and a.closing_bal <= 400000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 300000.01 and a.closing_bal <= 400000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 300000.01 and a.closing_bal <= 400000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";   
     sqlstr +="union ";   
     sqlstr +="select '16. 400,000.01 - 500,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 400000.01 and a.closing_bal <= 500000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 400000.01 and a.closing_bal <= 500000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 400000.01 and a.closing_bal <= 500000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 400000.01 and a.closing_bal <= 500000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 400000.01 and a.closing_bal <= 500000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 400000.01 and a.closing_bal <= 500000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '17. 500,000.01 - 750,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 500000.01 and a.closing_bal <= 750000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 500000.01 and a.closing_bal <= 750000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 500000.01 and a.closing_bal <= 750000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 500000.01 and a.closing_bal <= 750000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 500000.01 and a.closing_bal <= 750000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 500000.01 and a.closing_bal <= 750000.00 and a.account_status<>7 and A.ref_date='"+dateString+"' ) as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '18. 750,000.01 - 1,000,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 750000.01 and a.closing_bal <= 1000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 750000.01 and a.closing_bal <= 1000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 750000.01 and a.closing_bal <= 1000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 750000.01 and a.closing_bal <= 1000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 750000.01 and a.closing_bal <= 1000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 750000.01 and a.closing_bal <= 1000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '19. 1,000,000.01 - 1,500,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 1000000.01 and a.closing_bal <= 1500000.00 and A.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 1000000.01 and a.closing_bal <= 1500000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 1000000.01 and a.closing_bal <= 1500000.00 and A.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 1000000.01 and a.closing_bal <= 1500000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 1000000.01 and a.closing_bal <= 1500000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 1000000.01 and a.closing_bal <= 1500000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '20. 1,500,000.01 - 2,000,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 1500000.01 and a.closing_bal <= 2000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 1500000.01 and a.closing_bal <= 2000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 1500000.01 and a.closing_bal <= 2000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 1500000.01 and a.closing_bal <= 2000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 1500000.01 and a.closing_bal <= 2000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 1500000.01 and a.closing_bal <= 2000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '21. 2,000,000.01 - 3,000,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 2000000.01 and a.closing_bal <= 3000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 2000000.01 and a.closing_bal <= 3000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 2000000.01 and a.closing_bal <= 3000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 2000000.01 and a.closing_bal <= 3000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 2000000.01 and a.closing_bal <= 3000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 2000000.01 and a.closing_bal <= 3000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '22. 3,000,000.01 - 4,000,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 3000000.01 and a.closing_bal <= 4000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 3000000.01 and a.closing_bal <= 4000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 3000000.01 and a.closing_bal <= 4000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 3000000.01 and a.closing_bal <= 4000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 3000000.01 and a.closing_bal <= 4000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 3000000.01 and a.closing_bal <= 4000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '23. 4,000,000.01 - 5,000,000.00' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 4000000.01 and a.closing_bal <= 5000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 4000000.01 and a.closing_bal <= 5000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 4000000.01 and a.closing_bal <= 5000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 4000000.01 and a.closing_bal <= 5000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 4000000.01 and a.closing_bal <= 5000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 4000000.01 and a.closing_bal <= 5000000.00 and a.account_status<>7 and A.ref_date='"+dateString+"' ) as tottdtax ";
     sqlstr +="union ";
     sqlstr +="select '24. 5,000,000.01 - above' as dpsize, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43) and a.closing_bal >= 5000000.01 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntsv, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (1,44,43)  and a.closing_bal >= 5000000.01 and a.account_status<>7 and A.ref_date='"+dateString+"') as totsv, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45) and a.closing_bal >= 5000000.01 and a.account_status<>7 and A.ref_date='"+dateString+"') as cntcu, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (45)  and a.closing_bal >= 5000000.01 and a.account_status<>7 and A.ref_date='"+dateString+"') as totcu, ";
     sqlstr +="(select count(*) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 5000000.01 and a.account_status<>7 and A.ref_date='"+dateString+"') as cnttdTax, ";
     sqlstr +="(select round(sum(A.closing_bal),2) from monthly_balance A ";
     sqlstr +="inner join deposit B on A.account_no = B.acct_no ";
     sqlstr +="where B.gl_link_id in (2) and a.closing_bal >= 5000000.01 and a.account_status<>7 and A.ref_date='"+dateString+"') as tottdtax ";
     sqlstr +="order by dpsize ";
     
     return (sqlstr);
    }
     private void fnIcbsTbSc ()
    {
        
        String sqlstr = "";
        String sqlstr2 = "";
        rep_code = "FRPWORKFILE01";
        sheetname = "ICBS_TBAL_SC";
        Integer xrow = 1;
        Integer xcol = 1;
        try 
        {         
            String dateString = SDF.format( jCalReportCutOff.getDate() );
            Calendar now = Calendar.getInstance();
            Connection conn = ConnectionManager.getConnection();
            Statement st = conn.createStatement();
            int currentYear = now.get(Calendar.YEAR);
            //Excell declaration
            String excelTemplate = CreateReport.getReportTemplate(rep_code);        
            String current = new java.io.File( "." ).getCanonicalPath();
            //HSSFWorkbook report_excel_template;
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            // convert it into a POI object
            //Read Excel document first
           
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            // convert it into a POI object
            report_excel_template = new XSSFWorkbook(input_document);
            
            System.out.println("Report Excell template" +  report_excel_template);
            //report_excel_template = new HSSFWorkbook(input_document); 
            //openExcelTemplate(excelTemplate,rep_code,refdate);
            
                sqlstr = "with X as ( ";
                sqlstr +="select ";
                sqlstr +="A.sort_code as sort_code, round(sum(B.debit_balance - B.credit_balance),2) as bal_amt ";
                sqlstr +="from gl_sort_code A ";
                sqlstr +="left outer join gl_daily_file B on A.sort_code = substring(B.code from 1 for char_length(A.sort_code)) ";
                sqlstr +="and B.ref_date = '"+dateString+"' and B.currency_id = 1 ";
                sqlstr +="group by A.sort_code,A.sort_name ";
                sqlstr +="order by A.sort_code,A.sort_name ), ";
                sqlstr +="Y as ( ";
                sqlstr +="select ";
                sqlstr +="A.sort_code as sort_code, case when round(sum(B.debit_amt - B.credit_amt),2) is null then 0 else round(sum(B.debit_amt - B.credit_amt),2) end as bal_amt ";
                sqlstr +="from gl_sort_code A ";
                sqlstr +="left outer join gl_txn_file B on A.sort_code = substring(B.gl_account_code from 1 for char_length(A.sort_code)) ";
                sqlstr +="inner join gl_account C on B.gl_account_id = C.id ";
                sqlstr +="and B.txn_value_date <= '"+dateString+"' and b.txn_date > '"+dateString+"' and C.currency_id = 1 ";
                sqlstr +="group by A.sort_code,A.sort_name ";
                sqlstr +="order by A.sort_code,A.sort_name ";
                sqlstr +=") ";
                sqlstr +="select ";
                sqlstr +="'A-' || A.sort_code as gl, ";
                sqlstr +="A.sort_name, ";
                sqlstr +="case when X.bal_amt + case when Y.bal_amt is null then 0 else Y.bal_amt end >= 0 ";
                sqlstr +="then X.bal_amt + case when Y.bal_amt is null then 0 else Y.bal_amt end else (X.bal_amt + case when Y.bal_amt is null then 0 else Y.bal_amt end) * -1 end as adj_bal, ";
                sqlstr +="case when X.bal_amt > 0 then X.bal_amt end as debit, ";
                sqlstr +="case when X.bal_amt < 0 then X.bal_amt * -1 else 0 end as credit, ";
                sqlstr +="case when Y.bal_amt > 0 then Y.bal_amt end as debit_txn, ";
                sqlstr +="case when Y.bal_amt < 0 then Y.bal_amt * -1 else 0 end as credit_txn ";
                sqlstr +="from gl_sort_code A ";
                sqlstr +="inner join X on A.sort_code = X.sort_code ";
                sqlstr +="left outer join Y on A.sort_code = Y.sort_code ";
                sqlstr +="order by gl ";

            ResultSet rs = st.executeQuery(sqlstr);
             
            if(!rs.isBeforeFirst())
            {
                System.out.println("NO VALUE");
                XSSFSheet report_worksheet;
                report_worksheet = report_excel_template.getSheet("ICBS-TB-SC");
                System.out.println("row value" + report_worksheet.getLastRowNum());
                for (int x =1; x <=  report_worksheet.getLastRowNum(); x++)
                {
                    Row row = report_worksheet.getRow(x);   
                    for(int y=1;y<4;y++)
                    {
                        System.out.println("row : " + x + "col :" + y);
                        System.out.println("CELL CLEANING");
                        Cell cell = row.getCell(y);
                        if (cell == null){
                            cell = row.createCell(y);
                        }
                        cell.setCellValue(" ");
                    }
                }
            }
            
            else
            {
                System.out.println("WITH DATA VALUE");
                while (rs.next())
                {
                    System.out.println( "GL" + rs.getString(1));
                    System.out.println( "Sort Name" + rs.getString(2));
                    System.out.println( "Adj Balance" + rs.getString(3));
                    System.out.println( "Debit" + rs.getString(4));
                    System.out.println( "Credit" + rs.getString(5));
                    System.out.println( "Debit txn" + rs.getString(6));
                    System.out.println( "Credit txn" + rs.getString(7));
                    XSSFSheet report_worksheet;
                    report_worksheet = report_excel_template.getSheet("ICBS-TB-SC");
                    //HSSFSheet report_worksheet = report_excel_template.getSheetAt(0);
                    // declare a Cell object
                    System.out.println("Report Counter Pass:" + report_worksheet);
                    System.out.println("xrow " + xrow);  
                    System.out.println(xrow);
                    //START
                    Row row = report_worksheet.getRow(xrow); 
                    if (row == null) 
                    {
                        // No entries in this row
                        // Handle empty
                        // continue;
                        row = report_worksheet.createRow(xrow); 
                    }
                    for(int y=1;y<=7;y++)
                    {
                        System.out.println("row : " + xrow + "col :" + y);
                        System.out.println("CELL CLEANING" + row.getCell(y));
                        Cell cell = row.getCell(y);
                        if (cell == null)
                        {
                            cell = row.createCell(y);
                        }
                        try
                        {
                            if(y < 3)
                            {
                                cell.setCellValue(String.valueOf(rs.getString(y)));
                            }
                            else
                            {
                                //null 
                                System.out.println("i > 3 :" + rs.getString(y));
                                if(rs.getString(y) == null || Double.parseDouble(rs.getString(y)) == 0)
                                {
                                    cell.setCellValue(0.00D);
                                }
                                else
                                {
                                    System.out.println("rs.is not null");
                                    cell.setCellValue(Double.parseDouble(rs.getString(y)));
                                }
                            
                            }
                        }
                        catch(POIXMLException ex)
                        {
                            //  JOptionPane.showMessageDialog(this, ex.getMessage());
                        }
                        catch(NullPointerException ex)
                        {
                                //  JOptionPane.showMessageDialog(this, ex.getMessage());
                        }                               
                    }                                    
                    xrow += 1;
                    
                }                 
            }
            st.close();
            
            System.out.println ("current+excelTemplate " + current+excelTemplate);
            FileOutputStream output_file =new FileOutputStream(new File(current+excelTemplate)); 
            report_excel_template.write(output_file);//write changes
            output_file.close();//close the stream
        }
        
        catch (Exception e)
        {
            
        }
        
        
    }
    //2nd report
    private void fnIcbsTBGl ()
    {
        String sqlstr = "";
        String sqlstr2 = "";
        rep_code = "FRPWORKFILE01";
        sheetname = "ICBS_TBAL_SC";
        Integer xrow = 1;
        Integer xcol = 1;
        try
        {
            String dateString = SDF.format( jCalReportCutOff.getDate() );
            Calendar now = Calendar.getInstance();
            Connection conn = ConnectionManager.getConnection();
            //START OF GL
//              String excelTemplate = CreateReport.getReportTemplate(rep_code);        
            String excelTemplate = CreateReport.getReportTemplate(rep_code);        
            String current = new java.io.File( "." ).getCanonicalPath();
            //HSSFWorkbook report_excel_template;
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            // convert it into a POI object
            //Read Excel document first
           
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            // convert it into a POI object
            report_excel_template = new XSSFWorkbook(input_document);
            
            xrow = 1;
            Statement st2 = conn.createStatement();
            sqlstr2 = "with Y as ( ";
            sqlstr2 += "select B.gl_account_code as gl_account_code, ";
            sqlstr2 += "case when round(sum(B.debit_amt - B.credit_amt),2) is null then 0 ";
            sqlstr2 += "else round(sum(B.debit_amt - B.credit_amt),2) end as bal_amt ";
            sqlstr2 += "from gl_txn_file B ";
            sqlstr2 += "inner join gl_account C on B.gl_account_id = C.id ";
            sqlstr2 += "and B.txn_value_date <= '"+dateString+"' and b.txn_date > '"+dateString+"' and C.currency_id = 1 ";
            sqlstr2 += "group by B.gl_account_code ";
            sqlstr2 += "order by B.gl_account_code ";
            sqlstr2 += ") ";
            sqlstr2 += "select A.code, A.name, abs(sum(A.debit_balance - A.credit_balance) +  ";
            sqlstr2 += "case when Y.bal_amt is null then 0 else Y.bal_amt end) ";
            sqlstr2 += "from gl_daily_file A ";
            sqlstr2 += "left outer join Y on A.code = Y.gl_account_code ";
            sqlstr2 += "where A.ref_date = '"+dateString+"' ";
            sqlstr2 += "group by A.code, A.name, Y.bal_amt ";
            sqlstr2 += "order by A.code ";
            System.out.println(sqlstr2);
//             System.out.println(sqlstr);
             ResultSet rs2 = st2.executeQuery(sqlstr2);
             if(!rs2.isBeforeFirst()){
                 System.out.println("NO VALUE");
                  XSSFSheet report_worksheet;
                   report_worksheet = report_excel_template.getSheet("ICBS-TB-GL" );
                   System.out.println("row value" + report_worksheet.getLastRowNum());


                    for (int x =1; x <=  report_worksheet.getLastRowNum(); x++){
                                 Row row = report_worksheet.getRow(x);   
                                   for(int y=1;y<4;y++){
                                   System.out.println("row : " + x + "col :" + y);
                                   System.out.println("CELL CLEANING");
                                      Cell cell = row.getCell(y);
                                       if (cell == null){
                                           cell = row.createCell(y);
                                       }
                                       cell.setCellValue(" ");

                                   }

                               }
             }else{
                 System.out.println("WITH DATA VALUE");
                while (rs2.next()){
                 System.out.println("ROW GL" + xrow);
                 System.out.println("Column 1 " + rs2.getString(1));
                 System.out.println("Column 2 " + rs2.getString(2));
                 System.out.println("Column 3 " + rs2.getString(3));
             
                 XSSFSheet report_worksheet;
                 report_worksheet = report_excel_template.getSheet("ICBS-TB-GL");
                // System.out.println("row value" + report_worksheet.getLastRowNum());
                                 
                            
                                  Row row = report_worksheet.getRow(xrow);   
//                                   System.out.println("row 0" + row.getCell(0));
//                                    System.out.println("row 1" + row.getCell(1));
//                                     System.out.println("row 2" + row.getCell(2));
//                                      System.out.println("row 3" + row.getCell(3));
//                                       System.out.println("row 4" + row.getCell(4));
//                                  
                                //create new row if row is null
                                if (row == null) {
                                     // No entries in this row
                                     // Handle empty
                                    // continue;
                                     row = report_worksheet.createRow(xrow); 
                                  }
                                    
                                  for(int y=1;y<4;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                    String getValue;
   //                                 System.out.println("TB " + tb_row.getCell(y));
                                       
                                     
                                       Cell cell = row.getCell(y);
                                        if (cell == null){ 
                                            cell = row.createCell(y);
                                        }else{
                                        
                                        
                                        }
                                        
                                        if(y < 3){
                                            if(isNullOrBlank(rs2.getString(y))){
                                            cell.setCellValue(" ");
                                            }else{
                                            cell.setCellValue(rs2.getString(y));
                                            }
                                            
                                        }else{
                                            if(isNullOrBlank(rs2.getString(y))){
                                            cell.setCellValue(0.00D);
                                            }else{
                                            cell.setCellValue(Double.parseDouble(rs2.getString(y)));
                                            }
                                            System.out.println("LAST VALUE" + y);
                                        }
                                       
                                    
                                    }
                 
                 xrow += 1;
                 
                }
             }
             //import file into excell

            st2.close();
            System.out.println ("current+excelTemplate " + current+excelTemplate);
            FileOutputStream output_file =new FileOutputStream(new File(current+excelTemplate)); 
            report_excel_template.write(output_file);//write changes
            output_file.close();//close the stream
             
        }
        catch(Exception e){}
    }
    //3rd report
    private void fnIcbsBpSummary()
    {
        //ICBS-BP-SUMMARY
        
        try
        {
            String excelTemplate = CreateReport.getReportTemplate(rep_code);        
            String current = new java.io.File( "." ).getCanonicalPath();
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            // convert it into a POI object
            //Read Excel document first
           
            //for Input
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            // convert it into a POI object
            report_excel_template = new XSSFWorkbook(input_document);
            System.out.println("Report Excell template" +  report_excel_template);
            Connection conn = ConnectionManager.getConnection();
            xrow = 1;
            Statement st4 = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
          String sqlstr4 = " ";
            sqlstr4 +="select 'Short Term', sum(principal) from bills_payable ";
            sqlstr4 +="where DATE_PART('day', due_date - date_opened) > 0 and DATE_PART('day', due_date - date_opened) <= 366 or due_date is null ";
            sqlstr4 +="union ";
            sqlstr4 +="select 'Medium Term', sum(principal) from bills_payable "; 
            sqlstr4 +="where DATE_PART('day', due_date - date_opened) > 366 and DATE_PART('day', due_date - date_opened) <= 1827 ";
            sqlstr4 +="union ";
            sqlstr4 +="select 'Long Term', sum(principal) from bills_payable "; 
            sqlstr4 +="where DATE_PART('day', due_date - date_opened) > 1827 ";
            ResultSet rs4 = st4.executeQuery(sqlstr4);
        
            if(!rs4.isBeforeFirst())
            {//query is null
                XSSFSheet report_worksheet;
                report_worksheet = report_excel_template.getSheet("ICBS-BP-SUMMARY");
                for(int x=1 ;x <= report_worksheet.getLastRowNum(); x++ )
                {
                    Row row = report_worksheet.getRow(x);   
                    for(int y=1;y<3;y++)
                    {
                        System.out.println("row : " + xrow + "col :" + y);
                        System.out.println("CELL CLEANING");
                        Cell cell = row.getCell(y);
                        if (cell == null)
                        {
                            cell = row.createCell(y);
                        }
                        
         		if(y < 2 ){}
                        else
                        {
                            cell.setCellValue(0.00D); 
                        }            
                    }                        
                }
            }
            else
            {//query have return set
                while(rs4.next())
                {
                    XSSFSheet report_worksheet;
                    report_worksheet = report_excel_template.getSheet("ICBS-BP-SUMMARY");
                    Row row = report_worksheet.getRow(xrow);
                    //create new row if row is null
                    if (row == null) 
                    {
                        // No entries in this row
                        // Handle empty
                        // continue;
                        row = report_worksheet.createRow(xrow); 
                    }                     
                    for(int y=1;y<3;y++)
                    {
                        System.out.println("row : " + xrow + "col :" + y);
                        System.out.println("CELL CLEANING");
                        Cell cell = row.getCell(y);
                        if (cell == null)
                        {
                            cell = row.createCell(y);
                        }   
                        if(y < 2 )
                        {    
                            cell.setCellValue(String.valueOf(rs4.getString(y)));  
                        }
                        else
                        {
                            cell.setCellValue(rs4.getString(y)); 
                        }
                    }
                    xrow += 1;
                }
            }
            st4.close();
            System.out.println ("current+excelTemplate " + current+excelTemplate);
            FileOutputStream output_file =new FileOutputStream(new File(current+excelTemplate)); 
            report_excel_template.write(output_file);//write changes
            output_file.close();//close the stream
        
        }
        
        catch (Exception e)
        {}
    
}
    // 4th report
    private static void fnIcbsBPLISTING ()
    {
        Integer xrow = 1;
        try 
        {                     
            Connection conn = ConnectionManager.getConnection();
            //Excell declaration
            String excelTemplate = CreateReport.getReportTemplate(rep_code);        
            String current = new java.io.File( "." ).getCanonicalPath();
            //HSSFWorkbook report_excel_template;
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            // convert it into a POI object
            //Read Excel document first
           
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            // convert it into a POI object
            report_excel_template = new XSSFWorkbook(input_document);
            
            System.out.println("Report Excell template" +  report_excel_template);
            //report_excel_template = new HSSFWorkbook(input_document); 
            //openExcelTemplate(excelTemplate,rep_code,refdate);
                         //ICBS-BP-LISTING
             xrow = 1;
             Statement st3 = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
               String sqlstr3 = " ";
             sqlstr3 = "";
                sqlstr3 = "select B.name as Branch_name, A.account_name, A.creditor_name, ";
                sqlstr3 += "A.date_opened, A.due_date, DATE_PART('day', A.due_date - A.date_opened) as term, ";
                sqlstr3 += "A.interest_rate, A.payee, A.pn_no, A.principal, C.description as status ";
                sqlstr3 += "from bills_payable A ";
                sqlstr3 += "inner join branch B on A.branch_id = B.id ";
                sqlstr3 += "inner join config_item_status C on A.status_id = C.id ";
                sqlstr3 += "where A.status_id = 2 ";
                sqlstr3 += "order by A.branch_id, A.date_opened ";
             ResultSet rs3 = st3.executeQuery(sqlstr3);
             
             if(!rs3.isBeforeFirst()){
                 System.out.println("NO VALUE");
                XSSFSheet report_worksheet;
                   report_worksheet = report_excel_template.getSheet("ICBS-BP-LISTING" );
                   System.out.println("row value" + report_worksheet.getLastRowNum());


                    for (int x =1; x <=  report_worksheet.getLastRowNum(); x++){
                                 Row row = report_worksheet.getRow(x);   
                                   for(int y=1;y<12;y++){
                                   System.out.println("row : " + x + "col :" + y);
                                   System.out.println("CELL CLEANING");
                                      Cell cell = row.getCell(y);
                                       if (cell == null){
                                           cell = row.createCell(y);
                                       }
                                       cell.setCellValue(" ");

                                   }

                               } 
             }else{
                   //overwrite data with query result
                   System.out.println("WITH VALUE");
                   while (rs3.next()){
                           
                            XSSFSheet report_worksheet;
                            report_worksheet = report_excel_template.getSheet("ICBS-BP-LISTING");
                           
                           //start
                           Row row = report_worksheet.getRow(xrow); 
                                //create new row if row is null
                                if (row == null) {
                                     // No entries in this row
                                     // Handle empty
                                    // continue;
                                     row = report_worksheet.createRow(xrow); 
                                  }                           
                                    for(int y=1;y<12;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                       Cell cell = row.getCell(y);
                                        if (cell == null){
                                            cell = row.createCell(y);
                                        }
                                        
                                        
                                        if(y == 6 || y == 7 || y == 10){
                                            if(isNullOrBlank(rs3.getString(y))){
                                                cell.setCellValue(0.00D);
                                            }else{
                                                cell.setCellValue(Double.parseDouble(rs3.getString(y)));
                                            }
                                        
                                        }else{
                                         cell.setCellValue(String.valueOf(rs3.getString(y)));
                                        }
                                    
                                    }
                          
                            xrow += 1;
                            
                        }
             }
             st3.close();
            System.out.println ("current+excelTemplate " + current+excelTemplate);
            FileOutputStream output_file =new FileOutputStream(new File(current+excelTemplate)); 
            report_excel_template.write(output_file);//write changes
            output_file.close();//close the stream
        }
        
        catch (Exception e)
        {
            
        }
    }
    //5th report
    private static void fnIcbsCNTINGNTListing()
    {
        Integer xrow = 1;
        try 
        {                    
            Connection conn = ConnectionManager.getConnection();
            String excelTemplate = CreateReport.getReportTemplate(rep_code);        
            String current = new java.io.File( "." ).getCanonicalPath();
            //HSSFWorkbook report_excel_template;
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            // convert it into a POI object
            //Read Excel document first
           
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            // convert it into a POI object
            report_excel_template = new XSSFWorkbook(input_document);
            xrow = 1;
             Statement st5 = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             String sqlstr5 = " ";
             
             sqlstr5 ="select B.name as branch_name, A.particulars, A.reference, A.txn_date ";
            sqlstr5 +="from gl_contigent_account A ";
            sqlstr5 +="inner join branch B on A.branch_id = B.id ";
            sqlstr5 +="where A.status_id = 2 ";
            sqlstr5 +="order by A.branch_id, A.txn_date ";
            ResultSet rs5 = st5.executeQuery(sqlstr5);
            
            if(!rs5.isBeforeFirst()){
            //NULL VALUE
                XSSFSheet report_worksheet;
                report_worksheet = report_excel_template.getSheet("ICBS-CNTINGNT-LISTING");
                for(int x = 1;x<=report_worksheet.getLastRowNum();x++){
                    
                    Row row = report_worksheet.getRow(x);
                                //create new row if row is null
                                if (row == null) {
                                     // No entries in this row
                                     // Handle empty
                                    // continue;
                                     row = report_worksheet.createRow(xrow); 
                                  }                    
                                 for(int y=1;y<5;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                       Cell cell = row.getCell(y);
                                        if (cell == null){
                                            cell = row.createCell(y);
                                        }                                      
                                         cell.setCellValue(String.valueOf(" ")); 

                                    }
                }
               
            }else{
            //WITH DATA
                while(rs5.next()){
                XSSFSheet report_worksheet;
                report_worksheet = report_excel_template.getSheet("ICBS-CNTINGNT-LISTING");
                Row row = report_worksheet.getRow(xrow);
                            for(int y=1;y<5;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                       Cell cell = row.getCell(y);
                                        if (cell == null){
                                            cell = row.createCell(y);
                                        }
                                        if(y < 4){
                                         cell.setCellValue(String.valueOf(rs5.getString(y)));  
                                        }else{
                                         cell.setCellValue(SDF.format(rs5.getString(y))); 
                                        }
                                    
                                    }
                xrow += 1;
                }
            }
            rs5.close();        
            System.out.println ("current+excelTemplate " + current+excelTemplate);
            FileOutputStream output_file =new FileOutputStream(new File(current+excelTemplate)); 
            report_excel_template.write(output_file);//write changes
            output_file.close();//close the stream
        }
        
        catch (Exception e)
        {
            
        }
    }
    //6th report
    private static void fnIcbsCNTINGSummary()
    {
        Integer xrow = 1;
        try 
        {                    
            Connection conn = ConnectionManager.getConnection();
            String excelTemplate = CreateReport.getReportTemplate(rep_code);        
            String current = new java.io.File( "." ).getCanonicalPath();
            //HSSFWorkbook report_excel_template;
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            // convert it into a POI object
            //Read Excel document first
           
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            // convert it into a POI object
            report_excel_template = new XSSFWorkbook(input_document);
            xrow = 1;
            //ICBS-CNTINGNT-SUMMARY
            Statement st6 = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            String sqlstr6 = " ";
            sqlstr6 = "select count(*) from gl_contigent_account where status_id = 2";
            ResultSet rs6 = st6.executeQuery(sqlstr6);
            
            if(!rs6.isBeforeFirst())
            {
                System.out.println("NO VALUE");
                XSSFSheet report_worksheet;
                report_worksheet = report_excel_template.getSheet("ICBS-CNTINGNT-SUMMARY");
                for(int x = 1;x<=report_worksheet.getLastRowNum();x++)
                {
                    Row row = report_worksheet.getRow(x);
                    for(int y=1;y<2;y++)
                    {
                        System.out.println("row : " + xrow + "col :" + y);
                        System.out.println("CELL CLEANING");
                        Cell cell = row.getCell(y);
                        if (cell == null)
                        {
                            cell = row.createCell(y);
                        }                                      
                        cell.setCellValue(String.valueOf(" ")); 
                    }
                }
            }
            else
            {
                System.out.println("WITH VALUE");
                while(rs6.next())
                {
                    XSSFSheet report_worksheet;
                    report_worksheet = report_excel_template.getSheet("ICBS-CNTINGNT-SUMMARY");
                    Row row = report_worksheet.getRow(xrow);
                    //create new row if row is null
                    if (row == null) 
                    {
                        // No entries in this row
                        // Handle empty
                        // continue;
                        row = report_worksheet.createRow(xrow); 
                    }                                 
                    for(int y=1;y<2;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                       Cell cell = row.getCell(y);
                                        if (cell == null){
                                            cell = row.createCell(y);
                                        }                        
                                        
                                         cell.setCellValue(Double.parseDouble(rs6.getString(y))); 

                                    }
                                 xrow += 1;
                }
            }
            
	    System.out.println ("current+excelTemplate " + current+excelTemplate);
            FileOutputStream output_file =new FileOutputStream(new File(current+excelTemplate)); 
            report_excel_template.write(output_file);//write changes
            output_file.close();//close the stream
        }
        
        catch (Exception e)
        {
            
        }
    }
    //7th report
    private void fnIcbsOtherAsset25()
    {
        try
        {
            String dateString = SDF.format( jCalReportCutOff.getDate() );
            String excelTemplate = CreateReport.getReportTemplate(rep_code);        
            String current = new java.io.File( "." ).getCanonicalPath(); //HSSFWorkbook report_excel_template;
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            // convert it into a POI object
            //Read Excel document first
           
            //for Input
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            // convert it into a POI object
            report_excel_template = new XSSFWorkbook(input_document);
            System.out.println("Report Excell template" +  report_excel_template);
            Connection conn = ConnectionManager.getConnection();
            
            //ICBS-OTHER-ASSET-25%
            xrow = 1;
            Statement st7 = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            String sqlstr7 = " ";
            sqlstr7 ="with X as ( ";
            sqlstr7 +="select sum(debit_balance - credit_balance) as tot_other_asset from gl_daily_file X ";
            sqlstr7 +="where substring(code from 1 for 4) = '1-24' and ref_date = '"+dateString+"' ";
            sqlstr7 +="), Y as ( ";
            sqlstr7 +="select name, code, sum(debit_balance - credit_balance) as tot_others ";
            sqlstr7 +="from gl_daily_file X where substring(code from 1 for 7) = '1-24-13' and ref_date = '"+dateString+"' ";
            sqlstr7 +="group by name, code ";
            sqlstr7 +="having sum(debit_balance - credit_balance) < ((select tot_other_asset from X) * 0.25) and sum(debit_balance - credit_balance) > 0 ";
            sqlstr7 +=") ";
            sqlstr7 +="select name, code, sum(debit_balance - credit_balance) ";
            sqlstr7 +="from gl_daily_file ";
            sqlstr7 +="where substring(code from 1 for 7) = '1-24-13' and ref_date = '"+dateString+"'";
            sqlstr7 +="group by name, code having sum(debit_balance - credit_balance) >= ((select tot_other_asset from X) * 0.25) ";
            sqlstr7 +="union ";
            sqlstr7 +="select 'Others', '9', (select sum(Y.tot_others) from Y) ";
            ResultSet rs7 = st7.executeQuery(sqlstr7);
            if(!rs7.isBeforeFirst())
            {
                System.out.println("WITH NO VALUE");
                XSSFSheet report_worksheet;
                report_worksheet = report_excel_template.getSheet("ICBS-OTHER-ASSET-25%");
                for(int x = 1;x<=report_worksheet.getLastRowNum();x++)
                {
                    Row row = report_worksheet.getRow(x);
                    for(int y=0;y<4;y++)
                    {
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                       Cell cell = row.getCell(y);
                                        if (cell == null){
                                            cell = row.createCell(y);
                                        } 
                                        if(y==2){
                                          cell.setCellValue(0.00D);
                                        }else{
                                        cell.setCellValue(String.valueOf(" "));
                                        }
                                          

                                    }
                }
            }else{
            System.out.println("WITH VALUE");
                XSSFSheet report_worksheet;
                report_worksheet = report_excel_template.getSheet("ICBS-OTHER-ASSET-25%");
                while(rs7.next()){
                Row row = report_worksheet.getRow(xrow);
                                //create new row if row is null
                                if (row == null) {
                                     // No entries in this row
                                     // Handle empty
                                    // continue;
                                     row = report_worksheet.createRow(xrow); 
                                  }                    
                                for(int y=1;y<4;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                       Cell cell = row.getCell(y);
                                        if (cell == null){
                                            cell = row.createCell(y);
                                        } 
                                        if(y==3){
                                           if(isNullOrBlank(rs7.getString(y))){
                                                cell.setCellValue(0.00D);
                                            }else{
                                                cell.setCellValue(Double.parseDouble(rs7.getString(y)));
                                            }
                                        }else{
                                        cell.setCellValue(String.valueOf(rs7.getString(y)));
                                        }
                                          
                                 }
                
                xrow += 1;
                }
            }
            System.out.println ("current+excelTemplate " + current+excelTemplate);
            FileOutputStream output_file =new FileOutputStream(new File(current+excelTemplate)); 
            report_excel_template.write(output_file);//write changes
            output_file.close();//close the stream
        }
        
        catch(Exception e)
        {
            
        }
        
         
    }
    
    //9th report
    private void fnIcbsSieAcctResident()
    {
        try
        {
            
            String dateString = SDF.format( jCalReportCutOff.getDate() );
            String excelTemplate = CreateReport.getReportTemplate(rep_code); 
            Calendar now = Calendar.getInstance();
            int currentYear = now.get(Calendar.YEAR);
            String current = new java.io.File( "." ).getCanonicalPath(); //HSSFWorkbook report_excel_template;
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            // convert it into a POI object
            //Read Excel document first
           
            //for Input
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            // convert it into a POI object
            report_excel_template = new XSSFWorkbook(input_document);
            System.out.println("Report Excell template" +  report_excel_template);
            Connection conn = ConnectionManager.getConnection(); 
            //END
            //SIE_ACCT_RESIDENT
            //START
            xrow = 1;
            Statement st10 = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            String sqlstr10 = " ";
            
           sqlstr10 = "with X as (  ";
            sqlstr10 += "select D.id, D.description, round(sum(case when B.gl_Link_id in (20,21,30,31) then txn_amt else 0 end),2) as int_exp_sa,  ";
            sqlstr10 += "round(sum(case when B.gl_Link_id in (1) then txn_amt else 0 end),2) as int_exp_ca,  ";
            sqlstr10 += "round(sum(case when B.gl_Link_id in (40) then txn_amt else 0 end),2) as int_exp_td  ";
            sqlstr10 += "from txn_file A  ";
            sqlstr10 += "inner join deposit B on A.dep_acct_id = B.id  ";
            sqlstr10 += "inner join customer C on B.customer_id = C.id  ";
            sqlstr10 += "inner join resident_type D on C.customer_code1_id = D.id  ";
            sqlstr10 += "where A.txn_type_id = 31 and A.txn_date between '"+currentYear+"-01-01' and '"+dateString+"' and (A.txn_particulars = 'Interest Credit' or txn_Ref like '%Int Posting')";
            sqlstr10 += "group by D.id, D.description  ";
            sqlstr10 += "order by d.id  ";
            sqlstr10 += ")  ";
            sqlstr10 += "select  A.description, X.int_exp_sa, X.int_exp_ca, X.int_exp_td  ";
            sqlstr10 += "from resident_type A  ";
            sqlstr10 += "left outer join X on A.id = X.id  "; 
            sqlstr10 += "order by A.id  ";
            ResultSet rs10 = st10.executeQuery(sqlstr10);
            if(!rs10.isBeforeFirst()){
            System.out.println("NO VALUE");
                     XSSFSheet report_worksheet;
                     report_worksheet = report_excel_template.getSheet("ICBS-SIEACCT-RESIDENT");
                for(int x = 1;x<=report_worksheet.getLastRowNum();x++){
                    
                        Row row = report_worksheet.getRow(x);
                                 for(int y=1;y<4;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                       Cell cell = row.getCell(y);
                                        if (cell == null){
                                            cell = row.createCell(y);
                                        } 
                                        if(y==3){
                                          cell.setCellValue(0.00D);
                                        }
                                    }
                }
            }else{
            System.out.println("NO VALUE -EXP-25");
                    XSSFSheet report_worksheet;
                     report_worksheet = report_excel_template.getSheet("ICBS-SIEACCT-RESIDENT");
                     while(rs10.next()){
                         Row row = report_worksheet.getRow(xrow);
                                //create new row if row is null
                                if (row == null) {
                                     // No entries in this row
                                     // Handle empty
                                    // continue;
                                     row = report_worksheet.createRow(xrow); 
                                  }
                                
                                
                                System.out.println("THIS IS BLAH BLAH" +  row.getCell(1));
                                System.out.println("THIS IS BLAH BLAH" +  row.getCell(2));
                                        System.out.println("THIS IS BLAH BLAH" +  row.getCell(3));
                                                System.out.println("THIS IS BLAH BLAH" +  row.getCell(4));
                                                    System.out.println("THIS IS BLAH BLAH" +  row.getCell(5));     
                         for(int y=1;y<5;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                    
                                       Cell cell = row.getCell(y);
                                        if (cell == null){
                                            cell = row.createCell(y);
                                        } 
                                        
                                        if(y>2){
                                          if(isNullOrBlank(rs10.getString(y))){
                                            cell.setCellValue(0.00D);
                                            }else{
                                            cell.setCellValue(Double.parseDouble(rs10.getString(y)));
                                            }  
                                        
                                        }else{
                                            cell.setCellValue(rs10.getString(y));
                                        }
                                        
                                    }
                         
                         
                         xrow += 1;
                     }
            }
            
            //END
            System.out.println("dito yung erro");
            System.out.println("Excell template " + report_excel_template);
       //     XSSFFormulaEvaluator.evaluateAllFormulaCells(report_excel_template);
            FormulaEvaluator xevaluator = report_excel_template.getCreationHelper().createFormulaEvaluator();
            xevaluator.setIgnoreMissingWorkbooks(true);
            System.out.println("FORMULA" + xevaluator);
            for (Sheet sheet : report_excel_template){
                System.out.println("Sheet" + sheet);
                for(Row r : sheet){
                    for(Cell c: r ){
                        
                        if(c.getCellType() == Cell.CELL_TYPE_FORMULA){
                            xevaluator.evaluateFormulaCell(c);
                        }
                    }
                  }
                }

            //XSSFFormulaEvaluator.evaluateAllFormulaCells(report_excel_template);
            System.out.println ("current+excelTemplate " + current+excelTemplate);
            FileOutputStream output_file =new FileOutputStream(new File(current+excelTemplate)); 
            report_excel_template.write(output_file);//write changes
            output_file.close();//close the stream
        }
        
        catch(Exception e)
        {}
    }
    
    //8th report
     private void fnIcbsOtherLiab()
    {
        Integer xrow = 1;
        try 
        {                    
            
            String dateString = SDF.format( jCalReportCutOff.getDate() );
            Connection conn = ConnectionManager.getConnection();
            String excelTemplate = CreateReport.getReportTemplate(rep_code);        
            String current = new java.io.File( "." ).getCanonicalPath();
            //HSSFWorkbook report_excel_template;
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            // convert it into a POI object
            //Read Excel document first
           
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            // convert it into a POI object
            report_excel_template = new XSSFWorkbook(input_document);
            xrow = 1;
            
                    //ICBS-OTHER-LIAB-25%                    
            xrow = 1;
            Statement st8 = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            String sqlstr8 = " "; 
            sqlstr8 ="with X as ( ";
            sqlstr8 +="select abs(sum(debit_balance - credit_balance)) as tot_other_liab from gl_daily_file X ";
            sqlstr8 +="where substring(code from 1 for 4) = '2-30' and ref_date = '"+dateString+"' ";
            sqlstr8 +="), Y as ( ";
            sqlstr8 +="select name, code, abs(sum(debit_balance - credit_balance)) as tot_others ";
            sqlstr8 +="from gl_daily_file X where substring(code from 1 for 7) = '2-30-12' and ref_date = '"+dateString+"' ";
            sqlstr8 +="group by name, code ";
            sqlstr8 +="having sum(debit_balance - credit_balance) < ((select tot_other_liab from X) * 0.25) and sum(debit_balance - credit_balance) > 0 ";
            sqlstr8 +=") ";
            sqlstr8 +="select name, code, abs(sum(debit_balance - credit_balance)) ";
            sqlstr8 +="from gl_daily_file ";
            sqlstr8 +="where substring(code from 1 for 7) = '2-30-12' and ref_date = '"+dateString+"' ";
            sqlstr8 +="group by name, code having abs(sum(debit_balance - credit_balance)) >= ((select tot_other_liab from X) * 0.25) ";
            sqlstr8 +="union ";
            sqlstr8 +="select 'Others', '9', (select abs(sum(Y.tot_others)) from Y) ";
            ResultSet rs8 = st8.executeQuery(sqlstr8);
            if(!rs8.isBeforeFirst()){
            System.out.println("NO VALUE");
                     XSSFSheet report_worksheet;
                     report_worksheet = report_excel_template.getSheet("ICBS-OTHER-LIAB-25%");
                for(int x = 1;x<=report_worksheet.getLastRowNum();x++){
                    
                        Row row = report_worksheet.getRow(x);
                                 for(int y=1;y<4;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                       Cell cell = row.getCell(y);
                                        if (cell == null){
                                            cell = row.createCell(y);
                                        } 
                                        if(y==3){
                                          cell.setCellValue(0.00D);
                                        }
                                    }
                }
            }else{
            System.out.println("NO VALUE");
                    XSSFSheet report_worksheet;
                     report_worksheet = report_excel_template.getSheet("ICBS-OTHER-LIAB-25%");
                     while(rs8.next()){
                         Row row = report_worksheet.getRow(xrow);
                                //create new row if row is null
                                if (row == null) {
                                     // No entries in this row
                                     // Handle empty
                                    // continue;
                                     row = report_worksheet.createRow(xrow); 
                                  }                         
                         for(int y=1;y<4;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                       Cell cell = row.getCell(y);
                                        if (cell == null){
                                            cell = row.createCell(y);
                                        } 
                                        
                                        if(y==3){
                                          if(isNullOrBlank(rs8.getString(y))){
                                            cell.setCellValue(0.00D);
                                            }else{
                                            cell.setCellValue(Double.parseDouble(rs8.getString(y)));
                                            }  
                                        
                                        }else{
                                            cell.setCellValue(rs8.getString(y));
                                        }
                                        
                                    }
                         
                         
                         xrow += 1;
                     }
            }
            
            
            
	    System.out.println ("current+excelTemplate " + current+excelTemplate);
            FileOutputStream output_file =new FileOutputStream(new File(current+excelTemplate)); 
            report_excel_template.write(output_file);//write changes
            output_file.close();//close the stream
}
        
        catch (Exception e)
        {
            
        }
    }
     
     private void fnOtherExp25()
    {
        Integer xrow = 1;
        try 
        {           
            String dateString = SDF.format( jCalReportCutOff.getDate() );
            Connection conn = ConnectionManager.getConnection();
            String excelTemplate = CreateReport.getReportTemplate(rep_code);        
            String current = new java.io.File( "." ).getCanonicalPath();
            //HSSFWorkbook report_excel_template;
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            // convert it into a POI object
            //Read Excel document first
           
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            // convert it into a POI object
            report_excel_template = new XSSFWorkbook(input_document);
            xrow = 1;
             //OTHER-EXP-25%-SIEACCT
            //START
            Statement st9 = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            String sqlstr9 = " ";
                  sqlstr9 = "with X as (  ";
                sqlstr9 += "select sum(debit_balance - credit_balance) as tot_other_admin from gl_daily_file X  ";
                sqlstr9 += "where substring(code from 1 for 4) = '6-16' and ref_date = '"+dateString+"'  ";
                sqlstr9 += "), Y as (  ";
                sqlstr9 += "select name, code, sum(debit_balance - credit_balance) as tot_others  ";
                sqlstr9 += "from gl_daily_file X where substring(code from 1 for 7) = '6-16-21' and ref_date = '"+dateString+"'  ";
                sqlstr9 += "group by name, code  ";
                sqlstr9 += "having sum(debit_balance - credit_balance) < ((select tot_other_admin from X) * 0.25) and sum(debit_balance - credit_balance) > 0  ";
                sqlstr9 += ")  ";
                sqlstr9 += "select name, code, sum(debit_balance - credit_balance)  ";
                sqlstr9 += "from gl_daily_file  ";
                sqlstr9 += "where substring(code from 1 for 7) = '6-16-21' and ref_date = '"+dateString+"'  ";
                sqlstr9 += "group by name, code having sum(debit_balance - credit_balance) >= ((select tot_other_admin from X) * 0.25)  ";
                sqlstr9 += "union  ";
                sqlstr9 += "select 'Others', '9', (select sum(Y.tot_others) from Y)  ";
            ResultSet rs9 = st9.executeQuery(sqlstr9);
            if(!rs9.isBeforeFirst()){
            System.out.println("NO VALUE");
                     XSSFSheet report_worksheet;
                     report_worksheet = report_excel_template.getSheet("ICBS-OTHER-LIAB-25%");
                for(int x = 1;x<=report_worksheet.getLastRowNum();x++){
                    
                        Row row = report_worksheet.getRow(x);
                                 for(int y=1;y<4;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                       Cell cell = row.getCell(y);
                                        if (cell == null){
                                            cell = row.createCell(y);
                                        } 
                                        if(y==3){
                                          cell.setCellValue(0.00D);
                                        }
                                    }
                }
            }else{
            System.out.println("NO VALUE -EXP-25");
                    XSSFSheet report_worksheet;
                     report_worksheet = report_excel_template.getSheet("ICBS-OTHER-EXP-25%");
                     while(rs9.next()){
                         Row row = report_worksheet.getRow(xrow);
                                //create new row if row is null
                                if (row == null) {
                                     // No entries in this row
                                     // Handle empty
                                    // continue;
                                     row = report_worksheet.createRow(xrow); 
                                  }                         
                         for(int y=1;y<4;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                       Cell cell = row.getCell(y);
                                        if (cell == null){
                                            cell = row.createCell(y);
                                        } 
                                        
                                        if(y>1){
                                          if(isNullOrBlank(rs9.getString(y))){
                                            cell.setCellValue(0.00D);
                                            }else{
                                            cell.setCellValue(Double.parseDouble(rs9.getString(y)));
                                            }  
                                        
                                        }else{
                                            cell.setCellValue(rs9.getString(y));
                                        }
                                        
                                    }
                         
                         
                         xrow += 1;
                     }
            }
            //OTHER-EXP-25%
            
	    System.out.println ("current+excelTemplate " + current+excelTemplate);
            FileOutputStream output_file =new FileOutputStream(new File(current+excelTemplate)); 
            report_excel_template.write(output_file);//write changes
            output_file.close();//close the stream
}
        
        catch (Exception e)
        {
            
        }
    }
     //11th
    private void fnControlProofList()
     {
         try
         {
            String dateString = SDF.format( jCalReportCutOff.getDate() );
             
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            String excelTemplate = CreateReport.getReportTemplate(rep_code);        
            String current = new java.io.File( "." ).getCanonicalPath();
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
             //START
            String BSP_controlprof = CreateReport.getReportTemplate("CONTROLPROOFLIST");        
            report_excel_template = new XSSFWorkbook(input_document);
            //HSSFWorkbook report_excel_template;
            XSSFWorkbook bsp_cp_excel_template; // for xlsx/xlsm
            
            //  Workbook bsp_cp_excel_template = WorkbookFactory.create(new File(current+BSP_controlprof));
            // convert it into a POI object
            //Read Excel document first
           
            FileInputStream bsp_cp_input_document = new FileInputStream(new File(current+BSP_controlprof));
            // convert it into a POI object
            bsp_cp_excel_template = new XSSFWorkbook(bsp_cp_input_document);
            
            System.out.println("Report Excell template" +  report_excel_template);
            
            
            //START
            XSSFSheet report_worksheet;
           // Sheet bsp_cp_report_worksheet;
            XSSFSheet bsp_cp_report_worksheet;
            report_worksheet = report_excel_template.getSheet("WP-FRP-CP-TABLE");
            DataFormatter formatter = new DataFormatter();
            DecimalFormat df = new DecimalFormat("#,##0.00;(-#,##0.00)");
            FormulaEvaluator evaluator = report_excel_template.getCreationHelper().createFormulaEvaluator();
            for(int x = 1;x<=report_worksheet.getLastRowNum();x++){
                    
                        Row row = report_worksheet.getRow(x);
                        if (row == null) {
                                     x = report_worksheet.getLastRowNum();
                                   //  continue;
                                     //row = report_worksheet.createRow(xrow); 
                            } 
                        //NOTE:
                        
                        //getCell(3) = row ; getCell(4) = column ; getCell(5) = value;
                         System.out.println("FRP CONTROL " + report_worksheet.getLastRowNum());
                         System.out.println("Sheet Name : " + row.getCell(2).toString());
                         System.out.println("Row : " + formatter.formatCellValue(row.getCell(3), evaluator));
                         System.out.println("Column : " + formatter.formatCellValue(row.getCell(4), evaluator));
                         System.out.println("Value : " + formatter.formatCellValue(row.getCell(5)));
                        
                         
                         Cell valueCell = row.getCell(5);
                         if (valueCell == null){
                                            valueCell = row.createCell(5);
                                        } 
               
                         bsp_cp_report_worksheet = bsp_cp_excel_template.getSheet(row.getCell(2).toString());
                         String bsp_cp_row =  formatter.formatCellValue(row.getCell(3), evaluator);
                         String bsp_cp_col =  formatter.formatCellValue(row.getCell(4), evaluator);
                         String bsp_val_col =  String.valueOf(valueCell.getNumericCellValue());
                      
                         
                      
                         //insert value on bsp control_proflist
                         if(bsp_cp_row != ""){
                              Row bspcp_row = bsp_cp_report_worksheet.getRow(Integer.parseInt(bsp_cp_row));
                          if (bspcp_row == null) {
                                     
                                     continue;
                                     //row = report_worksheet.createRow(xrow); 
                                  } 
                          Cell bsp_cell = bspcp_row.getCell(Integer.parseInt(bsp_cp_col));
                         
                          if (bsp_cell == null){
                                bsp_cell = bspcp_row.createCell(Integer.parseInt(bsp_cp_col));
                             }
                          
                          if(bsp_val_col.isEmpty()){
                           bsp_cell.setCellValue(0.00D);
                          }else{
                          bsp_cell.setCellValue(valueCell.getNumericCellValue());
                          }
                          
                        
                         }else{ x = report_worksheet.getLastRowNum();}
       
                         
                }
            bsp_cp_input_document.close();
            FileOutputStream bsp_cp_output_file =new FileOutputStream(new File(current+"\\output\\CONTROLPROOFLIST_"+dateString+".xlsm"));
            System.out.println("LOC : " + current+"\\output\\CONTROLPROOFLIST_"+dateString+".xls");
            //write changes
            bsp_cp_excel_template.write(bsp_cp_output_file);
            //close the stream
            bsp_cp_output_file.close(); 
            
         }catch(Exception e)
         {
             
         }
     }
    //12
    private  void fnRBSOLOSOCSIE()
    {
        try
        {
            
            String dateString = SDF.format( jCalReportCutOff.getDate() );
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            String excelTemplate = CreateReport.getReportTemplate(rep_code);        
            String current = new java.io.File( "." ).getCanonicalPath();
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
             //START     
            report_excel_template = new XSSFWorkbook(input_document);
            //HSSFWorkbook report_excel_template;
            
            XSSFSheet report_worksheet;
            report_worksheet = report_excel_template.getSheet("WP-FRP-CP-TABLE");
            //  Workbook bsp_cp_excel_template = WorkbookFactory.create(new File(current+BSP_controlprof));
            // convert it into a POI object
            //Read Excel document first
            //            //"RBSOLOSOCSIE"
//            
//        // String current = new java.io.File( "." ).getCanonicalPath();
            //WP-FRP=SOCSIE-TABLE
            //START
             String BSP_socsie = CreateReport.getReportTemplate("TBSOLOSOCSIE");        
          
            //HSSFWorkbook report_excel_template;
             XSSFWorkbook bsp_socsie_excel_template; // for xlsx/xlsm
          //  Workbook bsp_cp_excel_template = WorkbookFactory.create(new File(current+BSP_controlprof));
            // convert it into a POI object
            //Read Excel document first
           
            FileInputStream bsp_soc_input_document = new FileInputStream(new File(current+BSP_socsie));
            // convert it into a POI object
            bsp_socsie_excel_template = new XSSFWorkbook(bsp_soc_input_document);
            
            System.out.println("soc Report Excell template" +  bsp_socsie_excel_template);
           // XSSFSheet socpre_report_worksheet;
           // Sheet bsp_cp_report_worksheet;
            XSSFSheet socpre_report_worksheet;
            XSSFSheet soc_report_worksheet;            
            FormulaEvaluator evaluator = report_excel_template.getCreationHelper().createFormulaEvaluator();
            DataFormatter formatter = new DataFormatter();
            socpre_report_worksheet = report_excel_template.getSheet("WP-FRP-SOCSIE-TABLE");
            for(int x = 1 ; x <= socpre_report_worksheet.getLastRowNum();x++){
                 Row soc_row = socpre_report_worksheet.getRow(x);
                 if (soc_row == null) {
                                     x = socpre_report_worksheet.getLastRowNum();
                                    // continue;
                            } 
                 System.out.println("socrow"  + soc_row.getCell(3) + "x: " + x + "number " + report_worksheet.getLastRowNum() );
                 sheetname = soc_row.getCell(2).toString();
                 System.out.println("SHEET" + soc_row.getCell(2).toString() +  "row" + soc_row.getCell(3) + "VALUE " + soc_row.getCell(5) + "number of " + x);
                 row = Integer.parseInt(formatter.formatCellValue(soc_row.getCell(3), evaluator));
                 System.out.println("dadaan ba dito");
                 col = Integer.parseInt(formatter.formatCellValue(soc_row.getCell(4), evaluator));
                 
                 Cell socVal = soc_row.getCell(5);
                  if (socVal == null){
                                socVal = soc_row.createCell(5);
                             }
                 String con_soc_val = String.valueOf(socVal.getNumericCellValue());
                 soc_report_worksheet = bsp_socsie_excel_template.getSheet(sheetname);
                 System.out.println("worksheet" + soc_report_worksheet);
                 Row xsocRow = soc_report_worksheet.getRow(row);
                 if(xsocRow == null){
                     continue;
                 }      
                 Cell socCell = xsocRow.getCell(col);
                  if (socCell == null){
                                socCell = soc_row.createCell(col);
                             }          
                 System.out.println("row" + row);
                 System.out.println("col" + col);
                 System.out.println("sheetname" + sheetname);
                 System.out.println("con_soc_val" + con_soc_val);
                 System.out.println("socVal" + socVal);
                 System.out.println(""+ soc_report_worksheet.getRow(row).getCell(5));
                 System.out.println(""+ soc_report_worksheet.getRow(row).getCell(1)); 
                 if(con_soc_val.isEmpty()){
                     System.out.println("pumasok sa empty");
                    socCell.setCellValue(0.00D);  
   
                 }else{
                    if(String.valueOf(socVal) == ""){
                        System.out.println("no value");
                     socCell.setCellValue(0.00D);  
                     }else{
                         System.out.println("with value" );
                     socCell.setCellValue(socVal.getNumericCellValue());
                     }
                      
                 }
                 
            }
            //END
            bsp_soc_input_document.close();
            FileOutputStream bsp_soc_output_file =new FileOutputStream(new File(current+"\\output\\TB-SOLO-SOCSIE_"+dateString+".xlsm"));
            System.out.println("LOC : " + current+"\\output\\OBO-SOLO-SOCSI"+dateString+".xls");
            System.out.println("REPORT WORKL BOOK" + bsp_socsie_excel_template);
            //write changes
            bsp_socsie_excel_template.write(bsp_soc_output_file);
            //close the stream
        }catch(Exception e)
        {
            
        }
    }
    
    private  void fnRBSoloOtherLiabTable()
    {
        try
        {
            
            String dateString = SDF.format( jCalReportCutOff.getDate() );
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            String excelTemplate = CreateReport.getReportTemplate(rep_code);        
            String current = new java.io.File( "." ).getCanonicalPath();
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
             //START     
            report_excel_template = new XSSFWorkbook(input_document);
            //HSSFWorkbook report_excel_template;
            
            XSSFSheet report_worksheet;
            report_worksheet = report_excel_template.getSheet("WP-FRP-CP-TABLE");
            //  Workbook bsp_cp_excel_template = WorkbookFactory.create(new File(current+BSP_controlprof));
            // convert it into a POI object
            //Read Excel document first
            //            //"RBSOLOSOCSIE"
//            
//        // String current = new java.io.File( "." ).getCanonicalPath();
            //WP-FRP=SOCSIE-TABLE
            //START
             String BSP_socsie = CreateReport.getReportTemplate("TBSOLOSOCSIE");        
          
            //HSSFWorkbook report_excel_template;
             XSSFWorkbook bsp_socsie_excel_template; // for xlsx/xlsm
          //  Workbook bsp_cp_excel_template = WorkbookFactory.create(new File(current+BSP_controlprof));
            // convert it into a POI object
            //Read Excel document first
           
            FileInputStream bsp_soc_input_document = new FileInputStream(new File(current+BSP_socsie));
            // convert it into a POI object
            bsp_socsie_excel_template = new XSSFWorkbook(bsp_soc_input_document);
     
            String BSP_othliab = CreateReport.getReportTemplate("TBSOLOOTHRLIAB");        
            //HSSFWorkbook report_excel_template;
            XSSFWorkbook bsp_otherliab_excel_template; // for xlsx/xlsm
            //  Workbook bsp_cp_excel_template = WorkbookFactory.create(new File(current+BSP_controlprof));
            // convert it into a POI object
            //Read Excel document first
           
            FileInputStream bsp_othliab_input_document = new FileInputStream(new File(current+BSP_othliab));
            // convert it into a POI object
            bsp_otherliab_excel_template = new XSSFWorkbook(bsp_othliab_input_document);
            
            System.out.println("soc Report Excell template" +  bsp_socsie_excel_template);
            // XSSFSheet socpre_report_worksheet;
            // Sheet bsp_cp_report_worksheet;
            XSSFSheet othliabpre_report_worksheet;
            XSSFSheet otliab_report_worksheet;
            othliabpre_report_worksheet = report_excel_template.getSheet("WP-FRP-OTHERLIAB-TABLE");
            XSSFSheet socpre_report_worksheet;
            XSSFSheet soc_report_worksheet;            
            FormulaEvaluator evaluator = report_excel_template.getCreationHelper().createFormulaEvaluator();
            DataFormatter formatter = new DataFormatter();
            
            for(int x = 1 ; x <= othliabpre_report_worksheet.getLastRowNum();x++){
                 Row soc_row = othliabpre_report_worksheet.getRow(x);
                 if (soc_row == null) {
                                     x = othliabpre_report_worksheet.getLastRowNum();
                                    // continue;
                            } 
                 System.out.println("socrow"  + soc_row.getCell(3) + "x: " + x + "number " + report_worksheet.getLastRowNum() );
                 sheetname = soc_row.getCell(2).toString();
                 System.out.println("SHEET" + soc_row.getCell(2).toString() +  "row" + soc_row.getCell(3) + "VALUE " + soc_row.getCell(5) + "number of " + x);
                 row = Integer.parseInt(formatter.formatCellValue(soc_row.getCell(3), evaluator));
                 System.out.println("dadaan ba dito");
                 col = Integer.parseInt(formatter.formatCellValue(soc_row.getCell(4), evaluator));
                 
                 Cell socVal = soc_row.getCell(5);
                  if (socVal == null){
                                socVal = soc_row.createCell(5);
                             }
                 String con_soc_val = String.valueOf(socVal.getNumericCellValue());
                 System.out.println("SHEETY NAME" + sheetname.replace(".0",""));
                 otliab_report_worksheet = bsp_otherliab_excel_template.getSheet(sheetname.replace(".0",""));
                 System.out.println("worksheet" + otliab_report_worksheet);
                 Row xsocRow = otliab_report_worksheet.getRow(row);
                 if(xsocRow == null){
                     continue;
                 }      
                 Cell socCell = xsocRow.getCell(8);
                  if (socCell == null){
                                socCell = soc_row.createCell(8);
                             }          
                 System.out.println("row" + row);
                 System.out.println("col" + col);
                 System.out.println("sheetname" + sheetname);
                 System.out.println("con_soc_val" + con_soc_val);
                 System.out.println("socVal" + socVal);
                 System.out.println(""+ otliab_report_worksheet.getRow(row).getCell(5));
                 System.out.println(""+ otliab_report_worksheet.getRow(row).getCell(1)); 
                 if(con_soc_val.isEmpty()){
                     System.out.println("pumasok sa empty");
                    socCell.setCellValue(0.00D);  
   
                 }else{
                    if(String.valueOf(socVal) == ""){
                        System.out.println("no value");
                     socCell.setCellValue(0.00D);  
                     }else{
                         System.out.println("with value" );
                     socCell.setCellValue(socVal.getNumericCellValue());
                     }
                      
                 }
                 
            }
            //END
            bsp_soc_input_document.close();
            
            //FOURTH OUTPUT STREAM
            FileOutputStream bsp_othlia_output_file =new FileOutputStream(new File(current+"\\output\\TB-SOLO-OTHRLIAB_"+dateString+".xlsm"));
            System.out.println("LOC : " + current+"\\output\\OBO-SOLO-SOCSI"+dateString+".xls");
            System.out.println("REPORT WORKL BOOK" + bsp_socsie_excel_template);
            //write changes
            bsp_otherliab_excel_template.write(bsp_othlia_output_file);
            //close the stream
            bsp_othlia_output_file.close(); 
        }
        
        catch (Exception e)
        {
            
        }
    }
    //15th
    private  void fnRbSoloNonFin()
    {
        try
        {
            
            String dateString = SDF.format( jCalReportCutOff.getDate() );
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            String excelTemplate = CreateReport.getReportTemplate(rep_code);        
            String current = new java.io.File( "." ).getCanonicalPath();
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            //START     
            report_excel_template = new XSSFWorkbook(input_document);
            //HSSFWorkbook report_excel_template;
            
            XSSFSheet report_worksheet;
            report_worksheet = report_excel_template.getSheet("WP-FRP-CP-TABLE");
            //  Workbook bsp_cp_excel_template = WorkbookFactory.create(new File(current+BSP_controlprof));
            // convert it into a POI object
            //Read Excel document first
            //            //"RBSOLOSOCSIE"
            //            
            // String current = new java.io.File( "." ).getCanonicalPath();
            //WP-FRP=SOCSIE-TABLE
            //START
            String BSP_socsie = CreateReport.getReportTemplate("TBSOLOSOCSIE");        
            //HSSFWorkbook report_excel_template;
            XSSFWorkbook bsp_socsie_excel_template; // for xlsx/xlsm
            //  Workbook bsp_cp_excel_template = WorkbookFactory.create(new File(current+BSP_controlprof));
            // convert it into a POI object
            //Read Excel document first
           
            FileInputStream bsp_soc_input_document = new FileInputStream(new File(current+BSP_socsie));
            // convert it into a POI object
            bsp_socsie_excel_template = new XSSFWorkbook(bsp_soc_input_document);
     
            String BSP_nonfinliab = CreateReport.getReportTemplate("TBSOLONONFIN");        
            //HSSFWorkbook report_excel_template;
            XSSFWorkbook bsp_nonfinliab_excel_template; // for xlsx/xlsm
            //  Workbook bsp_cp_excel_template = WorkbookFactory.create(new File(current+BSP_controlprof));
            // convert it into a POI object
            //Read Excel document first
            FileInputStream bsp_nonfinliab_input_document = new FileInputStream(new File(current+BSP_nonfinliab));
            // convert it into a POI object
            bsp_nonfinliab_excel_template = new XSSFWorkbook(bsp_nonfinliab_input_document);
            System.out.println("soc Report Excell template" +  bsp_socsie_excel_template);
            // XSSFSheet socpre_report_worksheet;
            // Sheet bsp_cp_report_worksheet;
            XSSFSheet nonfinliabpre_report_worksheet;
            XSSFSheet nonfinliab_report_worksheet;
            nonfinliabpre_report_worksheet = report_excel_template.getSheet("WP-FRP-NONFIN-TABLE");
            FormulaEvaluator evaluator = report_excel_template.getCreationHelper().createFormulaEvaluator();
            DataFormatter formatter = new DataFormatter();
            for(int x = 1 ; x <= nonfinliabpre_report_worksheet.getLastRowNum();x++)
            {
                 Row soc_row = nonfinliabpre_report_worksheet.getRow(x);
                 if (soc_row == null) {
                                     x = nonfinliabpre_report_worksheet.getLastRowNum();
                                    // continue;
                            } 
                 System.out.println("socrow"  + soc_row.getCell(3) + "x: " + x + "number " + report_worksheet.getLastRowNum() );
                 sheetname = soc_row.getCell(2).toString();
                 System.out.println("SHEET" + soc_row.getCell(2).toString() +  "row" + soc_row.getCell(3) + "VALUE " + soc_row.getCell(5) + "number of " + x);
                 row = Integer.parseInt(formatter.formatCellValue(soc_row.getCell(3), evaluator));
                 System.out.println("dadaan ba dito");
                 col = Integer.parseInt(formatter.formatCellValue(soc_row.getCell(4), evaluator));
                 
                 Cell socVal = soc_row.getCell(5);
                  if (socVal == null){
                                socVal = soc_row.createCell(5);
                             }
                 String con_soc_val = String.valueOf(socVal.getNumericCellValue());
                 nonfinliab_report_worksheet = bsp_nonfinliab_excel_template.getSheet(sheetname.replace(".0",""));
                 System.out.println("worksheet" + nonfinliab_report_worksheet);
                 Row xsocRow = nonfinliab_report_worksheet.getRow(row);
                 if(xsocRow == null){
                     continue;
                 }      
                 Cell socCell = xsocRow.getCell(col);
                  if (socCell == null){
                                socCell = soc_row.createCell(col);
                             }          
  
                 if(con_soc_val.isEmpty()){
                     System.out.println("pumasok sa empty");
                    socCell.setCellValue(0.00D);  
   
                 }else{
                    if(String.valueOf(socVal) == ""){
                        System.out.println("no value");
                     socCell.setCellValue(0.00D);  
                     }else{
                         System.out.println("with value" );
                     socCell.setCellValue(socVal.getNumericCellValue());
                     }
                      
                 }
                 
            }
         
 
            //SIXTH OUTPUT STREAM
            FileOutputStream bsp_nonfinlia_output_file =new FileOutputStream(new File(current+"\\output\\TB-SOLO-NONFIN_"+dateString+".xlsm"));
            System.out.println("LOC : " + current+"\\output\\OBO-SOLO-SOCSI"+dateString+".xls");
            System.out.println("REPORT WORKL BOOK" + bsp_socsie_excel_template);
            //write changes
            bsp_nonfinliab_excel_template.write(bsp_nonfinlia_output_file);
            //close the stream
            bsp_nonfinlia_output_file.close(); 
        }
        catch (Exception e)
        {
            
        }
    }
    //14th
     private  void fnRBSOLOFINLIAB()
     {
         try
         {   
            String dateString = SDF.format( jCalReportCutOff.getDate() );
             
            String BSP_socsie = CreateReport.getReportTemplate("TBSOLOSOCSIE");   
            String excelTemplate = CreateReport.getReportTemplate(rep_code);        
            String current = new java.io.File( "." ).getCanonicalPath();
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            
            XSSFWorkbook bsp_socsie_excel_template; // for xlsx/xlsm
            FileInputStream bsp_soc_input_document = new FileInputStream(new File(current+BSP_socsie));
            bsp_socsie_excel_template = new XSSFWorkbook(bsp_soc_input_document);
            XSSFSheet report_worksheet;
            
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            report_excel_template = new XSSFWorkbook(input_document);
            report_worksheet = report_excel_template.getSheet("WP-FRP-CP-TABLE");

            //START
             String BSP_finliab = CreateReport.getReportTemplate("TBSOLOFINLIAB");                  
            DataFormatter formatter = new DataFormatter();            
            FormulaEvaluator evaluator = report_excel_template.getCreationHelper().createFormulaEvaluator();
            //HSSFWorkbook report_excel_template;
             XSSFWorkbook bsp_finliab_excel_template; // for xlsx/xlsm
          //  Workbook bsp_cp_excel_template = WorkbookFactory.create(new File(current+BSP_controlprof));
            // convert it into a POI object
            //Read Excel document first
            FileInputStream bsp_finliab_input_document = new FileInputStream(new File(current+BSP_finliab));
            // convert it into a POI object
            bsp_finliab_excel_template = new XSSFWorkbook(bsp_finliab_input_document);
            
            System.out.println("soc Report Excell template" +  bsp_socsie_excel_template);
           // XSSFSheet socpre_report_worksheet;
           // Sheet bsp_cp_report_worksheet;
            XSSFSheet finliabpre_report_worksheet;
            XSSFSheet finliab_report_worksheet;
            finliabpre_report_worksheet = report_excel_template.getSheet("WP-FRP-FINLIAB-TABLE");
            for(int x = 1 ; x <= finliabpre_report_worksheet.getLastRowNum();x++){
                 Row soc_row = finliabpre_report_worksheet.getRow(x);
                 if (soc_row == null) {
                                     x = finliabpre_report_worksheet.getLastRowNum();
                                    // continue;
                            } 
                 System.out.println("socrow"  + soc_row.getCell(3) + "x: " + x + "number " + report_worksheet.getLastRowNum() );
                 sheetname = soc_row.getCell(2).toString();
                 System.out.println("SHEET" + soc_row.getCell(2).toString() +  "row" + soc_row.getCell(3) + "VALUE " + soc_row.getCell(5) + "number of " + x);
                 row = Integer.parseInt(formatter.formatCellValue(soc_row.getCell(3), evaluator));
                 System.out.println("dadaan ba dito");
                 col = Integer.parseInt(formatter.formatCellValue(soc_row.getCell(4), evaluator));
                 
                 Cell socVal = soc_row.getCell(5);
                  if (socVal == null){
                                socVal = soc_row.createCell(5);
                             }
                 String con_soc_val = String.valueOf(socVal.getNumericCellValue());
                 finliab_report_worksheet = bsp_finliab_excel_template.getSheet(sheetname.replace(".0",""));
                 System.out.println("worksheet" + finliab_report_worksheet);
                 Row xsocRow = finliab_report_worksheet.getRow(row);
                 if(xsocRow == null){
                     continue;
                 }      
                 Cell socCell = xsocRow.getCell(col);
                  if (socCell == null){
                                socCell = soc_row.createCell(col);
                             }          
  
                 if(con_soc_val.isEmpty()){
                     System.out.println("pumasok sa empty");
                    socCell.setCellValue(0.00D);  
   
                 }else{
                    if(String.valueOf(socVal) == ""){
                        System.out.println("no value");
                     socCell.setCellValue(0.00D);  
                     }else{
                         System.out.println("with value" );
                     socCell.setCellValue(socVal.getNumericCellValue());
                     }
                      
                 }
                 
            }
            //END
            
            bsp_finliab_input_document.close();
            FileOutputStream bsp_finlia_output_file =new FileOutputStream(new File(current+"\\output\\TB-SOLO-FINLIAB_"+dateString+".xlsm"));
            System.out.println("LOC : " + current+"\\output\\OBO-SOLO-SOCSI"+dateString+".xls");
            System.out.println("REPORT WORKL BOOK" + bsp_socsie_excel_template);
            //write changes
            bsp_finliab_excel_template.write(bsp_finlia_output_file);
            //close the stream
            bsp_finlia_output_file.close(); 
            //END
         }catch(Exception e)
         {
             
         }
     }
     //16th
     private  void fnRbSoloOtherAst()
     {
         
         try
         {
            String dateString = SDF.format( jCalReportCutOff.getDate() );
            String BSP_socsie = CreateReport.getReportTemplate("TBSOLOSOCSIE");   
            String excelTemplate = CreateReport.getReportTemplate(rep_code);        
            String current = new java.io.File( "." ).getCanonicalPath();
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            
            XSSFWorkbook bsp_socsie_excel_template; // for xlsx/xlsm
            FileInputStream bsp_soc_input_document = new FileInputStream(new File(current+BSP_socsie));
            bsp_socsie_excel_template = new XSSFWorkbook(bsp_soc_input_document);
            XSSFSheet report_worksheet;
            String BSP_othrast = CreateReport.getReportTemplate("TBSOLOOTHERAST");        
          
            //HSSFWorkbook report_excel_template;
             XSSFWorkbook bsp_othrast_excel_template; // for xlsx/xlsm
            //  Workbook bsp_cp_excel_template = WorkbookFactory.create(new File(current+BSP_controlprof));
            // convert it into a POI object
            //Read Excel document first
           
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            report_excel_template = new XSSFWorkbook(input_document);
            report_worksheet = report_excel_template.getSheet("WP-FRP-CP-TABLE");
            
            FileInputStream bsp_othrast_input_document = new FileInputStream(new File(current+BSP_othrast));
            // convert it into a POI object
            bsp_othrast_excel_template = new XSSFWorkbook(bsp_othrast_input_document);
            
            System.out.println("soc Report Excell template" +  bsp_socsie_excel_template);
           // XSSFSheet socpre_report_worksheet;
           // Sheet bsp_cp_report_worksheet;
            XSSFSheet othrastpre_report_worksheet;
            XSSFSheet othrastliab_report_worksheet;
            
            othrastpre_report_worksheet = report_excel_template.getSheet("WP-FRP-OTHRAST-TABLE");
            DataFormatter formatter = new DataFormatter();            
            FormulaEvaluator evaluator = report_excel_template.getCreationHelper().createFormulaEvaluator();
            for(int x = 1 ; x <= othrastpre_report_worksheet.getLastRowNum();x++){
                 Row soc_row = othrastpre_report_worksheet.getRow(x);
                 if (soc_row == null) {
                                     x = othrastpre_report_worksheet.getLastRowNum();
                                    // continue;
                            } 
                 System.out.println("socrow"  + soc_row.getCell(3) + "x: " + x + "number " + report_worksheet.getLastRowNum() );
                 sheetname = soc_row.getCell(2).toString();
                 System.out.println("SHEET" + soc_row.getCell(2).toString() +  "row" + soc_row.getCell(3) + "VALUE " + soc_row.getCell(5) + "number of " + x);
                 row = Integer.parseInt(formatter.formatCellValue(soc_row.getCell(3), evaluator));
                 System.out.println("dadaan ba dito");
                 col = Integer.parseInt(formatter.formatCellValue(soc_row.getCell(4), evaluator));
                 
                 Cell socVal = soc_row.getCell(5);
                  if (socVal == null){
                                socVal = soc_row.createCell(5);
                             }
                 String con_soc_val = String.valueOf(socVal.getNumericCellValue());
                 othrastliab_report_worksheet = bsp_othrast_excel_template.getSheet(sheetname.replace(".0",""));
                 System.out.println("worksheet" + othrastliab_report_worksheet);
                 Row xsocRow = othrastliab_report_worksheet.getRow(row);
                 if(xsocRow == null){
                     continue;
                 }      
                 Cell socCell = xsocRow.getCell(8);
                  if (socCell == null){
                                socCell = soc_row.createCell(8);
                             }          
  
                 if(con_soc_val.isEmpty()){
                     System.out.println("pumasok sa empty");
                    socCell.setCellValue(0.00D);  
   
                 }else{
                    if(String.valueOf(socVal) == ""){
                        System.out.println("no value");
                     socCell.setCellValue(0.00D);  
                     }else{
                         System.out.println("with value" );
                     socCell.setCellValue(socVal.getNumericCellValue());
                     }
                      
                 }
                 
            }
         
            bsp_othrast_input_document.close();
            FileOutputStream bsp_othrast_output_file =new FileOutputStream(new File(current+"\\output\\TB-SOLO-OTHERAST_"+dateString+".xlsm"));
            System.out.println("LOC : " + current+"\\output\\OBO-SOLO-SOCSI"+dateString+".xls");
            System.out.println("REPORT WORKL BOOK" + bsp_socsie_excel_template);
            //write changes
            bsp_othrast_excel_template.write(bsp_othrast_output_file);
            //close the stream
            bsp_othrast_output_file.close(); 
            //END
         }
         
         catch (Exception e)
         {
             
         }
     }
     //17th
     private  void fnRBSoloCoce()
     {
         try
         {
             
            String dateString = SDF.format( jCalReportCutOff.getDate() );
            String current = new java.io.File( "." ).getCanonicalPath();
            String BSP_coce = CreateReport.getReportTemplate("TBSOLOCOCE");        
          
            String BSP_socsie = CreateReport.getReportTemplate("TBSOLOSOCSIE");   
            XSSFWorkbook bsp_socsie_excel_template; // for xlsx/xlsm
            FileInputStream bsp_soc_input_document = new FileInputStream(new File(current+BSP_socsie));
            bsp_socsie_excel_template = new XSSFWorkbook(bsp_soc_input_document);
            
            String excelTemplate = CreateReport.getReportTemplate(rep_code);    
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            report_excel_template = new XSSFWorkbook(input_document);
            
            XSSFSheet report_worksheet;
            report_worksheet = report_excel_template.getSheet("WP-FRP-CP-TABLE");
            DataFormatter formatter = new DataFormatter();
            FormulaEvaluator evaluator = report_excel_template.getCreationHelper().createFormulaEvaluator();
            
            //HSSFWorkbook report_excel_template;
             XSSFWorkbook bsp_coce_excel_template; // for xlsx/xlsm
          //  Workbook bsp_cp_excel_template = WorkbookFactory.create(new File(current+BSP_controlprof));
            // convert it into a POI object
            //Read Excel document first
           
            FileInputStream bsp_coce_input_document = new FileInputStream(new File(current+BSP_coce));
            // convert it into a POI object
            bsp_coce_excel_template = new XSSFWorkbook(bsp_coce_input_document);
            
            System.out.println("soc Report Excell template" +  bsp_socsie_excel_template);
           // XSSFSheet socpre_report_worksheet;
           // Sheet bsp_cp_report_worksheet;
            XSSFSheet cocepre_report_worksheet;
            XSSFSheet coce_report_worksheet;
            cocepre_report_worksheet = report_excel_template.getSheet("WP-FRP-COCE-TABLE");
            for(int x = 1 ; x <= cocepre_report_worksheet.getLastRowNum();x++){
                 Row soc_row = cocepre_report_worksheet.getRow(x);
                 if (soc_row == null) {
                                     x = cocepre_report_worksheet.getLastRowNum();
                                     continue;
                            } 
                 System.out.println("socrow"  + soc_row.getCell(3) + "x: " + x + "number " + report_worksheet.getLastRowNum() );
                 System.out.println("#### excel" + soc_row.getCell(1));
                 System.out.println("#### shgeet"+ soc_row.getCell(2));
                 System.out.println("#### row"+ soc_row.getCell(3));
                 System.out.println("#### col"+ soc_row.getCell(4));
                 System.out.println("#### description"+ soc_row.getCell(5));
                 
                 sheetname = soc_row.getCell(2).toString();
                 System.out.println("SHEET" + soc_row.getCell(2).toString() +  "row" + soc_row.getCell(3) + "VALUE " + soc_row.getCell(5) + "number of " + x);
                 Cell c = soc_row.getCell(3);
                 if(c == null || c.getCellType() == Cell.CELL_TYPE_BLANK){  
              
                 }else{
                         row = Integer.parseInt(formatter.formatCellValue(soc_row.getCell(3), evaluator));
                        System.out.println("dadaan ba dito");
                        col = Integer.parseInt(formatter.formatCellValue(soc_row.getCell(4), evaluator));

                        Cell socVal = soc_row.getCell(5);
                         if (socVal == null){
                                       socVal = soc_row.createCell(5);
                                    }
                        String con_soc_val = String.valueOf(socVal.getNumericCellValue());
                        coce_report_worksheet = bsp_coce_excel_template.getSheet(sheetname.replace(".0",""));
                        System.out.println("worksheet" + coce_report_worksheet);
                        Row xsocRow = coce_report_worksheet.getRow(row);
                        if(xsocRow == null){
                            continue;
                        }      
                        Cell socCell = xsocRow.getCell(col);
                         if (socCell == null){
                                       socCell = soc_row.createCell(8);
                                    }          

                        if(con_soc_val.isEmpty()){
                            System.out.println("pumasok sa empty");
                           socCell.setCellValue(0.00D);  

                        }else{
                           if(String.valueOf(socVal) == ""){
                               System.out.println("no value");
                            socCell.setCellValue(0.00D);  
                            }else{
                                System.out.println("with value" );
                            socCell.setCellValue(socVal.getNumericCellValue());
                            }

                        }
                 }
                
                 
            }
         
           // bsp_coce_excel_template.close();
            FileOutputStream bsp_coce_output_file =new FileOutputStream(new File(current+"\\output\\TB-SOLO-COCE_"+dateString+".xlsm"));  // OUTPUT STREAM!!!!!
            System.out.println("LOC : " + current+"\\output\\OBO-SOLO-SOCSI"+dateString+".xls");
            System.out.println("REPORT WORKL BOOK" + bsp_socsie_excel_template);
            //write changes
            bsp_coce_excel_template.write(bsp_coce_output_file);
            //close the stream
            bsp_coce_output_file.close();
            
            //END
         }
         catch(Exception e)
         {
             
         }
     }
     //18th
     private  void fnRBSoloBorrow()
     {
         try
         {
             
            String dateString = SDF.format( jCalReportCutOff.getDate() );
            
            String current = new java.io.File( "." ).getCanonicalPath();
            String BSP_coce = CreateReport.getReportTemplate("TBSOLOCOCE");        
          
            String BSP_socsie = CreateReport.getReportTemplate("TBSOLOSOCSIE");   
            XSSFWorkbook bsp_socsie_excel_template; // for xlsx/xlsm
            FileInputStream bsp_soc_input_document = new FileInputStream(new File(current+BSP_socsie));
            bsp_socsie_excel_template = new XSSFWorkbook(bsp_soc_input_document);
            
            String excelTemplate = CreateReport.getReportTemplate(rep_code);    
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            report_excel_template = new XSSFWorkbook(input_document);
            
            XSSFSheet report_worksheet;
            report_worksheet = report_excel_template.getSheet("WP-FRP-CP-TABLE");
            DataFormatter formatter = new DataFormatter();
            FormulaEvaluator evaluator = report_excel_template.getCreationHelper().createFormulaEvaluator();
            //START
//            //WP-FRP-BORROW-TABLE
            String BSP_borrow = CreateReport.getReportTemplate("TBSOLOBORROW");        
          
            //HSSFWorkbook report_excel_template;
             XSSFWorkbook bsp_borrow_excel_template; // for xlsx/xlsm
          //  Workbook bsp_cp_excel_template = WorkbookFactory.create(new File(current+BSP_controlprof));
            // convert it into a POI object
            //Read Excel document first
           
            FileInputStream bsp_borrow_input_document = new FileInputStream(new File(current+BSP_borrow));
            // convert it into a POI object
            bsp_borrow_excel_template = new XSSFWorkbook(bsp_borrow_input_document);
            
            System.out.println("soc Report Excell template" +  bsp_socsie_excel_template);
           // XSSFSheet socpre_report_worksheet;
           // Sheet bsp_cp_report_worksheet;
            XSSFSheet borrowpre_report_worksheet;
            XSSFSheet borrow_report_worksheet;
            borrowpre_report_worksheet = report_excel_template.getSheet("WP-FRP-BORROW-TABLE");
            for(int x = 1 ; x <= borrowpre_report_worksheet.getLastRowNum();x++){
                 Row soc_row = borrowpre_report_worksheet.getRow(x);
                 if (soc_row == null) {
                                     x = borrowpre_report_worksheet.getLastRowNum();
                                    continue;
                            } 
                 System.out.println("socrow"  + soc_row.getCell(3) + "x: " + x + "number " + report_worksheet.getLastRowNum() );
                 sheetname = soc_row.getCell(2).toString();
                 System.out.println("SHEET" + soc_row.getCell(2).toString() +  "row" + soc_row.getCell(3) + "VALUE " + soc_row.getCell(5) + "number of " + x);
                 if(soc_row.getCell(3) != null){
                      row = Integer.parseInt(formatter.formatCellValue(soc_row.getCell(3), evaluator));
                        System.out.println("dadaan ba dito");
                        col = Integer.parseInt(formatter.formatCellValue(soc_row.getCell(4), evaluator));
                            
                          System.out.println("#############################362018");
                 System.out.println("sheetname" + sheetname);
                 System.out.println("row " + row + "on row ex" + soc_row.getCell(3));
                 System.out.println("col " + col + "on col ex" + soc_row.getCell(4));
                 System.out.println("val " + soc_row.getCell(5));
                        
                        
                        Cell socVal = soc_row.getCell(5);
                         if (socVal == null){
                                       socVal = soc_row.createCell(5);
                                    }
                        String con_soc_val = String.valueOf(socVal.getNumericCellValue());
                        borrow_report_worksheet = bsp_borrow_excel_template.getSheet(sheetname.replace(".0",""));
                        System.out.println("worksheet" + borrow_report_worksheet);
                        Row xsocRow = borrow_report_worksheet.getRow(row);
                        if(xsocRow == null){
                            continue;
                        }      
                        Cell socCell = xsocRow.getCell(col);
                         if (socCell == null){
                                       socCell = soc_row.createCell(col);
                                    }          

                        if(con_soc_val.isEmpty()){
                          
                           socCell.setCellValue(0.00D);  

                        }else{
                           if(String.valueOf(socVal) == ""){
                               System.out.println("no value");
                            socCell.setCellValue(0.00D);  
                            }else{
                                System.out.println("with value" );
                            socCell.setCellValue(socVal.getNumericCellValue());
                            }

                        }
                 }
               
                 
            }
         
            //bsp_borrow_excel_template.close();
            FileOutputStream bsp_borrow_output_file =new FileOutputStream(new File(current+"\\output\\TB-SOLO-BORROW_"+dateString+".xlsm"));
            System.out.println("LOC : " + current+"\\output\\OBO-SOLO-SOCSI"+dateString+".xls");
            System.out.println("REPORT WORKL BOOK" + bsp_socsie_excel_template);
            //write changes
            bsp_borrow_excel_template.write(bsp_borrow_output_file);
            //close the stream
            bsp_borrow_output_file.close();
            
         }catch(Exception e)
         {
             
         }
     }
     //19th
     private  void fnRBSoloCNTingNT()
     {
         try
         {
             
            String dateString = SDF.format( jCalReportCutOff.getDate() );
            String current = new java.io.File( "." ).getCanonicalPath();
            String BSP_coce = CreateReport.getReportTemplate("TBSOLOCOCE");        
          
            String BSP_socsie = CreateReport.getReportTemplate("TBSOLOSOCSIE");   
            XSSFWorkbook bsp_socsie_excel_template; // for xlsx/xlsm
            FileInputStream bsp_soc_input_document = new FileInputStream(new File(current+BSP_socsie));
            bsp_socsie_excel_template = new XSSFWorkbook(bsp_soc_input_document);
            
            String excelTemplate = CreateReport.getReportTemplate(rep_code);    
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            report_excel_template = new XSSFWorkbook(input_document);
            
            XSSFSheet report_worksheet;
            report_worksheet = report_excel_template.getSheet("WP-FRP-CP-TABLE");
            DataFormatter formatter = new DataFormatter();
            FormulaEvaluator evaluator = report_excel_template.getCreationHelper().createFormulaEvaluator();
            //START
            //WP-FRP-CNTINGNT
            String BSP_cnting = CreateReport.getReportTemplate("TBSOLOCNTINGNT");        
          
            //HSSFWorkbook report_excel_template;
             XSSFWorkbook bsp_contigent_excel_template; // for xlsx/xlsm
          //  Workbook bsp_cp_excel_template = WorkbookFactory.create(new File(current+BSP_controlprof));
            // convert it into a POI object
            //Read Excel document first
           
            FileInputStream bsp_contigent_input_document = new FileInputStream(new File(current+BSP_cnting));
            // convert it into a POI object
            bsp_contigent_excel_template = new XSSFWorkbook(bsp_contigent_input_document);
            
            System.out.println("soc Report Excell template" +  bsp_socsie_excel_template);
           // XSSFSheet socpre_report_worksheet;
           // Sheet bsp_cp_report_worksheet;
            XSSFSheet contigentpre_report_worksheet;
            XSSFSheet contigent_report_worksheet;
            contigentpre_report_worksheet = report_excel_template.getSheet("WP-FRP-CNTINGNT-TABLE");
            for(int x = 1 ; x <= contigentpre_report_worksheet.getLastRowNum();x++){
                 Row soc_row = contigentpre_report_worksheet.getRow(x);
                 if (soc_row == null) {
                                     x = contigentpre_report_worksheet.getLastRowNum();
                                    continue;
                            } 
                 System.out.println("socrow"  + soc_row.getCell(3) + "x: " + x + "number " + report_worksheet.getLastRowNum() );
                 sheetname = soc_row.getCell(2).toString();
                 System.out.println("SHEET" + soc_row.getCell(2).toString() +  "row" + soc_row.getCell(3) + "VALUE " + soc_row.getCell(5) + "number of " + x);
                 if(soc_row.getCell(3) != null){
                      row = Integer.parseInt(formatter.formatCellValue(soc_row.getCell(3), evaluator));
                        System.out.println("dadaan ba dito");
                        col = Integer.parseInt(formatter.formatCellValue(soc_row.getCell(4), evaluator));

                        Cell socVal = soc_row.getCell(5);
                         if (socVal == null){
                                       socVal = soc_row.createCell(5);
                                    }
                        String con_soc_val = String.valueOf(socVal.getNumericCellValue());
                        contigent_report_worksheet = bsp_contigent_excel_template.getSheet(sheetname.replace(".0",""));
                        System.out.println("worksheet" + contigent_report_worksheet);
                        Row xsocRow = contigent_report_worksheet.getRow(row);
                        if(xsocRow == null){
                            continue;
                        }      
                        Cell socCell = xsocRow.getCell(col);
                         if (socCell == null){
                                       socCell = soc_row.createCell(col);
                                    }          

                        if(con_soc_val.isEmpty()){
                            System.out.println("pumasok sa empty");
                           socCell.setCellValue(0.00D);  

                        }else{
                           if(String.valueOf(socVal) == ""){
                               System.out.println("no value");
                            socCell.setCellValue(0.00D);  
                            }else{
                                System.out.println("with value" );
                            socCell.setCellValue(socVal.getNumericCellValue());
                            }

                        }
                 }
                 
                
                 
            }
         
        //    bsp_contigent_excel_template.close();
            FileOutputStream bsp_contigent_output_file =new FileOutputStream(new File(current+"\\output\\TB-SOLO-CNTINGNT_"+dateString+".xlsm"));
            System.out.println("LOC : " + current+"\\output\\OBO-SOLO-SOCSI"+dateString+".xls");
            System.out.println("REPORT WORKL BOOK" + bsp_socsie_excel_template);
            //write changes
            bsp_contigent_excel_template.write(bsp_contigent_output_file);
            //close the stream
            bsp_contigent_output_file.close();
          
       //END
         }catch(Exception e)
         {
             
         }
     }
     //20th
     private  void fnRBSoloFinAsset()
     {
         try
         {
            String dateString = SDF.format( jCalReportCutOff.getDate() );
            String current = new java.io.File( "." ).getCanonicalPath();
            
            String excelTemplate = CreateReport.getReportTemplate(rep_code);    
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            report_excel_template = new XSSFWorkbook(input_document);
            
            
            XSSFSheet contigentpre_report_worksheet;             
            contigentpre_report_worksheet = report_excel_template.getSheet("WP-FRP-CNTINGNT-TABLE");
            
            XSSFSheet report_worksheet;
            report_worksheet = report_excel_template.getSheet("WP-FRP-CP-TABLE");
            DataFormatter formatter = new DataFormatter();
            FormulaEvaluator evaluator = report_excel_template.getCreationHelper().createFormulaEvaluator();
             //RB-SOLO-FINASSET
            String BSP_finasset = CreateReport.getReportTemplate("TBSOLOFINASSET");   
            //HSSFWorkbook report_excel_template;
            XSSFWorkbook bsp_finasset_excel_template; // for xlsx/xlsm
            //Read Excel document first
            FileInputStream bsp_finasset_input_document = new FileInputStream(new File(current+BSP_finasset));
            bsp_finasset_excel_template = new XSSFWorkbook(bsp_finasset_input_document);
            System.out.println("soc Report Excell template" +  bsp_finasset_excel_template);
            // Sheet bsp_cp_report_worksheet;
            XSSFSheet finassetpre_report_worksheet;
            XSSFSheet finasset_report_worksheet;

            finassetpre_report_worksheet = report_excel_template.getSheet("WP-FRP-FINASSET-TABLE");
                 for(int x = 1 ; x <= finassetpre_report_worksheet.getLastRowNum();x++){
                      Row ph_row3 = finassetpre_report_worksheet.getRow(x);
                      if (ph_row3 == null) {
                                          x = contigentpre_report_worksheet.getLastRowNum();
                                         continue;
                                 } 
                      System.out.println("socrow"  + ph_row3.getCell(3) + "x: " + x + "number " + report_worksheet.getLastRowNum() );
                      sheetname = ph_row3.getCell(2).toString();
                      System.out.println("SHEET" + ph_row3.getCell(2).toString() +  "row" + ph_row3.getCell(3) + "VALUE " + ph_row3.getCell(5) + "number of " + x);
                      if(ph_row3.getCell(3) != null){
                           row = Integer.parseInt(formatter.formatCellValue(ph_row3.getCell(3), evaluator));
                             System.out.println("dadaan ba dito");
                             col = Integer.parseInt(formatter.formatCellValue(ph_row3.getCell(4), evaluator));

                             Cell socVal = ph_row3.getCell(5);
                              if (socVal == null){
                                            socVal = ph_row3.createCell(5);
                                         }
                             String con_soc_val = String.valueOf(socVal.getNumericCellValue());
                             finasset_report_worksheet = bsp_finasset_excel_template.getSheet(sheetname.replace(".0",""));
                             System.out.println("worksheet" + finasset_report_worksheet);
                             Row xsocRow = finasset_report_worksheet.getRow(row);
                             if(xsocRow == null){
                                 continue;
                             }      
                             Cell socCell = xsocRow.getCell(col);
                              if (socCell == null){
                                            socCell = ph_row3.createCell(col);
                                         }          

                             if(con_soc_val.isEmpty()){
                                 System.out.println("pumasok sa empty");
                                socCell.setCellValue(0.00D);  

                             }else{
                                if(String.valueOf(socVal) == ""){
                                    System.out.println("no value");
                                 socCell.setCellValue(0.00D);  
                                 }else{
                                     System.out.println("with value" );
                                 socCell.setCellValue(socVal.getNumericCellValue());
                                 }

                             }
                      }



                 }

             //    bsp_contigent_excel_template.close();
                 FileOutputStream bsp_finasset_output_file =new FileOutputStream(new File(current+"\\output\\TB-SOLO-FINASSET_"+dateString+".xlsm"));
                 System.out.println("LOC : " + current+"\\output\\OBO-SOLO-SOCSI"+dateString+".xls");
                 System.out.println("REPORT WORKL BOOK" + bsp_finasset_output_file);
                 //write changes
                 bsp_finasset_excel_template.write(bsp_finasset_output_file);
                 //close the stream
                 bsp_finasset_output_file.close();
            //END
            //END
         }catch(Exception e)
         {
             
         }
     }
     //21st
     private  void fnRbSoloSieAcct()
     {
            String dateString = SDF.format( jCalReportCutOff.getDate() );
         try
         {
            String current = new java.io.File( "." ).getCanonicalPath();
            
            String excelTemplate = CreateReport.getReportTemplate(rep_code);    
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            report_excel_template = new XSSFWorkbook(input_document);
            
            
            XSSFSheet contigentpre_report_worksheet;             
            contigentpre_report_worksheet = report_excel_template.getSheet("WP-FRP-CNTINGNT-TABLE");
            
            XSSFSheet report_worksheet;
            report_worksheet = report_excel_template.getSheet("WP-FRP-CP-TABLE");
            DataFormatter formatter = new DataFormatter();
            FormulaEvaluator evaluator = report_excel_template.getCreationHelper().createFormulaEvaluator();
            //WP-FRP-SIEACCT-TABLE
            //START
            String BSP_sieacct = CreateReport.getReportTemplate("TBSOLOSIEACCT");   
            //HSSFWorkbook report_excel_template;
            XSSFWorkbook bsp_sieacct_excel_template; // for xlsx/xlsm
            //Read Excel document first
            FileInputStream bsp_sieacct_input_document = new FileInputStream(new File(current+BSP_sieacct));
            bsp_sieacct_excel_template = new XSSFWorkbook(bsp_sieacct_input_document);
 
            // Sheet bsp_cp_report_worksheet;
            XSSFSheet sieacctpre_report_worksheet;
            XSSFSheet sieacct_report_worksheet;

            sieacctpre_report_worksheet = report_excel_template.getSheet("WP-FRP-SIEACCT-TABLE");
                 for(int x = 1 ; x <= sieacctpre_report_worksheet.getLastRowNum();x++){
                      Row ph_row3 = sieacctpre_report_worksheet.getRow(x);
                      if (ph_row3 == null) {
                                          x = sieacctpre_report_worksheet.getLastRowNum();
                                         continue;
                                 } 

                      sheetname = ph_row3.getCell(2).toString();
                      System.out.println("SHEET" + ph_row3.getCell(2).toString() +  "row" + ph_row3.getCell(3) + "VALUE " + ph_row3.getCell(5) + "number of " + x);
                      if(ph_row3.getCell(3) != null){
                           row = Integer.parseInt(formatter.formatCellValue(ph_row3.getCell(3), evaluator));
                             System.out.println("dadaan ba dito");
                             col = Integer.parseInt(formatter.formatCellValue(ph_row3.getCell(4), evaluator));

                             Cell socVal = ph_row3.getCell(5);
                              if (socVal == null){
                                            socVal = ph_row3.createCell(5);
                                         }
                             String con_soc_val = String.valueOf(socVal.getNumericCellValue());
                             sieacct_report_worksheet = bsp_sieacct_excel_template.getSheet(sheetname.replace(".0",""));
                             System.out.println("worksheet" + sieacct_report_worksheet);
                             Row xsocRow = sieacct_report_worksheet.getRow(row);
                             if(xsocRow == null){
                                 continue;
                             }      
                             Cell socCell = xsocRow.getCell(col);
                              if (socCell == null){
                                            socCell = ph_row3.createCell(col);
                                         }          

                             if(con_soc_val.isEmpty()){
                                 System.out.println("pumasok sa empty");
                                socCell.setCellValue(0.00D);  

                             }else{
                                if(String.valueOf(socVal) == ""){
                                    System.out.println("no value");
                                 socCell.setCellValue(0.00D);  
                                 }else{
                                     System.out.println("with value" );
                                 socCell.setCellValue(socVal.getNumericCellValue());
                                 }

                             }
                      }



                 }

             //    bsp_contigent_excel_template.close();
                 FileOutputStream bsp_sieacct_output_file =new FileOutputStream(new File(current+"\\output\\TB-SOLO-SIEACCT_"+dateString+".xlsm"));
                 System.out.println("LOC : " + current+"\\output\\OBO-SOLO-SOCSI"+dateString+".xls");
                 System.out.println("REPORT WORKL BOOK" + bsp_sieacct_output_file);
                 //write changes
                 bsp_sieacct_excel_template.write(bsp_sieacct_output_file);
                 //close the stream
                 bsp_sieacct_excel_template.close();
            //ENDS
         }
         
         catch (Exception e)
         {
             
         }
     }
     //22nd
     private  void fnPhase3(){         
            String dateString = SDF.format( jCalReportCutOff.getDate() );
        String sqlstr = "";
        Integer xrow = 1;   
         try
         {
                         //PHASE 3
        //DEBLIAB NUMBER OF DEPOSITOR
        //START
        //Excell declaration 
            
            
            
            rep_code = "FRPWORKFILE02";
            String excelTemplatePhase3 = CreateReport.getReportTemplate(rep_code);        
            String currentPhase3 = new java.io.File( "." ).getCanonicalPath();
            
            String current = new java.io.File( "." ).getCanonicalPath();
            String excelTemplate = CreateReport.getReportTemplate(rep_code);   
            
            XSSFWorkbook report_excel_template; // for xlsx/xlsm
            FileInputStream input_document = new FileInputStream(new File(current+excelTemplate));
            report_excel_template = new XSSFWorkbook(input_document);
            XSSFSheet report_worksheet;                        

            
            DataFormatter formatter = new DataFormatter();
            FormulaEvaluator xevaluator = report_excel_template.getCreationHelper().createFormulaEvaluator();
            xevaluator.setIgnoreMissingWorkbooks(true);
           
             report_worksheet = report_excel_template.getSheet("WP-FRP-CP-TABLE");
            Connection connph3 = ConnectionManager.getConnection();
            Statement stph3 = connph3.createStatement();
            
            //HSSFWorkbook report_excel_template;
            XSSFWorkbook report_excel_template_phase3; // for xlsx/xlsm
            // convert it into a POI object
            //Read Excel document first
             System.out.println("sai pogi " + currentPhase3+excelTemplatePhase3);
            FileInputStream input_document_phase3 = new FileInputStream(new File(currentPhase3+excelTemplatePhase3));
            // convert it into a POI object
            report_excel_template_phase3 = new XSSFWorkbook(input_document_phase3);
            
            System.out.println("Report Excell template" +  currentPhase3+excelTemplatePhase3);
            //report_excel_template = new HSSFWorkbook(input_document); 
            //openExcelTemplate(excelTemplate,rep_code,refdate);

            xrow = 1;
            
            sqlstr = " with a as( ";
            sqlstr += " 	    select '1. Number of Savings Depositor'::text as description, ";
            sqlstr += " 	    (select count(*) from monthly_balance A inner join deposit B on A.account_no = B.acct_no ";
            sqlstr += "            where A.ref_date = '2019-06-30' and B.gL_link_id in (1,44,43) and A.closing_bal > 0.00) "; 
            sqlstr += "	), ";
            sqlstr += "     b as( ";
            sqlstr += "	   select '2. Number of Current Account Depositor'::text as description, ";
            sqlstr += "	   (select count(*) from monthly_balance A inner join deposit B on A.account_no = B.acct_no ";
            sqlstr += "           where A.ref_date = '2019-06-30' and B.gL_link_id in (45) and A.closing_bal > 0.00) ";
            sqlstr += "	), ";
            sqlstr += "     c as( ";
            sqlstr += "	   select '3. Number of TD Depositor'::text as description, ";
            sqlstr += "	   (select count(*) from monthly_balance A inner join deposit B on A.account_no = B.acct_no ";
            sqlstr += "           where A.ref_date = '2019-06-30' and B.gL_link_id in(2) and A.closing_bal > 0.00) ";
            sqlstr += "	) ";
            sqlstr += " select * ";
            sqlstr += " from a ";
            sqlstr += " UNION ALL ";
            sqlstr += " select * ";
            sqlstr += " from b ";
            sqlstr += " UNION ALL ";
            sqlstr += " select * ";
            sqlstr += " from c ";
            sqlstr += "order by description ";          

            System.out.println("SQL STR " + sqlstr);
            
             ResultSet rsph3 = stph3.executeQuery(sqlstr);
             if(!rsph3.isBeforeFirst()){
                 System.out.println("NO VALUE");
                 XSSFSheet report_worksheet_ph3;
                   report_worksheet_ph3 = report_excel_template_phase3.getSheet("depnum");
                   System.out.println("row value" + report_worksheet_ph3.getLastRowNum());


                    for (int x =1; x <=  report_worksheet_ph3.getLastRowNum(); x++){
                                 Row row = report_worksheet_ph3.getRow(x);   
                                   for(int y=1;y<3;y++){
                                   System.out.println("row : " + x + "col :" + y);
                                   System.out.println("CELL CLEANING");
                                      Cell cell = row.getCell(y);
                                       if (cell == null){
                                           cell = row.createCell(y);
                                       }
                                       if(y == 2){
                                       cell.setCellValue(" ");
                                       }

                                   }

                               }
             }else{
                 System.out.println("WITH DATA VALUE");
                 
             while (rsph3.next()){
                 System.out.println( "***DEPNUM***");
                 System.out.println( "COL 0" + rsph3.getString(1));
                 System.out.println( "COL 1" + rsph3.getString(2));
               
                 
                 
                 XSSFSheet report_worksheet_ph3;
                 
                 report_worksheet_ph3 = report_excel_template_phase3.getSheet("depnum");
              
                //HSSFSheet report_worksheet = report_excel_template.getSheetAt(0);
                // declare a Cell object
                 System.out.println("Report Counter Pass:" + report_worksheet_ph3);
                System.out.println("xrow " + xrow);  
                 System.out.println(xrow);
                 //START
                          System.out.println("BEFORE ERRROR" + report_worksheet_ph3.getRow(xrow));
                          System.out.println("Legth" +report_worksheet_ph3.getLastRowNum() );
                          Row row = report_worksheet_ph3.getRow(xrow); 
                          System.out.println("ERRO HERE" + row);
                             if (row == null) {
                                     // No entries in this row
                                     // Handle empty
                                    // continue;
                                     row = report_worksheet_ph3.createRow(xrow); 
                                  }   
                          System.out.println("row is null372018" + row.toString());
                          for(int y=1;y<3;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                       Cell cell = row.getCell(y);
                                        if (cell == null){
                                            cell = row.createCell(y);
                                        }
                                        try{
                                            if(y < 2){
                                                cell.setCellValue(String.valueOf(rsph3.getString(y)));
                                                }else{
                                   //null 

                                                    System.out.println("i > 3 :" + rsph3.getString(y));
                                                    if(rsph3.getString(y) == null || Double.parseDouble(rsph3.getString(y)) == 0){
                                                        
                                                        cell.setCellValue(0.00D);
                                                    }else{
                                                        System.out.println("rs.is not null");

                                                        cell.setCellValue(Double.parseDouble(rsph3.getString(y)));
                                                    }
                            
                                             }
                                         }catch(POIXMLException ex){
                                            //  JOptionPane.showMessageDialog(this, ex.getMessage());

                                          }catch(NullPointerException ex){
                                            //  JOptionPane.showMessageDialog(this, ex.getMessage());

                                          }                       
                                    
                           }                                    
                    xrow += 1;
                 //END
             }                 
             }

             
             stph3.close();
             //DEFLIAB SIZE
             //START
              
              Statement st1ph3 = connph3.createStatement();
              String xsqlstr = depsizeQuery(dateString);
              ResultSet rs1ph3 = st1ph3.executeQuery(xsqlstr);
             if(!rs1ph3.isBeforeFirst()){
                 System.out.println("NO VALUE");
                 XSSFSheet report_worksheet_ph3;
                   report_worksheet_ph3 = report_excel_template_phase3.getSheet("depsize" );
                   System.out.println("row value" + report_worksheet_ph3.getLastRowNum());


                    for (int x =1; x <=  report_worksheet_ph3.getLastRowNum(); x++){
                                 Row row = report_worksheet_ph3.getRow(x);   
                                   for(int y=1;y<9;y++){
                                   System.out.println("row : " + x + "col :" + y);
                                   System.out.println("CELL CLEANING");
                                      Cell cell = row.getCell(y);
                                       if (cell == null){
                                           cell = row.createCell(y);
                                       }
                                       
                                       cell.setCellValue(" ");
                                       

                                   }

                               }
             }else{
                 System.out.println("WITH DATA VALUE");
                 xrow = 1;
             while (rs1ph3.next()){
                 //System.out.println( "COL 0" + rs1ph3.getString(0));
                 System.out.println("***DEPSIZE***");
                 System.out.println( "COL 1" + rs1ph3.getString(1));
                 System.out.println( "COL 2" + rs1ph3.getString(2));
                 System.out.println( "COL 3" + rs1ph3.getString(3));
                 System.out.println( "COL 4" + rs1ph3.getString(4));
                 System.out.println( "COL 5" + rs1ph3.getString(5));
                 System.out.println( "COL 6" + rs1ph3.getString(6));
                 System.out.println( "COL 7" + rs1ph3.getString(7));   
                 
                 XSSFSheet report_worksheet_ph3;
                 report_worksheet_ph3 = report_excel_template_phase3.getSheet("depsize");
                 
                //HSSFSheet report_worksheet = report_excel_template.getSheetAt(0);
                // declare a Cell object
                 System.out.println("Report Counter Pass:" + report_worksheet_ph3);
                 System.out.println("xrow " + xrow);  
                 System.out.println(xrow);
                 //START
                 
                          Row row = report_worksheet_ph3.getRow(xrow);  
                           if (row == null) {
                                     // No entries in this row
                                     // Handle empty
                                    // continue;
                                     row = report_worksheet_ph3.createRow(xrow); 
                                  }   
                          for(int y=1;y<8;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                       Cell cell = row.getCell(y);
                                        if (cell == null){
                                            cell = row.createCell(y);
                                        }
                                        try{
                                            if(y < 2){
                                                cell.setCellValue(String.valueOf(rs1ph3.getString(y)));
                                                }else{
                                   //null 

                                                    System.out.println("i > 3 :" + rs1ph3.getString(y));
                                                    if(rs1ph3.getString(y) == null || Double.parseDouble(rs1ph3.getString(y)) == 0){
                                                        
                                                        cell.setCellValue(0.00D);
                                                    }else{
                                                        System.out.println("rs.is not null");

                                                        cell.setCellValue(Double.parseDouble(rs1ph3.getString(y)));
                                                    }
                            
                                             }
                                         }catch(POIXMLException ex){
                                            //  JOptionPane.showMessageDialog(this, ex.getMessage());

                                          }catch(NullPointerException ex){
                                            //  JOptionPane.showMessageDialog(this, ex.getMessage());

                                          }                       
                                    
                           }                                    
                    xrow += 1;
                 //END
             }                 
             }
             st1ph3.close();
             //depresident
             //START
                Statement st2ph3 = connph3.createStatement();
                
            sqlstr = " with X as ( ";
            sqlstr += " select C.id, round(sum(case when A.gl_link_id in (45) then D.closing_bal else 0 end),2) as ca, ";
            sqlstr += " round(sum(case when A.gl_link_id in (1,44,43) then D.closing_bal else 0 end),2) as sv, ";
            sqlstr += " round(sum(case when A.gl_link_id in (2) then D.closing_bal else 0 end),2) as td ";
            sqlstr += " from monthly_balance D ";
            sqlstr += " inner join deposit A on A.acct_no = D.account_no ";
            sqlstr += " inner join customer B on A.customer_id = B.id ";
            sqlstr += " inner join resident_type C on B.customer_code1_id = C.id ";
            sqlstr += " where D.account_status in (2,3,4,5,6,7) and D.ref_date = '"+dateString+"' ";
            sqlstr += " group by C.id ";
            sqlstr += " order by C.id ";
            sqlstr += " ) ";
            sqlstr += " select A.id, A.description, X.ca, X.sv, X.td ";
            sqlstr += " from resident_type A ";
            sqlstr += " left outer join X on A.id = X.id ";

              ResultSet rs2ph3 = st2ph3.executeQuery(sqlstr);
              if(!rs2ph3.isBeforeFirst()){
                 System.out.println("NO VALUE");
                 XSSFSheet report_worksheet_ph3;
                   report_worksheet_ph3 = report_excel_template_phase3.getSheet("depresident" );
                   System.out.println("row value" + report_worksheet_ph3.getLastRowNum());


                    for (int x =1; x <=  report_worksheet_ph3.getLastRowNum(); x++){
                                 Row row = report_worksheet_ph3.getRow(x);   
                                   for(int y=1;y<6;y++){
                                   System.out.println("row : " + x + "col :" + y);
                                   System.out.println("CELL CLEANING");
                                      Cell cell = row.getCell(y);
                                       if (cell == null){
                                           cell = row.createCell(y);
                                       }
                                       
                                       cell.setCellValue(" ");
                                       

                                   }

                               }
             }else{
                 System.out.println("WITH DATA VALUE");
                 xrow = 1;
             while (rs2ph3.next()){
                 //System.out.println( "COL 0" + rs1ph3.getString(0));
                 System.out.println("***DEPRESIDENT***");
                 System.out.println( "COL 1" + rs2ph3.getString(1));
                 System.out.println( "COL 2" + rs2ph3.getString(2));
                 System.out.println( "COL 3" + rs2ph3.getString(3));
                 System.out.println( "COL 4" + rs2ph3.getString(4));
               
                 
                 XSSFSheet report_worksheet_ph3;
                 report_worksheet_ph3 = report_excel_template_phase3.getSheet("depresident");
                 
                //HSSFSheet report_worksheet = report_excel_template.getSheetAt(0);
                // declare a Cell object
                 System.out.println("Report Counter Pass:" + report_worksheet_ph3);
                 System.out.println("xrow " + xrow);  
                 System.out.println(xrow);
                 //START
                 
                          Row row = report_worksheet_ph3.getRow(xrow);  
                         if (row == null) {
                                     // No entries in this row
                                     // Handle empty
                                    // continue;
                                     row = report_worksheet_ph3.createRow(xrow); 
                                  }   
                          System.out.println("col1 "+ rs2ph3.getString(1));
                          System.out.println("col2 "+ rs2ph3.getString(2));
                          System.out.println("col3 "+ rs2ph3.getString(3));
                          System.out.println("col4 "+ rs2ph3.getString(4));
                          System.out.println("col4 "+ rs2ph3.getString(5));
                          for(int y=1;y<6;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                       Cell cell = row.getCell(y-1);
                                        if (cell == null){
                                            cell = row.createCell(y-1);
                                        }
                                        try{
                                            System.out.println("luuuuh" + rs2ph3.getString(y));
                                            if(y == 2 ){
                                                cell.setCellValue(String.valueOf(rs2ph3.getString(y)));
                                                }else{
                                   //null 

                                                    System.out.println("i > 3 :" + rs2ph3.getString(y));
                                                    if(rs2ph3.getString(y) == null || Double.parseDouble(rs2ph3.getString(y)) == 0){
                                                        
                                                        cell.setCellValue(0.00D);
                                                    }else{
                                                        System.out.println("rs.is not null");

                                                        cell.setCellValue(Double.parseDouble(rs2ph3.getString(y)));
                                                    }
                            
                                             }
                                         }catch(POIXMLException ex){
                                            //  JOptionPane.showMessageDialog(this, ex.getMessage());

                                          }catch(NullPointerException ex){
                                            //  JOptionPane.showMessageDialog(this, ex.getMessage());

                                          }                       
                                    
                           }                                    
                    xrow += 1;
                 //END
             }                 
             }
              st2ph3.close();
             //END
             //depterm
             //START
              Statement st3ph3 = connph3.createStatement();
              
            sqlstr ="select '1. Short Term' as line, ";
            sqlstr +="round(sum(case when A.gl_link_id in (45) then B.closing_bal else 0 end),2) as ca, ";
            sqlstr +="round(sum(case when A.gl_link_id in (1,44,43) then B.closing_bal else 0 end),2) as sv, ";
            sqlstr +="round(sum(case when A.gl_link_id in (2) and A.fixed_deposit_term_scheme_id in (1,2,3,4,5) then B.closing_bal else 0 end),2) as td ";
            sqlstr +="from monthly_balance B ";
            sqlstr +="inner join deposit A on A.acct_no = B.account_no ";
            sqlstr +="left outer join fixed_deposit_term_scheme C on A.fixed_deposit_term_scheme_id = C.id ";
            sqlstr +="where B.account_status in (2,3,4,5,6,7) and B.ref_date = '"+dateString+"' ";
            sqlstr +="union ";
            sqlstr +="select '2. Medium Term' as line, ";
            sqlstr +="round(sum(case when A.gl_link_id in (45) then 0 else 0 end),2) as ca, ";
            sqlstr +="round(sum(case when A.gl_link_id in (1,44,43) then 0 else 0 end),2) as sv, ";
            sqlstr +="round(sum(case when A.gl_link_id in (2) and A.fixed_deposit_term_scheme_id in (6,7) ";
            sqlstr +="then B.closing_bal else 0 end),2) as td ";
            sqlstr +="from monthly_balance B ";
            sqlstr +="inner join deposit A on A.acct_no = B.account_no ";
            sqlstr +="left outer join fixed_deposit_term_scheme C on A.fixed_deposit_term_scheme_id = C.id ";
            sqlstr +="where B.account_status in (2,3,4,5,6,7) and B.ref_date = '"+dateString+"' ";
            sqlstr +="union ";
            sqlstr +="select '3. Long Term' as line, ";
            sqlstr +="round(sum(case when A.gl_link_id in (45) then 0 else 0 end),2) as ca, ";
            sqlstr +="round(sum(case when A.gl_link_id in (1,44,43) then 0 else 0 end),2) as sv, ";
            sqlstr +="round(sum(case when A.gl_link_id in (2) and A.fixed_deposit_term_scheme_id in (8) then B.closing_bal else 0 end),2) as td ";
            sqlstr +="from monthly_balance B ";
            sqlstr +="inner join deposit A on A.acct_no = B.account_no ";
            sqlstr +="left outer join fixed_deposit_term_scheme C on A.fixed_deposit_term_scheme_id = C.id ";
            sqlstr +="where B.account_status in (2,3,4,5,6,7) and B.ref_date = '"+dateString+"' ";
            sqlstr +="order by line ";      
                            
            ResultSet rs3ph3 = st3ph3.executeQuery(sqlstr);
              if(!rs3ph3.isBeforeFirst()){
                 System.out.println("NO VALUE");
                 XSSFSheet report_worksheet_ph3;
                   report_worksheet_ph3 = report_excel_template_phase3.getSheet("depterm" );
                   System.out.println("row value" + report_worksheet_ph3.getLastRowNum());


                    for (int x =1; x <=  report_worksheet_ph3.getLastRowNum(); x++){
                                 Row row = report_worksheet_ph3.getRow(x);   
                                   for(int y=1;y<5;y++){
                                   System.out.println("row : " + x + "col :" + y);
                                   System.out.println("CELL CLEANING");
                                      Cell cell = row.getCell(y);
                                       if (cell == null){
                                           cell = row.createCell(y);
                                       }
                                       
                                       cell.setCellValue(" ");
                                       

                                   }

                               }
             }else{
                 System.out.println("WITH DATA VALUE");
                 xrow = 1;
             while (rs3ph3.next()){
                 //System.out.println( "COL 0" + rs1ph3.getString(0));
                 System.out.println( "***DEPTERM***");
                 System.out.println( "COL 1" + rs3ph3.getString(1));
                 System.out.println( "COL 2" + rs3ph3.getString(2));
                 System.out.println( "COL 3" + rs3ph3.getString(3));
                
                 
                 XSSFSheet report_worksheet_ph3;
                 report_worksheet_ph3 = report_excel_template_phase3.getSheet("depterm");
                 
                //HSSFSheet report_worksheet = report_excel_template.getSheetAt(0);
                // declare a Cell object
                 System.out.println("Report Counter Pass:" + report_worksheet_ph3);
                 System.out.println("xrow " + xrow);  
                 System.out.println(xrow);
                 //START
                 
                          Row row = report_worksheet_ph3.getRow(xrow);  
                         if (row == null) {
                                     // No entries in this row
                                     // Handle empty
                                    // continue;
                                     row = report_worksheet_ph3.createRow(xrow); 
                                  }   
                          
                          System.out.println("col1 "+ rs3ph3.getString(1));
                          System.out.println("col2 "+ rs3ph3.getString(2));
                          System.out.println("col3 "+ rs3ph3.getString(3));
                      
                          for(int y=1;y<5;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                       Cell cell = row.getCell(y);
                                        if (cell == null){
                                            cell = row.createCell(y);
                                        }
                                        try{
                                            System.out.println("luuuuh" + rs3ph3.getString(y));
                                            if(y == 1 ){
                                                cell.setCellValue(String.valueOf(rs3ph3.getString(y)));
                                                }else{
                                   //null 

                                                    System.out.println("i > 3 :" + rs3ph3.getString(y));
                                                    if(rs3ph3.getString(y) == null || Double.parseDouble(rs3ph3.getString(y)) == 0){
                                                        
                                                        cell.setCellValue(0.00D);
                                                    }else{
                                                        System.out.println("rs.is not null");

                                                        cell.setCellValue(Double.parseDouble(rs3ph3.getString(y)));
                                                    }
                            
                                             }
                                         }catch(POIXMLException ex){
                                            //  JOptionPane.showMessageDialog(this, ex.getMessage());

                                          }catch(NullPointerException ex){
                                            //  JOptionPane.showMessageDialog(this, ex.getMessage());

                                          }                       
                                    
                           }                                    
                    xrow += 1;
                 //END
             }                 
             }
              st3ph3.close();
             //END
             //taxable and non-taxable summary
             //START
              Statement st4ph3 = connph3.createStatement();
              
              sqlstr = " with X as ( ";
              sqlstr += " select C.id,";
              sqlstr += " round(sum(case when A.gl_link_id in (45) then B.closing_bal else 0 end),2) as ca, ";
              sqlstr += " round(sum(case when A.gl_link_id in (1,44,43) then B.closing_bal else 0 end),2) as sv, ";
              sqlstr += " round(sum(case when A.gl_link_id in (2) then B.closing_bal else 0 end),2) as td ";
              sqlstr += " from monthly_balance B ";
              sqlstr += " inner join deposit A on A.acct_no = B.account_no ";
              sqlstr += " inner join deposit_tax_fee_and_charge_scheme C on A.deposit_tax_charge_scheme_id =  C.id ";
              sqlstr += " where B.account_status in (2,3,4,5,6,7) and B.ref_date = '"+dateString+"' ";
              sqlstr += " group by C.id ";
              sqlstr += " ) ";
              sqlstr += " select A.id, A.description, X.ca, X.sv, X.td ";
              sqlstr += " from deposit_tax_fee_and_charge_scheme A ";
              sqlstr += " left outer join X on A.id = X.id ";
              sqlstr += " where A.type_id = 1 ";
              sqlstr += " order by A.id ";

              ResultSet rs4ph3 = st4ph3.executeQuery(sqlstr);
              if(!rs4ph3.isBeforeFirst()){
                 System.out.println("NO VALUE");
                 XSSFSheet report_worksheet_ph3;
                   report_worksheet_ph3 = report_excel_template_phase3.getSheet("deptaxcode" );
                   System.out.println("row value" + report_worksheet_ph3.getLastRowNum());


                    for (int x =1; x <=  report_worksheet_ph3.getLastRowNum(); x++){
                                 Row row = report_worksheet_ph3.getRow(x);  
                                  if (row == null) {
                                     // No entries in this row
                                     // Handle empty
                                    // continue;
                                     row = report_worksheet_ph3.createRow(xrow); 
                                  }   
                                   for(int y=1;y<6;y++){
                                   System.out.println("row : " + x + "col :" + y);
                                   System.out.println("CELL CLEANING");
                                      Cell cell = row.getCell(y);
                                       if (cell == null){
                                           cell = row.createCell(y);
                                       }
                                       
                                       cell.setCellValue(" ");
                                       

                                   }

                               }
             }else{
                 System.out.println("WITH DATA VALUE");
                 xrow = 1;
             while (rs4ph3.next()){
                 //System.out.println( "COL 0" + rs1ph3.getString(0));
                 System.out.println( "***DEPTAX***");
                 System.out.println( "COL 1" + rs4ph3.getString(1));
                 System.out.println( "COL 2" + rs4ph3.getString(2));
                 System.out.println( "COL 3" + rs4ph3.getString(3));
                               
                 
                 XSSFSheet report_worksheet_ph3;
                 report_worksheet_ph3 = report_excel_template_phase3.getSheet("deptaxcode");
                 
                //HSSFSheet report_worksheet = report_excel_template.getSheetAt(0);
                // declare a Cell object
                 System.out.println("Report Counter Pass:" + report_worksheet_ph3);
                 System.out.println("xrow " + xrow);  
                 System.out.println(xrow);
                 //START
                 
                          Row row = report_worksheet_ph3.getRow(xrow);  
                          if (row == null) {
                                     // No entries in this row
                                     // Handle empty
                                    // continue;
                                     row = report_worksheet_ph3.createRow(xrow); 
                                  }   
                          
                          System.out.println("col1 "+ rs4ph3.getString(1));
                          System.out.println("col2 "+ rs4ph3.getString(2));
                          System.out.println("col3 "+ rs4ph3.getString(3));
                          
                          for(int y=1;y<6;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                       Cell cell = row.getCell(y-1);
                                        if (cell == null){
                                            cell = row.createCell(y-1);
                                        }
                                        try{
                                            System.out.println("luuuuh" + rs4ph3.getString(y));
                                            if(y == 2 ){
                                                cell.setCellValue(String.valueOf(rs4ph3.getString(y)));
                                                }else{
                                   //null 

                                                    System.out.println("i > 3 :" + rs4ph3.getString(y));
                                                    if(rs4ph3.getString(y) == null || Double.parseDouble(rs4ph3.getString(y)) == 0){
                                                        
                                                        cell.setCellValue(0.00D);
                                                    }else{
                                                        System.out.println("rs.is not null");

                                                        cell.setCellValue(Double.parseDouble(rs4ph3.getString(y)));
                                                    }
                            
                                             }
                                         }catch(POIXMLException ex){
                                            //  JOptionPane.showMessageDialog(this, ex.getMessage());

                                          }catch(NullPointerException ex){
                                            //  JOptionPane.showMessageDialog(this, ex.getMessage());

                                          }                       
                                    
                           }                                    
                    xrow += 1;
                 //END
             }                 
             }
              
              st4ph3.close();
             //END
             //START
             //dep_status
             Statement st5ph3 = connph3.createStatement();
             sqlstr = " with X as ( ";
               sqlstr += " select C.id, round(sum(case when A.gl_link_id in (45) then B.closing_bal else 0 end),2) as ca, ";
               sqlstr += " round(sum(case when A.gl_link_id in (1,44,43) then B.closing_bal else 0 end),2) as sv, ";
               sqlstr += " round(sum(case when A.gl_link_id in (2) then B.closing_bal else 0 end),2) as td ";
               sqlstr += " from monthly_balance B ";
               sqlstr += " inner join deposit A on A.acct_no = B.account_no ";
               sqlstr += " inner join Deposit_status C on B.account_status =  C.id ";
               sqlstr += " where B.account_status in (2,3,4,5,6) and B.ref_date = '"+dateString+"' ";
               sqlstr += " group by C.id) ";
               sqlstr += " select A.id, A.description, X.ca, X.sv, X.td ";
               sqlstr += " from deposit_status A ";
               sqlstr += " left outer join X on A.id = X.id ";
               sqlstr += " where A.id in (2,3,4,5) ";
               sqlstr += " order by A.id ";
               
               System.out.println("sqlstr GIEZEL: "+sqlstr);
             ResultSet rs5ph3 = st5ph3.executeQuery(sqlstr);
             if(!rs5ph3.isBeforeFirst()){
                 System.out.println("NO VALUE");
                 XSSFSheet report_worksheet_ph3;
                   report_worksheet_ph3 = report_excel_template_phase3.getSheet("depstatus" );
                   System.out.println("row value" + report_worksheet_ph3.getLastRowNum());


                    for (int x =1; x <=  report_worksheet_ph3.getLastRowNum(); x++){
                                 Row row = report_worksheet_ph3.getRow(x); 
                                 
                                 for(int y=1;y<6;y++){
                                   System.out.println("row : " + x + "col :" + y);
                                   System.out.println("CELL CLEANING");
                                      Cell cell = row.getCell(y);
                                       if (cell == null){
                                           cell = row.createCell(y);
                                       }
                                       
                                       cell.setCellValue(" ");
                                       

                                   }

                               }
             }else{
                 System.out.println("WITH DATA VALUE");
                 xrow = 1;
             while (rs5ph3.next()){
                 System.out.println("***DEPSTATUS***");
                 //System.out.println( "COL 0" + rs1ph3.getString(0));
                 System.out.println( "COL 1" + rs5ph3.getString(1));
                 System.out.println( "COL 2" + rs5ph3.getString(2));
                 System.out.println( "COL 3" + rs5ph3.getString(3));
                 System.out.println( "COL 4" + rs5ph3.getString(4));
                 
                 
                 XSSFSheet report_worksheet_ph3;
                 report_worksheet_ph3 = report_excel_template_phase3.getSheet("depstatus");
                 
                //HSSFSheet report_worksheet = report_excel_template.getSheetAt(0);
                // declare a Cell object
                 System.out.println("Report Counter Pass:" + report_worksheet_ph3);
                 System.out.println("xrow " + xrow);  
                 System.out.println(xrow);
                 //START
                 
                          Row row = report_worksheet_ph3.getRow(xrow);  
                        if (row == null) {
                                     // No entries in this row
                                     // Handle empty
                                    // continue;
                                     row = report_worksheet_ph3.createRow(xrow); 
                                  }    
                          
                  
                          for(int y=1;y<6;y++){
                                    System.out.println("row : " + xrow + "col :" + y);
                                    System.out.println("CELL CLEANING");
                                       Cell cell = row.getCell(y-1);
                                        if (cell == null){
                                            cell = row.createCell(y-1);
                                        }
                                        try{
                                            System.out.println("luuuuh" + rs5ph3.getString(y));
                                            if(y == 2 ){
                                                cell.setCellValue(String.valueOf(rs5ph3.getString(y)));
                                                }else{
                                   //null 

                                                    System.out.println("i > 3 :" + rs5ph3.getString(y));
                                                    if(rs5ph3.getString(y) == null || Double.parseDouble(rs5ph3.getString(y)) == 0){
                                                        
                                                        cell.setCellValue(0.00D);
                                                    }else{
                                                        System.out.println("rs.is not null");

                                                        cell.setCellValue(Double.parseDouble(rs5ph3.getString(y)));
                                                    }
                            
                                             }
                                         }catch(POIXMLException ex){
                                            //  JOptionPane.showMessageDialog(this, ex.getMessage());

                                          }catch(NullPointerException ex){
                                            //  JOptionPane.showMessageDialog(this, ex.getMessage());

                                          }                       
                                    
                           }                                    
                    xrow += 1;
                 //END
             }                 
             }
             
             st5ph3.close();
             //END
             System.out.println ("current+excelTemplate " + current+excelTemplate);
             FileOutputStream output_file_phase3 =new FileOutputStream(new File(currentPhase3+excelTemplatePhase3));
             //write changes
             report_excel_template_phase3.write(output_file_phase3);
             //close the stream
             output_file_phase3.close();
             
             System.out.println("dito yung erro");
            System.out.println("Excell template " + report_excel_template);
       //     XSSFFormulaEvaluator.evaluateAllFormulaCells(report_excel_template);
            FormulaEvaluator ph2xevaluator = report_excel_template_phase3.getCreationHelper().createFormulaEvaluator();
            ph2xevaluator.setIgnoreMissingWorkbooks(true);
            System.out.println("FORMULA" + xevaluator);
            for (Sheet sheet : report_excel_template_phase3){
                System.out.println("Sheet" + sheet);
                for(Row r : sheet){
                    for(Cell c: r ){
                        
                        if(c.getCellType() == Cell.CELL_TYPE_FORMULA){
                            ph2xevaluator.evaluateFormulaCell(c);
                        }
                    }
                  }
                }
       //END
      
       
       //END
       //PASS VALUE ON BSP TEMPLATE ON FS WORK FILE 2
       //START

       //START
       //DEPLIAB
       String BSP_depliab = CreateReport.getReportTemplate("TBSOLODEPLIAB");   
       //HSSFWorkbook report_excel_template;
       XSSFWorkbook bsp_depliab_excel_template; // for xlsx/xlsm
       
       //Read Excel document first
       FileInputStream bsp_depliab_input_document = new FileInputStream(new File(current+BSP_depliab));
       bsp_depliab_excel_template = new XSSFWorkbook(bsp_depliab_input_document);
       FormulaEvaluator evaluatorph3 = report_excel_template_phase3.getCreationHelper().createFormulaEvaluator();
   
       // Sheet bsp_cp_report_worksheet;
       XSSFSheet depliabpre_report_worksheet;
       XSSFSheet depliab_report_worksheet;
       
       depliabpre_report_worksheet = report_excel_template_phase3.getSheet("WP-FRP-DEPLIAB-TABLE");
            for(int x = 1 ; x <= depliabpre_report_worksheet.getLastRowNum();x++){
                 Row ph_row3 = depliabpre_report_worksheet.getRow(x);
                 if (ph_row3 == null) {
                                     x = depliabpre_report_worksheet.getLastRowNum();
                                    continue;
                            } 
               
                 sheetname = ph_row3.getCell(2).toString();
                 System.out.println("SHEET" + ph_row3.getCell(2).toString() +  "row" + ph_row3.getCell(3) + "VALUE " + ph_row3.getCell(5) + "number of " + x);
                 if(ph_row3.getCell(3) != null){
                      row = Integer.parseInt(formatter.formatCellValue(ph_row3.getCell(3), evaluatorph3));
                        System.out.println("dadaan ba dito");
                        col = Integer.parseInt(formatter.formatCellValue(ph_row3.getCell(4), evaluatorph3));

                        Cell socVal = ph_row3.getCell(5);
                         if (socVal == null){
                                       socVal = ph_row3.createCell(5);
                                    }
                        String con_soc_val = String.valueOf(socVal.getNumericCellValue());
                        depliab_report_worksheet = bsp_depliab_excel_template.getSheet(sheetname.replace(".0",""));
                        System.out.println("worksheet" + depliab_report_worksheet);
                        Row xsocRow = depliab_report_worksheet.getRow(row);
                        if(xsocRow == null){
                            continue;
                        }      
                        Cell socCell = xsocRow.getCell(col);
                         if (socCell == null){
                                       socCell = ph_row3.createCell(col);
                                    }          

                        if(con_soc_val.isEmpty()){
                            System.out.println("pumasok sa empty");
                           socCell.setCellValue(0.00D);  

                        }else{
                           if(String.valueOf(socVal) == ""){
                               System.out.println("no value");
                            socCell.setCellValue(0.00D);  
                            }else{
                                System.out.println("with value" );
                            socCell.setCellValue(socVal.getNumericCellValue());
                            }

                        }
                 }
                 
                
                 
            }
         
        //    bsp_contigent_excel_template.close();
            FileOutputStream bsp_depliab_output_file =new FileOutputStream(new File(current+"\\output\\TB-SOLO-DEPLIAB_"+dateString+".xlsm"));
            System.out.println("LOC : " + current+"\\output\\OBO-SOLO-SOCSI"+dateString+".xls");
            System.out.println("REPORT WORKL BOOK" + bsp_depliab_output_file);
            //write changes
            bsp_depliab_excel_template.write(bsp_depliab_output_file);
            //close the stream
            bsp_depliab_output_file.close();
            //END

         }
         catch(Exception e)
         {
             System.out.println("ERROR DEPLIAB " + e);
         }
     }
     //23rd
     private  void fnRBSoloLoans()
     {
         try{
            //START INSERTION FOR 11a1,11b1,11c1
//             String str = "";
//             String dateString = SDF.format( jCalReportCutOff.getDate() );
//                     //############################################
//                      //                11A1
//                      //#############################################
//                    str = " ";
//                    
//                    String current = new java.io.File( "." ).getCanonicalPath();
//                    String excel_input = CreateReport.getReportTemplate("FRPWORKFILELOAN");
//                    XSSFWorkbook report_excel_template;
//                    FileInputStream input_document = new FileInputStream(new File(current+excel_input));
//                    report_excel_template = new XSSFWorkbook(input_document);
//                    System.out.println("PATH " + current+excel_input);
//                    Integer xrow = 1,xcol = 1;
//                    Connection conn = ConnectionManager.getConnection();    
//                    Statement st = conn.createStatement();
//                    str = loanSched11A1(dateString);
//                    System.out.println("11A1" + str );
//                    ResultSet rs = st.executeQuery(str);
//                    if(!rs.isBeforeFirst()){
//                         XSSFSheet report_worksheet;
//                         report_worksheet = report_excel_template.getSheet("11A1");                     
//                      
//                         for (int x =1; x <=  report_worksheet.getLastRowNum(); x++){
//                                 Row row = report_worksheet.getRow(x);   
//                                   for(int y=1;y<4;y++){
//                                   System.out.println("row : " + x + "col :" + y);
//                                   System.out.println("CELL CLEANING");
//                                      Cell cell = row.getCell(y);
//                                       if (cell == null){
//                                           cell = row.createCell(y);
//                                       }
//                                       cell.setCellValue(" ");
//                                   }
//                          }                    
//                    }else{
//                        XSSFSheet report_worksheet;
//                        report_worksheet = report_excel_template.getSheet("11A1");
//                        
//                        while (rs.next()){
//                            J.setValue(1);
//                        
//                        System.out.println("############");
//                        System.out.println( "ID" + rs.getString(1));
//                        System.out.println( "ID2 " + rs.getString(2));
//                        System.out.println( "DESCRIPTION" + rs.getString(3));
//                        System.out.println( "Current" + rs.getString(4));
//                        System.out.println( "pdnynp" + rs.getString(5));
//                        System.out.println( "pdnp" + rs.getString(6));
//                        System.out.println( "lit" + rs.getString(7));
//                        System.out.println( "allowance" + rs.getString(8));  
//                        
//                        Row row = report_worksheet.getRow(xrow);  
//                        if (row == null) {
//                                     row = report_worksheet.createRow(xrow); 
//                                  } 
//                        
//                           for(int y=1;y<9;y++){
//                                    System.out.println("row : " + xrow + "col :" + y);
//                                    System.out.println("CELL CLEANING" + row.getCell(y));
//                                    
//                                       Cell cell = row.getCell(y);
//                                        if (cell == null){
//                                            cell = row.createCell(y);
//                                        }
//                                       
//                                            if(y < 4){
//                                                cell.setCellValue(String.valueOf(rs.getString(y)));
//                                                }else{
//                                   //null 
//
//                                                    System.out.println("i > 3 :" + rs.getString(y));
//                                                    if(rs.getString(y) == null || Double.parseDouble(rs.getString(y)) == 0){
//                                                        
//                                                        cell.setCellValue(0.00D);
//                                                    }else{
//                                                        System.out.println("rs.is not null");
//
//                                                        cell.setCellValue(Double.parseDouble(rs.getString(y)));
//                                                    }
//                            
//                                             }
//                                                        
//                                    
//                           }
//                        
//                        
//                        xrow++;
//                            
//                        }
//                    }
//                    //#######################################
//                    //             11B1 Schedule
//                    //#######################################
//                    
//                    
//                    Connection conn2 = ConnectionManager.getConnection();    
//                    Statement st2= conn2.createStatement();
//                    str = "";
//                    str = loanSched11B1(dateString);
//                    ResultSet rs2 = st2.executeQuery(str);
//                    if(!rs2.isBeforeFirst()){
//                         XSSFSheet report_worksheet;
//                         report_worksheet = report_excel_template.getSheet("11B1");
//                         
//                         
//                          for (int x =1; x <=  report_worksheet.getLastRowNum(); x++){
//                                 Row row = report_worksheet.getRow(x);   
//                                   for(int y=1;y<4;y++){
//                                   System.out.println("row : " + x + "col :" + y);
//                                   System.out.println("CELL CLEANING");
//                                      Cell cell = row.getCell(y);
//                                       if (cell == null){
//                                           cell = row.createCell(y);
//                                       }
//                                       cell.setCellValue(" ");
//
//                                   }
//
//                               }
//                          
//                    }else{
//                    
//                      XSSFSheet report_worksheet;
//                      report_worksheet = report_excel_template.getSheet("11B1");
//                      xrow = 1;
//                      while (rs2.next()){
//                      J.setValue(1);
//                        
//                        System.out.println("############");
//                        System.out.println( "ID" + rs2.getString(1));
//                        System.out.println( "ID2 " + rs2.getString(2));
//                        System.out.println( "DESCRIPTION" + rs2.getString(3));
//                        System.out.println( "Current" + rs2.getString(4));
//                        System.out.println( "pdnynp" + rs2.getString(5));
//                        System.out.println( "pdnp" + rs2.getString(6));
//                        System.out.println( "lit" + rs2.getString(7));
//                        System.out.println( "allowance" + rs2.getString(8));  
//                        
//                        Row row = report_worksheet.getRow(xrow);  
//                        if (row == null) {
//                                     row = report_worksheet.createRow(xrow); 
//                                  } 
//                        
//                           for(int y=1;y<9;y++){
//                                    System.out.println("row : " + xrow + "col :" + y);
//                                    System.out.println("CELL CLEANING" + row.getCell(y));
//                                    
//                                       Cell cell = row.getCell(y);
//                                        if (cell == null){
//                                            cell = row.createCell(y);
//                                        }
//                                       
//                                            if(y < 4){
//                                                cell.setCellValue(String.valueOf(rs2.getString(y)));
//                                                }else{
//                                   //null 
//
//                                                    System.out.println("i > 3 :" + rs2.getString(y));
//                                                    if(rs2.getString(y) == null || Double.parseDouble(rs2.getString(y)) == 0){
//                                                        
//                                                        cell.setCellValue(0.00D);
//                                                    }else{
//                                                        System.out.println("rs.is not null");
//
//                                                        cell.setCellValue(Double.parseDouble(rs2.getString(y)));
//                                                    }
//                            
//                                             }
//                                                        
//                                    
//                           }
//                        
//                        
//                        xrow++;
//                      }   
//                    }
//                    //#######################################
//                    //             11D1 Schedule
//                    //#######################################
//                    
//                    Connection conn3 = ConnectionManager.getConnection();    
//                    Statement st3= conn3.createStatement();
//                    str = "";
//                    str = loanSched11D1(dateString);
//                    ResultSet rs3 = st3.executeQuery(str);
//                    
//                    if(!rs3.isBeforeFirst()){
//                         XSSFSheet report_worksheet;
//                         report_worksheet = report_excel_template.getSheet("11B1");
//                         
//                         
//                          for (int x =1; x <=  report_worksheet.getLastRowNum(); x++){
//                                 Row row = report_worksheet.getRow(x);   
//                                   for(int y=1;y<4;y++){
//                                   System.out.println("row : " + x + "col :" + y);
//                                   System.out.println("CELL CLEANING");
//                                      Cell cell = row.getCell(y);
//                                       if (cell == null){
//                                           cell = row.createCell(y);
//                                       }
//                                       cell.setCellValue(" ");
//
//                                   }
//
//                               }
//                          
//                    }else{
//                    
//                      XSSFSheet report_worksheet;
//                      report_worksheet = report_excel_template.getSheet("11D1");
//                      xrow = 1;
//                      while (rs3.next()){
//                      J.setValue(1);
//                        
//                        System.out.println("############");
//                        System.out.println( "ID" + rs3.getString(1));
//                        System.out.println( "ID2 " + rs3.getString(2));
//                        System.out.println( "DESCRIPTION" + rs3.getString(3));
//                        System.out.println( "Current" + rs3.getString(4));
//                        System.out.println( "pdnynp" + rs3.getString(5));
//                        System.out.println( "pdnp" + rs3.getString(6));
//                        System.out.println( "lit" + rs3.getString(7));
//                        System.out.println( "allowance" + rs3.getString(8));  
//                        
//                        Row row = report_worksheet.getRow(xrow);  
//                        if (row == null) {
//                                     row = report_worksheet.createRow(xrow); 
//                                  } 
//                        
//                           for(int y=1;y<24;y++){
//                                    System.out.println("row : " + xrow + "col :" + y);
//                                    System.out.println("CELL CLEANING" + row.getCell(y));
//                                    
//                                       Cell cell = row.getCell(y);
//                                        if (cell == null){
//                                            cell = row.createCell(y);
//                                        }
//                                       
//                                            if(y == 1 || y == 3){
//                                                cell.setCellValue(String.valueOf(rs3.getString(y)));
//                                                }else{
//                                   //null 
//
//                                                    System.out.println("i > 3 :" + rs3.getString(y));
//                                                    if(rs3.getString(y) == null || Double.parseDouble(rs3.getString(y)) == 0){
//                                                        
//                                                        cell.setCellValue(0.00D);
//                                                    }else{
//                                                        System.out.println("rs.is not null");
//
//                                                        cell.setCellValue(Double.parseDouble(rs3.getString(y)));
//                                                    }
//                            
//                                             }
//                                                        
//                                    
//                           }
//                        
//                        
//                        xrow++;
//                      }   
//                    }
//                    FileOutputStream output_file = new FileOutputStream(new File(current+excel_input));
//                    report_excel_template.write(output_file);
//                    output_file.close();
//                    
//                   
//                    System.out.println("DONE");
             
             //END
             
             //Transfering DAta excell to excell
             //Start
             String dateString = SDF.format( jCalReportCutOff.getDate() );
            rep_code = "FRPWORKFILELN";
             
            String current = new java.io.File( "." ).getCanonicalPath(); 
            String excelTemplatePhase3 = CreateReport.getReportTemplate(rep_code);        
            String currentPhase3 = new java.io.File( "." ).getCanonicalPath();
            DataFormatter formatter = new DataFormatter();
            XSSFWorkbook report_excel_template_phase3;
             System.out.println("location " + currentPhase3+excelTemplatePhase3);
            FileInputStream input_document_phase3 = new FileInputStream(new File(currentPhase3+excelTemplatePhase3));
            // convert it into a POI object
            report_excel_template_phase3 = new XSSFWorkbook(input_document_phase3);
             System.out.println("report excel template" + report_excel_template_phase3);
           
//            FileOutputStream bsp_depliab_output_file =new FileOutputStream(new File(current+"\\output\\RB-SOLO-DEPLIAB_"+dateString+".xlsm"));
//            
             //START
            //WP-FRP-LOANS-TABLE
            //START
            String BSP_loans = CreateReport.getReportTemplate("TBSOLOLOANS");   
            //HSSFWorkbook report_excel_template;
            XSSFWorkbook bsp_loans_excel_template; // for xlsx/xlsm
            //Read Excel document first
             System.out.println(" drive" + current+BSP_loans );
            FileInputStream bsp_loans_input_document = new FileInputStream(new File(current+BSP_loans));
            bsp_loans_excel_template = new XSSFWorkbook(bsp_loans_input_document);
    
            
           
             FormulaEvaluator evaluatorph3 = report_excel_template_phase3.getCreationHelper().createFormulaEvaluator();
            // Sheet bsp_cp_report_worksheet;
            XSSFSheet loanspre_report_worksheet;
            XSSFSheet loans_report_worksheet;
             System.out.println("expcell wp frp " + report_excel_template_phase3);
            loanspre_report_worksheet = report_excel_template_phase3.getSheet("WP-FRP-LOANS-TABLE");
            
             System.out.println("HERE BEFORE");
            System.out.println("HERE here" + loanspre_report_worksheet.getLastRowNum());
                 for(int x = 1 ; x <= loanspre_report_worksheet.getLastRowNum();x++){
                     
                      Row ph_row3 = loanspre_report_worksheet.getRow(x);
                      if (ph_row3 == null) {
                                          x = loanspre_report_worksheet.getLastRowNum();
                                         continue;
                                 } 

                      sheetname = ph_row3.getCell(2).toString();
                      System.out.println("SHEET" + ph_row3.getCell(2).toString() +  "row" + ph_row3.getCell(3) + "VALUE " + ph_row3.getCell(5) + "number of " + x);
                      if(ph_row3.getCell(3) != null){
                           row = Integer.parseInt(formatter.formatCellValue(ph_row3.getCell(3), evaluatorph3));
                             System.out.println("dadaan ba dito");
                             col = Integer.parseInt(formatter.formatCellValue(ph_row3.getCell(4), evaluatorph3));

                             Cell socVal = ph_row3.getCell(5);
                              if (socVal == null){
                                            socVal = ph_row3.createCell(5);
                                         }
                             String con_soc_val = String.valueOf(socVal.getNumericCellValue());
                             loans_report_worksheet = bsp_loans_excel_template.getSheet(sheetname.replace(".0",""));
                             System.out.println("worksheet" + loans_report_worksheet);
                             Row xsocRow = loans_report_worksheet.getRow(row);
                             if(xsocRow == null){
                                 continue;
                             }      
                             Cell socCell = xsocRow.getCell(col);
                              if (socCell == null){
                                            socCell = ph_row3.createCell(col);
                                         }          

                             if(con_soc_val.isEmpty()){
                                 System.out.println("pumasok sa empty");
                                socCell.setCellValue(0.00D);  

                             }else{
                                if(String.valueOf(socVal) == ""){
                                    System.out.println("no value");
                                 socCell.setCellValue(0.00D);  
                                 }else{
                                     System.out.println("with value" );
                                 socCell.setCellValue(socVal.getNumericCellValue());
                                 }

                             }
                      }



                 }

             //    bsp_contigent_excel_template.close();
                 FileOutputStream bsp_loans_output_file =new FileOutputStream(new File(current+"\\output\\TB-SOLO-LOANS1_"+dateString+".xlsm"));
                 System.out.println("LOC : " + current+"\\output\\OBO-SOLO-SOCSI"+dateString+".xls");
                // System.out.println("REPORT WORKL BOOK" + bsp_depliab_output_file);
                 //write changes
                 bsp_loans_excel_template.write(bsp_loans_output_file);
                 //close the stream
                 bsp_loans_output_file.close();
                 System.out.println("check loan");
             
             //END
             
         }catch(Exception e)
         {
             System.out.println("ERROR LOAN" + e);
         }
     }
    private static String loanSched11B1(String dateString){
        
        String sqlstr = "";
        sqlstr +=" with A as (select 'A' as id, C.description,  ";
	sqlstr +=" sum(case when F.loan_performance_id_id = 1 then F.balance_amount -   ";
		sqlstr +=" case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as current,  ";
	sqlstr +=" sum(case when F.loan_performance_id_id = 2 then F.balance_amount -   ";
		sqlstr +=" case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end) as pdnynp,  ";
	sqlstr +=" sum(case when F.loan_performance_id_id = 3 then F.balance_amount -   ";
		sqlstr +=" case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end) as pdnp,  ";
	sqlstr +=" sum(case when F.loan_performance_id_id = 4 then F.balance_amount -   ";
		sqlstr +=" case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end) as lit,  ";
	sqlstr +=" sum(case when B.total_provision is null then 0 else B.total_provision end) as allowance  ";	
	sqlstr +=" from cfg_acct_gl_template C  ";
	sqlstr +=" left outer join  Loan A on C.id = A.gl_link_id  ";
	sqlstr +=" left outer join Loan_Loss_Provision_Detail B on B.loan_id = A.id  ";
	sqlstr +=" left outer join monthly_pointer_loan F on A.account_no = F.account_no and F.ref_date = '"+dateString+"'  ";
	sqlstr +=" where A.balance_amount > 0 and C.type = 6  ";
	sqlstr +=" group by C.description)  ";
	sqlstr +=" select 'A' as id, X.id as id2, X.description, A.current, A.pdnynp, A.pdnp, A.lit, A.allowance  ";
	sqlstr +=" from cfg_acct_gl_template X  ";
	sqlstr +=" left outer join A on A.description = X.description  ";
	sqlstr +=" where X.type = 6 and X.id in (38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60)  ";
	sqlstr +=" order by id, id2  ";
         System.out.println("query" + sqlstr);
         return sqlstr;
     }
    
     private static String loanSched11A1(String dateString){
     String sqlstr;
        sqlstr = "";
                    sqlstr += "with A as (select 'A' as id, C.description,  ";
            sqlstr += "sum(case when F.loan_performance_id_id = 1 then F.balance_amount -  ";
                    sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as current,  ";
            sqlstr += "sum(case when F.loan_performance_id_id = 2 then F.balance_amount -   ";
                    sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end) as pdnynp,  ";
            sqlstr += "sum(case when F.loan_performance_id_id = 3 then F.balance_amount -   ";
                    sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end) as pdnp,  ";
            sqlstr += "sum(case when F.loan_performance_id_id = 4 then F.balance_amount -   ";
                    sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end) as lit,  ";
            sqlstr += "sum(case when B.total_provision is null then 0 else B.total_provision end) as allowance  ";	
            sqlstr += "from cfg_acct_gl_template C  ";
            sqlstr += "left outer join  Loan A on C.id = A.gl_link_id  ";
            sqlstr += "left outer join Loan_Loss_Provision_Detail B on B.loan_id = A.id  ";
            sqlstr += "left outer join monthly_pointer_loan F on A.account_no = F.account_no and F.ref_date = '"+dateString+"'  ";
            sqlstr += "where A.balance_amount > 0 and C.type = 6  ";
            sqlstr += "group by C.description),  ";
            sqlstr += "B as (select 'B - DOSRI', D.description,  ";
            sqlstr += "sum(case when F.loan_performance_id_id = 1 then F.balance_amount -   ";
                    sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as current,  ";
            sqlstr += "sum(case when F.loan_performance_id_id = 2 then F.balance_amount -   ";
                    sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end) as pdnynp,  ";
            sqlstr += "sum(case when F.loan_performance_id_id = 3 then F.balance_amount -   ";
                    sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end) as pdnp,  ";
            sqlstr += "sum(case when F.loan_performance_id_id = 4 then F.balance_amount -   ";
                    sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end) as lit,  ";
            sqlstr += "sum(case when B.total_provision is null then 0 else B.total_provision end) as allowance  ";	
            sqlstr += "from loan_security D   ";
            sqlstr += "left outer join loan A on A.loan_Security_id = D.id  ";
            sqlstr += "left outer join Loan_Loss_Provision_Detail B on B.loan_id = A.id  ";
            sqlstr += "left outer join monthly_pointer_loan F on A.account_no = F.account_no and F.ref_date = '"+dateString+"'  ";
            sqlstr += "inner join customer C on A.customer_id = C.id  ";
            sqlstr += "where A.balance_amount > 0 and C.dosri_code_id <> 1  ";
            sqlstr += "group by D.description),   ";
            sqlstr += "C as (select 'C - NON-DOSRI', D.description,   ";
            sqlstr += "sum(case when F.loan_performance_id_id = 1 then F.balance_amount -  ";
                    sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as current,  ";
            sqlstr += "sum(case when F.loan_performance_id_id = 2 then F.balance_amount -   ";
                    sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end) as pdnynp,  ";
            sqlstr += "sum(case when F.loan_performance_id_id = 3 then F.balance_amount -   ";
                    sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end) as pdnp,  ";
            sqlstr += "sum(case when F.loan_performance_id_id = 4 then F.balance_amount -   ";
                    sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end) as lit,  ";
            sqlstr += "sum(case when B.total_provision is null then 0 else B.total_provision end) as allowance  ";	
            sqlstr += "from loan_security D   ";
            sqlstr += "left outer join loan A on A.loan_Security_id = D.id  ";
            sqlstr += "left outer join Loan_Loss_Provision_Detail B on B.loan_id = A.id  ";
            sqlstr += "left outer join customer C on A.customer_id = C.id  ";
            sqlstr += "left outer join monthly_pointer_loan F on A.account_no = F.account_no and F.ref_date = '"+dateString+"'  ";
            sqlstr += "where C.dosri_code_id = 1  ";
            sqlstr += "group by D.description)  ";
            sqlstr += "select 'A' as id, X.id as id2, X.description, A.current, A.pdnynp, A.pdnp, A.lit, A.allowance  ";
            sqlstr += "from cfg_acct_gl_template X  ";
            sqlstr += "left outer join A on A.description = X.description  ";
            sqlstr += "where X.type = 6  ";
            sqlstr += "union  ";
            sqlstr += "select 'B - DOSRI' as id, X.id, X.description, B.current, B.pdnynp, B.pdnp, B.lit, B.allowance  ";
            sqlstr += "from loan_security X  ";
            sqlstr += "left outer join B on B.description = X.description  ";
            sqlstr += "union  ";
            sqlstr += "select 'C - Non-DOSRI' as id, X.id, X.description, C.current, C.pdnynp, C.pdnp, C.lit, C.allowance  ";
            sqlstr += "from loan_security X  ";
            sqlstr += "left outer join C on C.description = X.description  ";
            sqlstr += "union   ";
            sqlstr += "select 'D', 999,'Allowance', sum(case when A.loan_performance_id_id = 1 then   ";
                    sqlstr += "case when B.total_provision is null then 0 else B.total_provision end else 0 end ) as current,  ";
            sqlstr += "sum(case when A.loan_performance_id_id = 2 then   ";
                    sqlstr += "case when B.total_provision is null then 0 else B.total_provision end else 0 end )as pdnynp,  ";
            sqlstr += "sum(case when A.loan_performance_id_id = 3 then   ";
                    sqlstr += "case when B.total_provision is null then 0 else B.total_provision end else 0 end ) as pdnp,  ";
            sqlstr += "sum(case when A.loan_performance_id_id = 4 then   ";
                    sqlstr += "case when B.total_provision is null then 0 else B.total_provision end else 0 end ) as lit,  ";
            sqlstr += "sum(case when B.total_provision is null then 0 else B.total_provision end) as allowance  ";
            sqlstr += "from loan A   ";
            sqlstr += "left outer join Loan_Loss_Provision_Detail B on B.loan_id = A.id  ";
            sqlstr += "order by id, id2  ";
     return sqlstr;
     }
     
     private static String loanSched11D1(String dateString){
          String sqlstr= "";
          
                    sqlstr += "with A as (select 'A' as id, C.description,   ";
          sqlstr += "sum(case when F.loan_project_id = 2 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as AgricultureForestryandFishing,  ";
          sqlstr += "sum(case when F.loan_project_id = 3 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as MiningAndQuarrying,  ";
          sqlstr += "sum(case when F.loan_project_id = 4 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as Manufacturing,  ";
          sqlstr += "sum(case when F.loan_project_id = 5 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as ElectricityGasSteam,  ";
          sqlstr += "sum(case when F.loan_project_id = 6 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as WaterSupplySewerageWaste,  ";
          sqlstr += "sum(case when F.loan_project_id = 7 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as Construction,  ";
          sqlstr += "sum(case when F.loan_project_id = 8 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as WholesaleAndRetailTrade,  ";
          sqlstr += "sum(case when F.loan_project_id = 9 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as AccomodationFood,  ";
          sqlstr += "sum(case when F.loan_project_id = 10 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as TransportationAndStorage,  ";
          sqlstr += "sum(case when F.loan_project_id = 11 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as InformationAndCommunication,  ";
          sqlstr += "sum(case when F.loan_project_id = 12 then F.balance_amount -  ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as Financial,  ";
          sqlstr += "sum(case when F.loan_project_id = 13 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as RealEstate,  ";
          sqlstr += "sum(case when F.loan_project_id = 14 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as ProfessionalScientific,  ";
          sqlstr += "sum(case when F.loan_project_id = 15 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as AdministrativeAndSupport,  ";
          sqlstr += "sum(case when F.loan_project_id = 16 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as PublicAdministration,  ";
          sqlstr += "sum(case when F.loan_project_id = 17 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as Education,  ";
          sqlstr += "sum(case when F.loan_project_id = 18 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as HumanHealth, ";
          sqlstr += "sum(case when F.loan_project_id = 19 then F.balance_amount -  ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as ArtsEntertainment,  ";
          sqlstr += "sum(case when F.loan_project_id = 20 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as OtherService,  ";
          sqlstr += "sum(case when F.loan_project_id = 21 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as ActivitiesHouseholds,  ";
          sqlstr += "sum(case when F.loan_project_id = 22 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as ActivitiesExtraTerritorial  ";	
          sqlstr += "from cfg_acct_gl_template C  ";
          sqlstr += "left outer join  Loan A on C.id = A.gl_link_id  ";
          sqlstr += "left outer join Loan_Loss_Provision_Detail B on B.loan_id = A.id  ";
          sqlstr += "left outer join monthly_pointer_loan F on A.account_no = F.account_no and F.ref_date = '"+dateString+"'  ";
          sqlstr += "where A.balance_amount > 0 and C.type = 6  ";
          sqlstr += "group by C.description),  ";
          sqlstr += "B as (select 'B', D.description,   ";
          sqlstr += "sum(case when F.loan_project_id = 2 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as AgricultureForestryandFishing,  ";
          sqlstr += "sum(case when F.loan_project_id = 3 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as MiningAndQuarrying,  ";
          sqlstr += "sum(case when F.loan_project_id = 4 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as Manufacturing,  ";
          sqlstr += "sum(case when F.loan_project_id = 5 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as ElectricityGasSteam,  ";
          sqlstr += "sum(case when F.loan_project_id = 6 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as WaterSupplySewerageWaste,  ";
          sqlstr += "sum(case when F.loan_project_id = 7 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as Construction,  ";
          sqlstr += "sum(case when F.loan_project_id = 8 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as WholesaleAndRetailTrade,  ";
          sqlstr += "sum(case when F.loan_project_id = 9 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as AccomodationFood,  ";
          sqlstr += "sum(case when F.loan_project_id = 10 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as TransportationAndStorage,  ";
          sqlstr += "sum(case when F.loan_project_id = 11 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as InformationAndCommunication,  ";
          sqlstr += "sum(case when F.loan_project_id = 12 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as Financial,  ";
          sqlstr += "sum(case when F.loan_project_id = 13 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as RealEstate,  ";
          sqlstr += "sum(case when F.loan_project_id = 14 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as ProfessionalScientific,  ";
          sqlstr += "sum(case when F.loan_project_id = 15 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as AdministrativeAndSupport,  ";
          sqlstr += "sum(case when F.loan_project_id = 16 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as PublicAdministration,  ";
          sqlstr += "sum(case when F.loan_project_id = 17 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as Education,  ";
          sqlstr += "sum(case when F.loan_project_id = 18 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as HumanHealth,  ";
          sqlstr += "sum(case when F.loan_project_id = 19 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as ArtsEntertainment,  ";
          sqlstr += "sum(case when F.loan_project_id = 20 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as OtherService,  ";
          sqlstr += "sum(case when F.loan_project_id = 21 then F.balance_amount -  ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as ActivitiesHouseholds,  ";
          sqlstr += "sum(case when F.loan_project_id = 22 then F.balance_amount -   ";
                  sqlstr += "case when B.uid_balance is null then 0 else B.uid_balance - B.loan_service_charge - B.other_deferred_credit end else 0 end ) as ActivitiesExtraTerritorial  ";		
          sqlstr += "from loan_performance_id D   ";
          sqlstr += "left outer join loan A on A.loan_performance_id_id = D.id  ";
          sqlstr += "left outer join Loan_Loss_Provision_Detail B on B.loan_id = A.id  ";
          sqlstr += "left outer join monthly_pointer_loan F on A.account_no = F.account_no and F.ref_date = '"+dateString+"'  ";
          sqlstr += "where A.balance_amount > 0   ";
          sqlstr += "group by D.description)  ";
          //-- main query
          sqlstr += "select 'A' as id, X.id as id2, X.description, A.AgricultureForestryandFishing, A.MiningAndQuarrying, A.ElectricityGasSteam,   ";
          sqlstr += "A.WaterSupplySewerageWaste, A.Construction, A.WholesaleAndRetailTrade,A.AccomodationFood, A.TransportationAndStorage,  ";
          sqlstr += "A.InformationAndCommunication,A.Financial, A.RealEstate, A.ProfessionalScientific, A.AdministrativeAndSupport,  ";
          sqlstr += "A.PublicAdministration, A.Education, A.HumanHealth, A.ArtsEntertainment, A.OtherService, A.ActivitiesHouseholds,  ";
          sqlstr += "A.ActivitiesExtraTerritorial  ";
          sqlstr += "from cfg_acct_gl_template X  ";
          sqlstr += "left outer join A on A.description = X.description  ";
          sqlstr += "where X.type = 6  ";
          sqlstr += "union  ";
          sqlstr += "select 'B' as id, X.id, X.description, B.AgricultureForestryandFishing, B.MiningAndQuarrying, B.ElectricityGasSteam,   ";
          sqlstr += "B.WaterSupplySewerageWaste, B.Construction, B.WholesaleAndRetailTrade,B.AccomodationFood, B.TransportationAndStorage,  ";
          sqlstr += "B.InformationAndCommunication,B.Financial, B.RealEstate, B.ProfessionalScientific, B.AdministrativeAndSupport,  ";
          sqlstr += "B.PublicAdministration, B.Education, B.HumanHealth, B.ArtsEntertainment, B.OtherService, B.ActivitiesHouseholds,  ";
          sqlstr += "B.ActivitiesExtraTerritorial  ";
          sqlstr += "from loan_performance_id X  ";
          sqlstr += "left outer join B on B.description = X.description  ";
          sqlstr += "order by id, id2  ";
          
          
          
          return sqlstr;
          }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JProgressBar J;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnGenerate;
    private org.freixas.jcalendar.JCalendarCombo jCalReportCutOff;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
