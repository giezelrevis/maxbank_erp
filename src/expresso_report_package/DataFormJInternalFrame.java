/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package expresso_report_package;

import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author User01
 */
public class DataFormJInternalFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form DataFormJInternalFrame
     */
    private static Integer dataformId;
    private static String rep_code;
    private static String sheet;
    private static Integer row;
    private static Integer col;
    private static String dataFunction;
    private static Integer currencyId;
    private static String currencyString;
    private static Boolean isAbsBol;
    private static String condition;
    private static Integer convertType;
    private static String forexRateField;
    
    public DataFormJInternalFrame() throws SQLException, IOException {
        initComponents();
        
        Connection conn = ConnectionManager.getConnection();
        Statement st = conn.createStatement();      
        String sql;
        
        sql = "select rep_code from report_template order by id";
        
        ResultSet rs = st.executeQuery(sql);
        while (rs.next())
        {
            this.cmbReportCode.addItem(rs.getString("rep_code"));
        }
        rs.close();
        
        sql = "select code from currency order by id";
        DefaultListModel<String> dlm_currency = new DefaultListModel<>();
        
        rs = st.executeQuery(sql);
        while (rs.next())
        {   String AddItem  = rs.getString("code");
            dlm_currency.addElement(AddItem);
            this.lstCurrency.setModel(dlm_currency);
        }
        rs.close();
        st.close();
        conn.close();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupForexCovertType = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtCondition = new javax.swing.JTextArea();
        lblFunction = new javax.swing.JLabel();
        cmbFunction = new javax.swing.JComboBox();
        lblCurrency = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cmbReportCode = new javax.swing.JComboBox();
        btnTestDataFormulation = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        chkisAbs = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        txtSheetName = new javax.swing.JTextField();
        btnSearchDataFormulation = new javax.swing.JButton();
        btnSaveDataFormulation = new javax.swing.JButton();
        btnDeleteDataFormulation = new javax.swing.JButton();
        btnEditDataFormulation = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        lblCondition = new javax.swing.JLabel();
        spnRowNo = new javax.swing.JSpinner();
        spnColumnNo = new javax.swing.JSpinner();
        radConvert1 = new javax.swing.JRadioButton();
        radConvert0 = new javax.swing.JRadioButton();
        radConvert2 = new javax.swing.JRadioButton();
        lblForexConvertType = new javax.swing.JLabel();
        cmbForexRateFiled = new javax.swing.JComboBox();
        lblForexRateField = new javax.swing.JLabel();
        lblAbsoluteValue = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstCurrency = new javax.swing.JList();
        radConvert3 = new javax.swing.JRadioButton();

        setClosable(true);
        setTitle("Report Data Formulation");
        setName("reportDataFormFrame"); // NOI18N

        txtCondition.setColumns(20);
        txtCondition.setRows(5);
        txtCondition.setEnabled(false);
        jScrollPane1.setViewportView(txtCondition);

        lblFunction.setText("Function");
        lblFunction.setEnabled(false);

        cmbFunction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "GL", "TSV", "CSV", "TCA", "CCA", "TFD", "CFD", "TDP", "CDP", "TLN", "CLN", "SP" }));
        cmbFunction.setEnabled(false);

        lblCurrency.setText("Currency");
        lblCurrency.setEnabled(false);

        jLabel3.setText("Row No.:");

        jLabel1.setText("Report Code:");

        btnTestDataFormulation.setText("Test Data Formulation");
        btnTestDataFormulation.setEnabled(false);
        btnTestDataFormulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestDataFormulationActionPerformed(evt);
            }
        });

        jLabel4.setText("Column No.:");

        chkisAbs.setSelected(true);
        chkisAbs.setText("Abs");
        chkisAbs.setEnabled(false);
        chkisAbs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkisAbsActionPerformed(evt);
            }
        });

        jLabel2.setText("Sheet:");

        btnSearchDataFormulation.setText("Search");
        btnSearchDataFormulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchDataFormulationActionPerformed(evt);
            }
        });

        btnSaveDataFormulation.setText("Save");
        btnSaveDataFormulation.setEnabled(false);
        btnSaveDataFormulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveDataFormulationActionPerformed(evt);
            }
        });

        btnDeleteDataFormulation.setText("Delete");
        btnDeleteDataFormulation.setEnabled(false);
        btnDeleteDataFormulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDataFormulationActionPerformed(evt);
            }
        });

        btnEditDataFormulation.setText("Edit");
        btnEditDataFormulation.setEnabled(false);
        btnEditDataFormulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditDataFormulationActionPerformed(evt);
            }
        });

        lblCondition.setText("Condition:");
        lblCondition.setEnabled(false);

        buttonGroupForexCovertType.add(radConvert1);
        radConvert1.setText("Covert to base rate");
        radConvert1.setToolTipText("");
        radConvert1.setContentAreaFilled(false);
        radConvert1.setEnabled(false);
        radConvert1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radConvert1ActionPerformed(evt);
            }
        });

        buttonGroupForexCovertType.add(radConvert0);
        radConvert0.setText("Do not convert");
        radConvert0.setContentAreaFilled(false);
        radConvert0.setEnabled(false);
        radConvert0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radConvert0ActionPerformed(evt);
            }
        });

        buttonGroupForexCovertType.add(radConvert2);
        radConvert2.setText("Convert to 2nd base rate");
        radConvert2.setContentAreaFilled(false);
        radConvert2.setEnabled(false);
        radConvert2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radConvert2ActionPerformed(evt);
            }
        });

        lblForexConvertType.setText("Forex Convertion");
        lblForexConvertType.setEnabled(false);

        cmbForexRateFiled.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FOREX Rate", "PDS Rate", "Historical Rate" }));
        cmbForexRateFiled.setEnabled(false);

        lblForexRateField.setText("Use Rate to Convert");
        lblForexRateField.setEnabled(false);

        lblAbsoluteValue.setText("Covert to Absolute Value");
        lblAbsoluteValue.setEnabled(false);

        lstCurrency.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstCurrency.setEnabled(false);
        jScrollPane3.setViewportView(lstCurrency);

        buttonGroupForexCovertType.add(radConvert3);
        radConvert3.setText("Convert to 2nd base rate then to base rate");
        radConvert3.setContentAreaFilled(false);
        radConvert3.setEnabled(false);
        radConvert3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radConvert3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(4, 4, 4)
                                .addComponent(cmbReportCode, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(267, 267, 267))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSheetName, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnColumnNo, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnRowNo, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnTestDataFormulation, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .addComponent(btnSearchDataFormulation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lblFunction)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbFunction, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lblCondition)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCurrency)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radConvert0)
                                    .addComponent(radConvert1)
                                    .addComponent(radConvert2)
                                    .addComponent(radConvert3)
                                    .addComponent(cmbForexRateFiled, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(66, 66, 66))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblForexConvertType)
                                    .addComponent(lblForexRateField)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblAbsoluteValue)
                                        .addGap(18, 18, 18)
                                        .addComponent(chkisAbs)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnEditDataFormulation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSaveDataFormulation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDeleteDataFormulation, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2, lblCondition, lblCurrency, lblFunction});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(cmbReportCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchDataFormulation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(jLabel2)
                                .addComponent(txtSheetName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnTestDataFormulation))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(jLabel4)
                                .addComponent(spnColumnNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFunction)
                            .addComponent(cmbFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCondition)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(jLabel3)
                        .addComponent(spnRowNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblForexConvertType)
                            .addComponent(radConvert0))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radConvert1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radConvert2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radConvert3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblForexRateField)
                            .addComponent(cmbForexRateFiled, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAbsoluteValue)
                            .addComponent(chkisAbs))
                        .addGap(23, 23, 23))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnEditDataFormulation)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSaveDataFormulation)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeleteDataFormulation))
                            .addComponent(lblCurrency)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chkisAbsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkisAbsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkisAbsActionPerformed

    private void btnTestDataFormulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestDataFormulationActionPerformed
        try {
            rep_code = this.cmbReportCode.getSelectedItem().toString();
            sheet = this.txtSheetName.getText();
            row = Integer.parseInt(this.spnRowNo.getValue().toString());
            col = Integer.parseInt(this.spnColumnNo.getValue().toString());
            dataFunction = this.cmbFunction.getSelectedItem().toString();
            //currencyId = this.cmbCurrencyCode.getSelectedIndex()+1;
            condition = this.txtCondition.getText();
            isAbsBol = this.chkisAbs.isSelected();
            
            Connection conn = ConnectionManager.getConnection();
            Statement st = conn.createStatement();
            ResultSet rs;
            String sql;
            String refDate = null;
            
            sql = "select cast(run_date as date) - 1 from branch where id=1;";
            rs = st.executeQuery(sql);
            while(rs.next()){
                refDate = rs.getString(1);
            }
            rs.close();
            System.out.println("############################################################Rep Code " + rep_code);
            System.out.println("############################################################Rep Code " + dataFunction);
            sql = "select round(fn_getcellvalue('"+rep_code+"', '"+sheet+"', "+ row.toString()+", "+col.toString()+", date '"
                    + refDate +"' + " + 0 +",null),2) as cell_value; ";
            
            System.out.println(sql);
            
            rs = st.executeQuery(sql);
            
            Double cellValue = null;
            DecimalFormat df = new DecimalFormat("#,###.00");
     
            while(rs.next()){
                cellValue = Double.parseDouble(rs.getString(1));
            }
            String cellValueFormated = df.format(cellValue);
            rs.close();
            JOptionPane.showMessageDialog(this, "Data Form result as of " + refDate +"\nReturn Value: "+ cellValueFormated);
            
        } catch (SQLException | IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(DataFormJInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnTestDataFormulationActionPerformed

    private void btnSearchDataFormulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchDataFormulationActionPerformed
        try {
            Connection conn = ConnectionManager.getConnection();
            Statement st = conn.createStatement();
            String sql;
            
            if (this.txtSheetName.getText().equals("")){
                JOptionPane.showMessageDialog(this, "Please enter Sheet Name");
                return;
            }
            
            sql = "select "
                    + "rep_code, "
                    + "sheet, "
                    + "row, "
                    + "col, "
                    + "data_function, "
                    + "currency_id, "
                    + "is_abs, "
                    + "condition, "
                    + "id, "
                    + "convert_type, "
                    + "forex_rate_field from report_dataform where rep_code = '"+ this.cmbReportCode.getSelectedItem().toString()
                    +"' and sheet = '"+ this.txtSheetName.getText() 
                    +"' and row = "+ this.spnRowNo.getValue().toString() 
                    +"  and col = "+ this.spnColumnNo.getValue().toString()+";";
            
            
            System.out.println(sql);
            ResultSet rs = st.executeQuery(sql);
            
            //String 
            if (!rs.next()){
                Integer choice = JOptionPane.showConfirmDialog(null,
                        "Data formulation Not Found. "
                                + "\nDo you want to create for "+ this.cmbReportCode.getSelectedItem().toString()
                                + " on Sheet " + this.txtSheetName.getText() 
                                + ", Row " + this.spnRowNo.getValue() 
                                + ", Column " + this.spnColumnNo.getValue() + " instead",
                        "Not Found", JOptionPane.YES_NO_OPTION,
                        JOptionPane.INFORMATION_MESSAGE);
                 if (choice == JOptionPane.YES_OPTION) {
                    System.out.println("yes");
                    dataformId = null;
                    this.cmbFunction.setEnabled(true);
                    this.lblFunction.setEnabled(true);
                    this.lstCurrency.setEnabled(true);
                    this.lblCurrency.setEnabled(true);
                    this.radConvert0.setEnabled(true);
                    this.radConvert1.setEnabled(true);
                    this.radConvert2.setEnabled(true);
                    this.radConvert3.setEnabled(true);
                    this.cmbForexRateFiled.setEnabled(true);
                    this.lblForexConvertType.setEnabled(true);
                    this.lblForexRateField.setEnabled(true);
                    this.chkisAbs.setEnabled(true);
                    this.txtCondition.setEnabled(true);
                    this.txtCondition.setText("");
                    this.lblCondition.setEnabled(true);
                    this.btnEditDataFormulation.setEnabled(false);
                    this.btnDeleteDataFormulation.setEnabled(false);
                    this.btnSaveDataFormulation.setEnabled(true);
                    this.btnTestDataFormulation.setEnabled(true);
                } else {
                    System.out.println("no");
                    this.cmbReportCode.setEnabled(true);
                    this.txtSheetName.setEnabled(true);
                    this.spnColumnNo.setEnabled(true);
                    this.spnRowNo.setEnabled(true);
                    this.cmbFunction.setEnabled(false);
                    this.lblFunction.setEnabled(false);
                    this.lstCurrency.setEnabled(false);
                    this.lblCurrency.setEnabled(false);
                    this.radConvert0.setEnabled(false);
                    this.radConvert1.setEnabled(false);
                    this.radConvert2.setEnabled(false);
                    this.radConvert3.setEnabled(false);
                    this.cmbForexRateFiled.setEnabled(false);
                    this.lblForexConvertType.setEnabled(false);
                    this.lblForexRateField.setEnabled(false);
                    this.chkisAbs.setEnabled(false);
                    this.txtCondition.setEnabled(false);
                    this.lblCondition.setEnabled(false);
                    this.btnEditDataFormulation.setEnabled(false);
                    this.btnDeleteDataFormulation.setEnabled(false);
                    this.btnSaveDataFormulation.setEnabled(false);
                    this.btnTestDataFormulation.setEnabled(false);
                }
            }
            else{
                System.out.println("dito ako may laman rs");
               
               
                rep_code = rs.getString(1);
                sheet = rs.getString(2);
                row = Integer.parseInt(rs.getString(3));
                col = Integer.parseInt(rs.getString(4));
                dataFunction = rs.getString(5);
                //currencyId = Integer.parseInt(rs.getString(6));
                currencyString = rs.getString(6);
                dataformId = Integer.parseInt(rs.getString(9));
                condition = rs.getString(8).replace("'", "''");
                convertType = Integer.parseInt(rs.getString(10));
                forexRateField = rs.getString(11).toUpperCase();
                
                
                
                this.cmbReportCode.setEnabled(true);
                this.txtSheetName.setEnabled(true);
                this.spnColumnNo.setEnabled(true);
                this.spnRowNo.setEnabled(true);
                this.cmbFunction.setEnabled(false);
                this.lblFunction.setEnabled(true);
                this.lstCurrency.setEnabled(false);
                this.lblCurrency.setEnabled(true);
                this.radConvert0.setEnabled(false);
                this.radConvert1.setEnabled(false);
                this.radConvert2.setEnabled(false);
                this.radConvert3.setEnabled(false);
                this.cmbForexRateFiled.setEnabled(false);
                this.lblForexConvertType.setEnabled(false);
                this.lblForexRateField.setEnabled(false);
                this.chkisAbs.setEnabled(false);
                this.txtCondition.setEnabled(false);
                this.lblCondition.setEnabled(true);
                this.btnEditDataFormulation.setEnabled(true);
                this.btnDeleteDataFormulation.setEnabled(true);
                this.btnTestDataFormulation.setEnabled(true);
                
                String isAbs = rs.getString(7);
                
                if (isAbs.equals("t")){
                    isAbsBol = true;
                }
                else{
                    isAbsBol = false;
                }
                
                this.cmbFunction.setSelectedItem(dataFunction);
                
                ArrayList<String> selectedCurrencyList;
                selectedCurrencyList = new  ArrayList<>(Arrays.asList(currencyString.split(",")));
                int[] intArray;
                intArray = new int[selectedCurrencyList.size()];
                for(int i = 0; i < selectedCurrencyList.size(); i++) {
                    intArray[i] = Integer.parseInt(selectedCurrencyList.get(i).trim())-1;
                }
                this.lstCurrency.setSelectedIndices(intArray);
        
                this.txtCondition.setText(condition);
                this.chkisAbs.setSelected(isAbsBol);
                
                System.out.println("Forex Convertion Type: " + convertType.toString());
                
                if (convertType.equals(0)){
                    this.radConvert0.setSelected(true);
                    this.radConvert1.setSelected(false);                 
                    this.radConvert2.setSelected(false);
                    this.radConvert3.setSelected(false);
                }
                else if (convertType.equals(1)){
                    this.radConvert0.setSelected(false);
                    this.radConvert1.setSelected(true);
                    this.radConvert2.setSelected(false);
                    this.radConvert3.setSelected(false);;
                }
                else if (convertType.equals(2)){
                    this.radConvert0.setSelected(false);
                    this.radConvert1.setSelected(false);
                    this.radConvert2.setSelected(true);
                    this.radConvert3.setSelected(false);
                }
                else if (convertType.equals(3)){
                    this.radConvert0.setSelected(false); 
                    this.radConvert1.setSelected(false);
                    this.radConvert2.setSelected(false);
                    this.radConvert3.setSelected(true);
                }
                
                        
                if (forexRateField.equals("RATE")){
                    this.cmbForexRateFiled.setSelectedIndex(0);
                }
                else if(forexRateField.equals("PDS_RATE")){
                    this.cmbForexRateFiled.setSelectedIndex(1);
                }
                else if(forexRateField.equals("HISTORICAL_RATE")){
                    this.cmbForexRateFiled.setSelectedIndex(2);
                }
            }    
            rs.close();
            st.close();
            conn.close();
  
        } catch (NumberFormatException| SQLException | IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(DataFormJInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSearchDataFormulationActionPerformed

    private void btnSaveDataFormulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveDataFormulationActionPerformed
        rep_code = this.cmbReportCode.getSelectedItem().toString();
        sheet = this.txtSheetName.getText();
        row = Integer.parseInt(this.spnRowNo.getValue().toString());
        col = Integer.parseInt(this.spnColumnNo.getValue().toString());
        dataFunction = this.cmbFunction.getSelectedItem().toString();

        currencyString = Arrays.toString(this.lstCurrency.getSelectedIndices()).replace("[","").replace("]","").trim();
        ArrayList<String> selectedCurrencyList;
        selectedCurrencyList = new  ArrayList<>(Arrays.asList(currencyString.split(",")));
            int[] intArray;
            intArray = new int[selectedCurrencyList.size()];
            for(int i = 0; i < selectedCurrencyList.size(); i++) {
                intArray[i] = Integer.parseInt(selectedCurrencyList.get(i).trim()) + 1;
                System.out.println( intArray[i]);
        }
        currencyString = Arrays.toString(intArray).replace("[","").replace("]","").trim(); 
        System.out.println("Currency ID String: "+ currencyString);
        
        forexRateField = this.cmbForexRateFiled.getSelectedItem().toString().trim().toUpperCase();
        if (forexRateField.equals("FOREX RATE")){
            forexRateField = "RATE"; 
        }
        else if (forexRateField.equals("PDS RATE")){
            forexRateField = "PDS_RATE"; 
        }
        else if (forexRateField.equals("HISTORICAL RATE")){
            forexRateField = "HISTORICAL_RATE"; 
        }
        
        System.out.println("Forex Rate Field: "+ forexRateField);
        
        if (this.radConvert0.isSelected()){
            convertType = 0;
        }
        if (this.radConvert1.isSelected()){
            convertType = 1;
        }
        if (this.radConvert2.isSelected()){
            convertType = 2;
        }
        if (this.radConvert3.isSelected()){
            convertType = 3;
        }
        System.out.println("Covert Type: "+ convertType.toString());
        condition = this.txtCondition.getText();
        
        isAbsBol = this.chkisAbs.isSelected();
        
        System.out.println("eto data form id bago upon click ng save: "+dataformId);
          
        try {
            Connection conn = ConnectionManager.getConnection();
            Statement st = conn.createStatement();
            ResultSet rs ;
            
            String sql;
            //test if dataform already exist
            if (dataformId == null) {
                dataformId = 0;
            }
            sql = "select case when id is null then 0 else id end from report_dataform where id=" + dataformId ;
            rs = st.executeQuery(sql);
            while (rs.next()){
                dataformId = Integer.parseInt(rs.getString(1));
            }
            System.out.println(dataformId);
            rs.cancelRowUpdates();
            Integer choice = JOptionPane.showConfirmDialog(null,
                "Save Data Formulation?",
                "Confirm Saving", JOptionPane.YES_NO_OPTION,
                JOptionPane.INFORMATION_MESSAGE);
            if (choice == JOptionPane.YES_OPTION) {
                if (dataformId.equals(0)){
                    sql = "(select case when max(id) is null then 0 else max(id) end from report_dataform)";
                    rs = st.executeQuery(sql);
                    while (rs.next()){
                        dataformId =Integer.parseInt(rs.getString(1))+1;
                    }
                    rs.close();
                        
                    sql = "insert into report_dataform ( id , version , rep_code , sheet , row , col , "
                        + "is_abs , currency_id , data_function , condition, convert_type, forex_rate_field  ) "
                        + "values ("+ dataformId + ", 0 , "
                        + "'"+ rep_code 
                        +"','"+ sheet 
                        +"', "+ row 
                        +",  "+ col 
                        +",  "+ isAbsBol.toString() 
                        +",  '"+ currencyString 
                        +"', '"+ dataFunction
                        +"','"+ condition 
                        +"','"+ convertType.toString()
                        +"','"+ forexRateField 
                        +"');";

                        System.out.println(sql);
                        st.executeUpdate(sql);
                }
                else{
                    //data for update only
                    sql = "update report_dataform set "
                            + "rep_code = '" + rep_code
                            + "',sheet = '" + sheet
                            + "',row = " + row
                            + ",col = " + col
                            + ",data_function = '" + dataFunction
                            + "',currency_id = '" + currencyString
                            + "', condition = '" + condition
                            + "', is_abs = " + isAbsBol.toString()
                            + ", convert_type = " + convertType.toString()
                            + ", forex_rate_field = '" + forexRateField
                            + "' where id = " + dataformId;
                    System.out.println(sql);
                    st.executeUpdate(sql);
                }
            }
            else{
                System.out.println("Save No");
            }    
            st.close();          
            this.cmbReportCode.setEnabled(true);
            this.txtSheetName.setEnabled(true);
            this.spnColumnNo.setEnabled(true);
            this.spnRowNo.setEnabled(true);
            this.cmbFunction.setEnabled(false);
            this.lblFunction.setEnabled(true);
            this.lstCurrency.setEnabled(false);
            this.lblCurrency.setEnabled(true);
            this.radConvert0.setEnabled(false);
            this.radConvert1.setEnabled(false);
            this.radConvert2.setEnabled(false);
            this.radConvert3.setEnabled(false);
            this.cmbForexRateFiled.setEnabled(false);
            this.lblForexConvertType.setEnabled(false);
            this.lblForexRateField.setEnabled(false);
            this.lblAbsoluteValue.setEnabled(false);
            this.lblCurrency.setEnabled(true);
            this.chkisAbs.setEnabled(false);
            this.txtCondition.setEnabled(false);
            this.lblCondition.setEnabled(true);
            this.btnEditDataFormulation.setEnabled(true);
            this.btnDeleteDataFormulation.setEnabled(true);
            this.btnTestDataFormulation.setEnabled(true);
            this.btnSaveDataFormulation.setEnabled(false);
            
        } catch (SQLException | IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(DataFormJInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveDataFormulationActionPerformed

    private void btnDeleteDataFormulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDataFormulationActionPerformed
        Integer choice = JOptionPane.showConfirmDialog(null,
                "Delete Data Formulation?",
                "Confirm Delete", JOptionPane.YES_NO_OPTION,
                JOptionPane.INFORMATION_MESSAGE);
        if (choice == JOptionPane.YES_OPTION) {
            try {
                String  sql;
                sql= "delete from report_dataform where id = "+dataformId +";";
                
                System.out.println(sql);
                this.txtSheetName.setText("");
                this.cmbReportCode.setEnabled(true);
                this.txtSheetName.setEnabled(true);
                this.spnColumnNo.setEnabled(true);
                this.spnColumnNo.setValue(0);
                this.spnRowNo.setEnabled(true);
                this.spnColumnNo.setValue(0);
                this.cmbFunction.setEnabled(false);
                this.cmbFunction.setSelectedIndex(0);
                this.lblFunction.setEnabled(false);
                this.lstCurrency.setEnabled(false);
                this.lblCurrency.setEnabled(false);
                this.radConvert0.setEnabled(false);
                this.radConvert1.setEnabled(false);
                this.radConvert2.setEnabled(false);
                this.radConvert3.setEnabled(false);
                this.cmbForexRateFiled.setEnabled(false);
                this.lblForexConvertType.setEnabled(false);
                this.lblForexRateField.setEnabled(false);
                this.lblAbsoluteValue.setEnabled(false);
                this.chkisAbs.setEnabled(false);
                this.chkisAbs.setSelected(true);
                this.txtCondition.setEnabled(false);
                this.txtCondition.setText("");
                this.lblCondition.setEnabled(false);
                this.btnEditDataFormulation.setEnabled(false);
                this.btnTestDataFormulation.setEnabled(false);
                this.btnDeleteDataFormulation.setEnabled(false);
                this.btnSaveDataFormulation.setEnabled(false);
                Connection conn = ConnectionManager.getConnection();  
                Statement st = conn.createStatement();
                
                st.executeUpdate(sql);

            } catch (SQLException | IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                Logger.getLogger(DataFormJInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            System.out.println("Save No");
        }
    }//GEN-LAST:event_btnDeleteDataFormulationActionPerformed

    private void btnEditDataFormulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditDataFormulationActionPerformed
        this.cmbReportCode.setEnabled(true);
        this.txtSheetName.setEnabled(true);
        this.spnColumnNo.setEnabled(true);
        this.spnRowNo.setEnabled(true);
        this.cmbFunction.setEnabled(true);
        this.lblFunction.setEnabled(true);
        this.lstCurrency.setEnabled(true);
        this.lblCurrency.setEnabled(true);
        this.radConvert0.setEnabled(true);
        this.radConvert1.setEnabled(true);
        this.radConvert2.setEnabled(true);
        this.radConvert3.setEnabled(true);
        this.cmbForexRateFiled.setEnabled(true);
        this.lblForexConvertType.setEnabled(true);
        this.lblForexRateField.setEnabled(true);
        this.lblAbsoluteValue.setEnabled(true);
        this.chkisAbs.setEnabled(true);
        this.txtCondition.setEnabled(true);
        this.lblCondition.setEnabled(true);   
        this.btnEditDataFormulation.setEnabled(false);
        this.btnTestDataFormulation.setEnabled(false);
        this.btnDeleteDataFormulation.setEnabled(false);
        this.btnSaveDataFormulation.setEnabled(true);
    }//GEN-LAST:event_btnEditDataFormulationActionPerformed

    private void radConvert1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radConvert1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radConvert1ActionPerformed

    private void radConvert0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radConvert0ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radConvert0ActionPerformed

    private void radConvert2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radConvert2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radConvert2ActionPerformed

    private void radConvert3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radConvert3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radConvert3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteDataFormulation;
    private javax.swing.JButton btnEditDataFormulation;
    private javax.swing.JButton btnSaveDataFormulation;
    private javax.swing.JButton btnSearchDataFormulation;
    private javax.swing.JButton btnTestDataFormulation;
    private javax.swing.ButtonGroup buttonGroupForexCovertType;
    private javax.swing.JCheckBox chkisAbs;
    private javax.swing.JComboBox cmbForexRateFiled;
    private javax.swing.JComboBox cmbFunction;
    private javax.swing.JComboBox cmbReportCode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblAbsoluteValue;
    private javax.swing.JLabel lblCondition;
    private javax.swing.JLabel lblCurrency;
    private javax.swing.JLabel lblForexConvertType;
    private javax.swing.JLabel lblForexRateField;
    private javax.swing.JLabel lblFunction;
    private javax.swing.JList lstCurrency;
    private javax.swing.JRadioButton radConvert0;
    private javax.swing.JRadioButton radConvert1;
    private javax.swing.JRadioButton radConvert2;
    private javax.swing.JRadioButton radConvert3;
    private javax.swing.JSpinner spnColumnNo;
    private javax.swing.JSpinner spnRowNo;
    private javax.swing.JTextArea txtCondition;
    private javax.swing.JTextField txtSheetName;
    // End of variables declaration//GEN-END:variables
}
